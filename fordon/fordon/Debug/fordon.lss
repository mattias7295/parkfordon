
fordon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000028a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000120  00000000  00000000  00000a58  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000854  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003ee  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000085c  00000000  00000000  000017ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000211  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000da  00000000  00000000  0000239d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a0 30       	cpi	r26, 0x00	; 0
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  c8:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <adc_init>:
#include "adc.h"

void adc_init() {
	
	/* Enable the ADC */
	ADCSRA |= _BV(ADEN);
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	80 83       	st	Z, r24
}
  da:	08 95       	ret

000000dc <adc_read>:

uint8_t adc_read(uint8_t adcx) {
	
	ADMUX	&=	0xf0;
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	90 7f       	andi	r25, 0xF0	; 240
  e4:	90 83       	st	Z, r25
	ADMUX	|=	adcx;
  e6:	90 81       	ld	r25, Z
  e8:	89 2b       	or	r24, r25
  ea:	80 83       	st	Z, r24
	
	
	ADCSRA |= _BV(ADSC);
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
	
	
	while ( (ADCSRA & _BV(ADSC)) );
  f6:	80 81       	ld	r24, Z
  f8:	86 fd       	sbrc	r24, 6
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <adc_read+0x1a>
	
	ADMUX |= (1 << ADLAR);
  fc:	ec e7       	ldi	r30, 0x7C	; 124
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 62       	ori	r24, 0x20	; 32
 104:	80 83       	st	Z, r24
	return ADCH;
 106:	80 91 79 00 	lds	r24, 0x0079
 10a:	08 95       	ret

0000010c <main>:
#include "pwm.h"
#include "spi.h"
#include "twi.h"
int main(void)
{
	USART_Init(MYUBRR);
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 27 01 	call	0x24e	; 0x24e <USART_Init>
	SPI_MasterInit();
 114:	0e 94 b7 00 	call	0x16e	; 0x16e <SPI_MasterInit>
	adc_init();
 118:	0e 94 68 00 	call	0xd0	; 0xd0 <adc_init>
	char cdata;
    while(1)
    {
		SPI_MasterTransmit(0x41);
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	0e 94 bc 00 	call	0x178	; 0x178 <SPI_MasterTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	87 ea       	ldi	r24, 0xA7	; 167
 124:	91 e6       	ldi	r25, 0x61	; 97
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x1a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x20>
 12c:	00 00       	nop
 12e:	f6 cf       	rjmp	.-20     	; 0x11c <main+0x10>

00000130 <init_pwm>:

#include "pwm.h"

void init_pwm() {
	//turn on two 8-bit timers
	TCCR0B = (1<<CS00);
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	85 bd       	out	0x25, r24	; 37
	TCCR2B = (1<<CS20);
 134:	80 93 b1 00 	sts	0x00B1, r24
	
	//set OC0A and 0C0B as outputs
	DDRB |= (1<<PB3) | (1<<PB4);
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	88 61       	ori	r24, 0x18	; 24
 13c:	84 b9       	out	0x04, r24	; 4
	
	//set OC2A and 0C2B as outputs
	DDRD |= (1<<PD6) | (1<<PD7);
 13e:	8a b1       	in	r24, 0x0a	; 10
 140:	80 6c       	ori	r24, 0xC0	; 192
 142:	8a b9       	out	0x0a, r24	; 10
}
 144:	08 95       	ret

00000146 <initEngineRightForward>:


void initEngineRightForward(unsigned char speed) {
	TCCR0A = (1<<COM0A0)|(1<<COM0A1)|(1<<WGM00);
 146:	91 ec       	ldi	r25, 0xC1	; 193
 148:	94 bd       	out	0x24, r25	; 36
	OCR0A = speed;
 14a:	87 bd       	out	0x27, r24	; 39
}
 14c:	08 95       	ret

0000014e <initEngineRightBackward>:

void initEngineRightBackward(unsigned char speed) {
	TCCR0A = (1<<COM0B0)|(1<<COM0B1)|(1<<WGM00);
 14e:	91 e3       	ldi	r25, 0x31	; 49
 150:	94 bd       	out	0x24, r25	; 36
	OCR0B = speed;
 152:	88 bd       	out	0x28, r24	; 40
}
 154:	08 95       	ret

00000156 <initEngineLeftForward>:

void initEngineLeftForward(unsigned char speed) {
	TCCR2A = (1<<COM2A0)|(1<<COM2A1)|(1<<WGM20);
 156:	91 ec       	ldi	r25, 0xC1	; 193
 158:	90 93 b0 00 	sts	0x00B0, r25
	OCR2A = speed;
 15c:	80 93 b3 00 	sts	0x00B3, r24
}
 160:	08 95       	ret

00000162 <initEngineLeftBackward>:

void initEngineLeftBackward(unsigned char speed) {
	TCCR2A = (1<<COM2B0)|(1<<COM2B1)|(1<<WGM20);
 162:	91 e3       	ldi	r25, 0x31	; 49
 164:	90 93 b0 00 	sts	0x00B0, r25
	OCR2B = speed;
 168:	80 93 b4 00 	sts	0x00B4, r24
 16c:	08 95       	ret

0000016e <SPI_MasterInit>:
#include <avr/io.h>

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<PB5)|(1<<PB7);
 16e:	80 ea       	ldi	r24, 0xA0	; 160
 170:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 172:	81 e5       	ldi	r24, 0x51	; 81
 174:	8c bd       	out	0x2c, r24	; 44
}
 176:	08 95       	ret

00000178 <SPI_MasterTransmit>:
void SPI_MasterTransmit(char cData)
{
 178:	cf 93       	push	r28
	/* Start transmission */
	SPDR = cData;
 17a:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 17c:	0d b4       	in	r0, 0x2d	; 45
 17e:	07 fe       	sbrs	r0, 7
 180:	fd cf       	rjmp	.-6      	; 0x17c <SPI_MasterTransmit+0x4>
	;
	cData = SPDR;
 182:	ce b5       	in	r28, 0x2e	; 46
	
	USART_Transmit(cData >> 8);
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 33 01 	call	0x266	; 0x266 <USART_Transmit>
	USART_Transmit(cData);
 18c:	8c 2f       	mov	r24, r28
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 33 01 	call	0x266	; 0x266 <USART_Transmit>
	
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <compas_update>:
#include "twi.h"
#include <util/delay.h>
#include "usart.h"

void compas_update()
{
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
	//Start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 1a0:	84 ea       	ldi	r24, 0xA4	; 164
 1a2:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));
 1a6:	ec eb       	ldi	r30, 0xBC	; 188
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	88 23       	and	r24, r24
 1ae:	ec f7       	brge	.-6      	; 0x1aa <compas_update+0x12>
	
	
	//Send address
	TWDR = 0x42;
 1b0:	82 e4       	ldi	r24, 0x42	; 66
 1b2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 1b6:	ec eb       	ldi	r30, 0xBC	; 188
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	84 e8       	ldi	r24, 0x84	; 132
 1bc:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)))
 1be:	80 81       	ld	r24, Z
 1c0:	88 23       	and	r24, r24
 1c2:	3c f0       	brlt	.+14     	; 0x1d2 <compas_update+0x3a>
	
	
	//Send Data
	TWDR = 0x41;
 1c4:	ab eb       	ldi	r26, 0xBB	; 187
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	91 e4       	ldi	r25, 0x41	; 65
 1ca:	9c 93       	st	X, r25
	
	
	//Send address
	TWDR = 0x42;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)))
 1cc:	80 81       	ld	r24, Z
 1ce:	88 23       	and	r24, r24
 1d0:	e4 f7       	brge	.-8      	; 0x1ca <compas_update+0x32>
	
	
	//Send Data
	TWDR = 0x41;
	TWCR = (1<<TWINT) | (1<<TWEN);
 1d2:	ec eb       	ldi	r30, 0xBC	; 188
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	84 e8       	ldi	r24, 0x84	; 132
 1d8:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)))
 1da:	80 81       	ld	r24, Z
 1dc:	88 23       	and	r24, r24
 1de:	2c f0       	brlt	.+10     	; 0x1ea <compas_update+0x52>
	
	//Stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	
 1e0:	94 e9       	ldi	r25, 0x94	; 148
 1e2:	90 83       	st	Z, r25
	
	
	//Send Data
	TWDR = 0x41;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)))
 1e4:	80 81       	ld	r24, Z
 1e6:	88 23       	and	r24, r24
 1e8:	e4 f7       	brge	.-8      	; 0x1e2 <compas_update+0x4a>
 1ea:	8b e5       	ldi	r24, 0x5B	; 91
 1ec:	94 e4       	ldi	r25, 0x44	; 68
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <compas_update+0x56>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <compas_update+0x5c>
 1f4:	00 00       	nop
	//Stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	
	_delay_ms(70);
	
	//Start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 1f6:	84 ea       	ldi	r24, 0xA4	; 164
 1f8:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));
 1fc:	ec eb       	ldi	r30, 0xBC	; 188
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	88 23       	and	r24, r24
 204:	ec f7       	brge	.-6      	; 0x200 <compas_update+0x68>
	
	
	//Send address
	TWDR = 0x43;
 206:	83 e4       	ldi	r24, 0x43	; 67
 208:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 20c:	ec eb       	ldi	r30, 0xBC	; 188
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	84 e8       	ldi	r24, 0x84	; 132
 212:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)))
 214:	80 81       	ld	r24, Z
 216:	88 23       	and	r24, r24
 218:	2c f0       	brlt	.+10     	; 0x224 <compas_update+0x8c>
	
	//Read data
	TWCR = (1<<TWINT) | (1<<TWEA);
 21a:	90 ec       	ldi	r25, 0xC0	; 192
 21c:	90 83       	st	Z, r25
	
	
	//Send address
	TWDR = 0x43;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)))
 21e:	80 81       	ld	r24, Z
 220:	88 23       	and	r24, r24
 222:	e4 f7       	brge	.-8      	; 0x21c <compas_update+0x84>
	
	//Read data
	TWCR = (1<<TWINT) | (1<<TWEA);
	uint8_t  high = TWDR;
 224:	cb eb       	ldi	r28, 0xBB	; 187
 226:	d0 e0       	ldi	r29, 0x00	; 0
 228:	88 81       	ld	r24, Y
	USART_Transmit(high);
 22a:	0e 94 33 01 	call	0x266	; 0x266 <USART_Transmit>
	
	TWCR = (1<<TWINT);
 22e:	0c eb       	ldi	r16, 0xBC	; 188
 230:	10 e0       	ldi	r17, 0x00	; 0
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	f8 01       	movw	r30, r16
 236:	80 83       	st	Z, r24
	uint8_t low = TWDR;
 238:	88 81       	ld	r24, Y
	USART_Transmit(low);
 23a:	0e 94 33 01 	call	0x266	; 0x266 <USART_Transmit>
	
	
	//Stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 23e:	84 e9       	ldi	r24, 0x94	; 148
 240:	f8 01       	movw	r30, r16
 242:	80 83       	st	Z, r24
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	08 95       	ret

0000024e <USART_Init>:

#include "usart.h"

void USART_Init( unsigned int baud )
{
	DDRD |= (1<<PD1);
 24e:	51 9a       	sbi	0x0a, 1	; 10
	/* Set baud rate */
	UBRR0H = (unsigned char)(baud>>8);
 250:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)baud;
 254:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 258:	88 e1       	ldi	r24, 0x18	; 24
 25a:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 25e:	8e e0       	ldi	r24, 0x0E	; 14
 260:	80 93 c2 00 	sts	0x00C2, r24
}
 264:	08 95       	ret

00000266 <USART_Transmit>:

void USART_Transmit( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 266:	e0 ec       	ldi	r30, 0xC0	; 192
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	90 81       	ld	r25, Z
 26c:	95 ff       	sbrs	r25, 5
 26e:	fd cf       	rjmp	.-6      	; 0x26a <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 270:	80 93 c6 00 	sts	0x00C6, r24
}
 274:	08 95       	ret

00000276 <USART_Receive>:

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 276:	e0 ec       	ldi	r30, 0xC0	; 192
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	88 23       	and	r24, r24
 27e:	ec f7       	brge	.-6      	; 0x27a <USART_Receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
 280:	80 91 c6 00 	lds	r24, 0x00C6
 284:	08 95       	ret

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
