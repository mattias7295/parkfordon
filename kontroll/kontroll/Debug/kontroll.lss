
kontroll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000104c  000010e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000104c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000010e0  2**0
                  ALLOC
  3 .stab         00002964  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008e9  00000000  00000000  00003a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00004330  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000829  00000000  00000000  000043d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f2  00000000  00000000  00004bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050b  00000000  00000000  00004eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000053f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000252  00000000  00000000  000055ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000052c  00000000  00000000  0000583e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_1>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_2>
       c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      68:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      6c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      70:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      74:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      7c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      80:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      84:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      88:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	sts	0x9b, r22
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d0 e4       	ldi	r29, 0x40	; 64
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ec e4       	ldi	r30, 0x4C	; 76
      ce:	f0 e1       	ldi	r31, 0x10	; 16
      d0:	00 e0       	ldi	r16, 0x00	; 0
      d2:	0b bf       	out	0x3b, r16	; 59
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x14>
      d6:	07 90       	elpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a0 30       	cpi	r26, 0x00	; 0
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0x10>
      e0:	1b be       	out	0x3b, r1	; 59

000000e2 <__do_clear_bss>:
      e2:	11 e0       	ldi	r17, 0x01	; 1
      e4:	a0 e0       	ldi	r26, 0x00	; 0
      e6:	b1 e0       	ldi	r27, 0x01	; 1
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a6 30       	cpi	r26, 0x06	; 6
      ee:	b1 07       	cpc	r27, r17
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
      f2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <main>
      f6:	0c 94 24 08 	jmp	0x1048	; 0x1048 <_exit>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <initOnInterrupt>:
steer_mode steer;

void initOnInterrupt() {
	
	/* Disable the external interrupt on port INT0. */
	EIMSK &= ~(1<<ON_OFF_SWITCH);
      fe:	e8 98       	cbi	0x1d, 0	; 29
	
	/* Low level generates interrupt. */
	EICRA &= ~(1<<ISC00)|(1<<ISC01);
     100:	e9 e6       	ldi	r30, 0x69	; 105
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	8e 7f       	andi	r24, 0xFE	; 254
     108:	80 83       	st	Z, r24
	
	/* Enable the external interrupt on port INT0. */
	EIMSK |= (1<<ON_OFF_SWITCH);
     10a:	e8 9a       	sbi	0x1d, 0	; 29
	
	/* Set the global interrupt flag. */
//	sei();
}
     10c:	08 95       	ret

0000010e <initOffInterrupt>:

void initOffInterrupt() {
	
	/* Disable the external interrupt on port INT0. */
	EIMSK &= ~(1<<ON_OFF_SWITCH);
     10e:	e8 98       	cbi	0x1d, 0	; 29
	
	/* Rising edge generates interrupt. */
	EICRA |= (1<<ISC00)|(1<<ISC01);
     110:	e9 e6       	ldi	r30, 0x69	; 105
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	83 60       	ori	r24, 0x03	; 3
     118:	80 83       	st	Z, r24
	
	/* Enable the external interrupt on port INT0. */
	EIMSK |= (1<<ON_OFF_SWITCH);
     11a:	e8 9a       	sbi	0x1d, 0	; 29
	
	/* Set the global interrupt flag. */
//	sei();
}
     11c:	08 95       	ret

0000011e <initSteerInterrupt>:

void initSteerInterrupt() {
	
	/* Disable the external interrupt on port INT1. */
	EIMSK &= ~(1<<STEER_SWITCH);
     11e:	e9 98       	cbi	0x1d, 1	; 29
	
	/* Any edge generates interrupt. */
	EICRA |= (1<<ISC10);
     120:	e9 e6       	ldi	r30, 0x69	; 105
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	80 81       	ld	r24, Z
     126:	84 60       	ori	r24, 0x04	; 4
     128:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC11);
     12a:	80 81       	ld	r24, Z
     12c:	87 7f       	andi	r24, 0xF7	; 247
     12e:	80 83       	st	Z, r24
	
	/* Enable the external interrupt on port INT1. */
	EIMSK |= (1<<STEER_SWITCH);
     130:	e9 9a       	sbi	0x1d, 1	; 29
	
	/* Set the global interrupt flag. */
//	sei();
}
     132:	08 95       	ret

00000134 <__vector_1>:
* Description:	Interrupt routine for an external interrupt
*				on port INT0, does nothing but waking the MCU
*				up after entering sleep mode and changing the
*				power mode flag correctly.
*/
ISR(INT0_vect) {
     134:	1f 92       	push	r1
     136:	0f 92       	push	r0
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	0f 92       	push	r0
     13c:	11 24       	eor	r1, r1
     13e:	8f 93       	push	r24
	
	/* Change power mode flag. */
	if (power == OFF) {
     140:	80 91 00 01 	lds	r24, 0x0100
     144:	81 30       	cpi	r24, 0x01	; 1
     146:	19 f4       	brne	.+6      	; 0x14e <__vector_1+0x1a>
		power = ON;
     148:	10 92 00 01 	sts	0x0100, r1
     14c:	03 c0       	rjmp	.+6      	; 0x154 <__vector_1+0x20>
//		PORTB |= _BV(POWER_CONTROL);
	} else {
		power = OFF;
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	80 93 00 01 	sts	0x0100, r24
//		PORTB &= ~_BV(POWER_CONTROL);
	}
}
     154:	8f 91       	pop	r24
     156:	0f 90       	pop	r0
     158:	0f be       	out	0x3f, r0	; 63
     15a:	0f 90       	pop	r0
     15c:	1f 90       	pop	r1
     15e:	18 95       	reti

00000160 <__vector_2>:

ISR(INT1_vect) {
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	8f 93       	push	r24
	
	/* Change steering mode flag. */
	if (steer == MAN) {
     16c:	80 91 01 01 	lds	r24, 0x0101
     170:	88 23       	and	r24, r24
     172:	29 f4       	brne	.+10     	; 0x17e <__vector_2+0x1e>
		steer = AUTO;
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	80 93 01 01 	sts	0x0101, r24
		PORTB |= _BV(STEER_CONTROL);
     17a:	29 9a       	sbi	0x05, 1	; 5
     17c:	03 c0       	rjmp	.+6      	; 0x184 <__vector_2+0x24>
	} else {
		steer = MAN;
     17e:	10 92 01 01 	sts	0x0101, r1
		PORTB &= ~_BV(STEER_CONTROL);
     182:	29 98       	cbi	0x05, 1	; 5
	}
	
}
     184:	8f 91       	pop	r24
     186:	0f 90       	pop	r0
     188:	0f be       	out	0x3f, r0	; 63
     18a:	0f 90       	pop	r0
     18c:	1f 90       	pop	r1
     18e:	18 95       	reti

00000190 <USART_Init>:
* Description: Initializes the USART.
*/
void USART_Init(unsigned int ubrr) {
	
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     190:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     194:	80 93 c4 00 	sts	0x00C4, r24
	
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     198:	88 e1       	ldi	r24, 0x18	; 24
     19a:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     19e:	8e e0       	ldi	r24, 0x0E	; 14
     1a0:	80 93 c2 00 	sts	0x00C2, r24
}
     1a4:	08 95       	ret

000001a6 <init>:
*				and timer.
*/
void init() {
	
	/* Set power port to output and high. */
	DDRD |= _BV(POWER_PORT);
     1a6:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= _BV(POWER_PORT);
     1a8:	5f 9a       	sbi	0x0b, 7	; 11
	
	/* Set power control to output and constantly high since we start in on mode. */
	DDRB |= _BV(POWER_CONTROL);
     1aa:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= _BV(POWER_CONTROL);
     1ac:	28 9a       	sbi	0x05, 0	; 5
	
	/* Set steer control to output. */
	DDRB |= _BV(STEER_CONTROL);
     1ae:	21 9a       	sbi	0x04, 1	; 4
	
	/* Set switches as inputs with pull up resistance. */
	DDRD &= ~_BV(ON_OFF_SWITCH);
     1b0:	50 98       	cbi	0x0a, 0	; 10
	DDRD &= ~_BV(STEER_SWITCH);
     1b2:	51 98       	cbi	0x0a, 1	; 10
	PORTD |= _BV(ON_OFF_SWITCH);
     1b4:	58 9a       	sbi	0x0b, 0	; 11
	PORTD |= _BV(STEER_SWITCH);
     1b6:	59 9a       	sbi	0x0b, 1	; 11

	/* Enable the ADC. */
	ADCSRA |= _BV(ADEN);
     1b8:	ea e7       	ldi	r30, 0x7A	; 122
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	80 68       	ori	r24, 0x80	; 128
     1c0:	80 83       	st	Z, r24
	
	/* Initialize the USART. */
	USART_Init(MYUBRR);
     1c2:	83 e3       	ldi	r24, 0x33	; 51
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 c8 00 	call	0x190	; 0x190 <USART_Init>
	
	/* Initialize global flags and indicate steering mode with LED. */	
	power = ON;
     1ca:	10 92 00 01 	sts	0x0100, r1
	
	if (PIND & (1<<STEER_SWITCH_IN)) {
     1ce:	4b 9b       	sbis	0x09, 3	; 9
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <init+0x34>
		steer = MAN;
     1d2:	10 92 01 01 	sts	0x0101, r1
		PORTB &= ~_BV(STEER_CONTROL);
     1d6:	29 98       	cbi	0x05, 1	; 5
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <init+0x3c>
	} else {
		steer = AUTO;
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	80 93 01 01 	sts	0x0101, r24
		PORTB |= _BV(STEER_CONTROL);
     1e0:	29 9a       	sbi	0x05, 1	; 5
	}
	
	/* Initialize the interrupts for turning off the control pad and
	 * changing the steering mode. */
	initOffInterrupt();
     1e2:	0e 94 87 00 	call	0x10e	; 0x10e <initOffInterrupt>
	initSteerInterrupt();
     1e6:	0e 94 8f 00 	call	0x11e	; 0x11e <initSteerInterrupt>
	
	/* Set global interrupt flag. */
	sei();
     1ea:	78 94       	sei
}
     1ec:	08 95       	ret

000001ee <USART_Transmit>:
* Description: Transmits data via bluetooth.
*/
void USART_Transmit(unsigned char data) {
	
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
     1ee:	e0 ec       	ldi	r30, 0xC0	; 192
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	90 81       	ld	r25, Z
     1f4:	95 ff       	sbrs	r25, 5
     1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <USART_Transmit+0x4>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     1f8:	80 93 c6 00 	sts	0x00C6, r24
}
     1fc:	08 95       	ret

000001fe <USART_Receive>:
* Description: Receives data via bluetooth.
*/
unsigned char USART_Receive() {
	
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
     1fe:	e0 ec       	ldi	r30, 0xC0	; 192
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	88 23       	and	r24, r24
     206:	ec f7       	brge	.-6      	; 0x202 <USART_Receive+0x4>
	
	/* Get and return received data from buffer */
	return UDR0;
     208:	80 91 c6 00 	lds	r24, 0x00C6
}
     20c:	08 95       	ret

0000020e <adc_read>:
*/
uint16_t adc_read(uint8_t adcx) {
	
	/* Takes voltage levels from Aref and sets which analog pin we want
	 * to read from. */
	ADMUX &= (1<<REFS0)|(1<<ADLAR);
     20e:	ec e7       	ldi	r30, 0x7C	; 124
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	90 81       	ld	r25, Z
     214:	90 76       	andi	r25, 0x60	; 96
     216:	90 83       	st	Z, r25
	ADMUX |= adcx;
     218:	90 81       	ld	r25, Z
     21a:	89 2b       	or	r24, r25
     21c:	80 83       	st	Z, r24

	/* This starts the conversion. */
	ADCSRA |= _BV(ADSC);
     21e:	ea e7       	ldi	r30, 0x7A	; 122
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	80 64       	ori	r24, 0x40	; 64
     226:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	* is finished. It constantly checks ADCSRA's ADSC bit, which we just
	* set above, to see if it is still set. This bit is automatically
	* reset (zeroed) when the conversion is ready so if we do this in
	* a loop the loop will just go until the conversion is ready. */
	while ((ADCSRA & _BV(ADSC)));
     228:	80 81       	ld	r24, Z
     22a:	86 fd       	sbrc	r24, 6
     22c:	fd cf       	rjmp	.-6      	; 0x228 <adc_read+0x1a>

	/* Finally, we return the converted value to the calling function. */
	return ADC;
     22e:	80 91 78 00 	lds	r24, 0x0078
     232:	90 91 79 00 	lds	r25, 0x0079
}
     236:	08 95       	ret

00000238 <getXValue>:
*				value of the adc_read function.
*/
int getXValue() {
	
	int x_value;
	uint16_t read = adc_read(X_AXIS);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 07 01 	call	0x20e	; 0x20e <adc_read>
	
	if (read >= ADC_THRESHOLDH7) {
     23e:	23 e0       	ldi	r18, 0x03	; 3
     240:	80 3c       	cpi	r24, 0xC0	; 192
     242:	92 07       	cpc	r25, r18
     244:	a0 f5       	brcc	.+104    	; 0x2ae <getXValue+0x76>
		x_value = 7;
	} else if (read > ADC_THRESHOLDH6) {
     246:	23 e0       	ldi	r18, 0x03	; 3
     248:	81 38       	cpi	r24, 0x81	; 129
     24a:	92 07       	cpc	r25, r18
     24c:	98 f5       	brcc	.+102    	; 0x2b4 <getXValue+0x7c>
		x_value = 6;
	} else if (read > ADC_THRESHOLDH5) {
     24e:	23 e0       	ldi	r18, 0x03	; 3
     250:	81 34       	cpi	r24, 0x41	; 65
     252:	92 07       	cpc	r25, r18
     254:	90 f5       	brcc	.+100    	; 0x2ba <getXValue+0x82>
		x_value = 5;
	} else if (read > ADC_THRESHOLDH4) {
     256:	23 e0       	ldi	r18, 0x03	; 3
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	92 07       	cpc	r25, r18
     25c:	88 f5       	brcc	.+98     	; 0x2c0 <getXValue+0x88>
		x_value = 4;
	} else if (read > ADC_THRESHOLDH3) {
     25e:	22 e0       	ldi	r18, 0x02	; 2
     260:	81 3c       	cpi	r24, 0xC1	; 193
     262:	92 07       	cpc	r25, r18
     264:	80 f5       	brcc	.+96     	; 0x2c6 <getXValue+0x8e>
		x_value = 3;
	} else if (read > ADC_THRESHOLDH2) {
     266:	22 e0       	ldi	r18, 0x02	; 2
     268:	81 38       	cpi	r24, 0x81	; 129
     26a:	92 07       	cpc	r25, r18
     26c:	78 f5       	brcc	.+94     	; 0x2cc <getXValue+0x94>
		x_value = 2;
	} else if (read > ADC_THRESHOLDH1) {
     26e:	22 e0       	ldi	r18, 0x02	; 2
     270:	81 34       	cpi	r24, 0x41	; 65
     272:	92 07       	cpc	r25, r18
     274:	70 f5       	brcc	.+92     	; 0x2d2 <getXValue+0x9a>
		x_value = 1;
	} else if (read <= ADC_THRESHOLDL7) {
     276:	81 34       	cpi	r24, 0x41	; 65
     278:	91 05       	cpc	r25, r1
     27a:	70 f1       	brcs	.+92     	; 0x2d8 <getXValue+0xa0>
		x_value = -7;
	} else if (read < ADC_THRESHOLDL6) {
     27c:	80 38       	cpi	r24, 0x80	; 128
     27e:	91 05       	cpc	r25, r1
     280:	70 f1       	brcs	.+92     	; 0x2de <getXValue+0xa6>
		x_value = -6;
	} else if (read < ADC_THRESHOLDL5) {
     282:	80 3c       	cpi	r24, 0xC0	; 192
     284:	91 05       	cpc	r25, r1
     286:	70 f1       	brcs	.+92     	; 0x2e4 <getXValue+0xac>
		x_value = -5;
	} else if (read < ADC_THRESHOLDL4) {
     288:	8f 3f       	cpi	r24, 0xFF	; 255
     28a:	91 05       	cpc	r25, r1
     28c:	71 f1       	breq	.+92     	; 0x2ea <getXValue+0xb2>
     28e:	68 f1       	brcs	.+90     	; 0x2ea <getXValue+0xb2>
		x_value = -4;
	} else if (read < ADC_THRESHOLDL3) {
     290:	21 e0       	ldi	r18, 0x01	; 1
     292:	80 34       	cpi	r24, 0x40	; 64
     294:	92 07       	cpc	r25, r18
     296:	60 f1       	brcs	.+88     	; 0x2f0 <getXValue+0xb8>
		x_value = -3;
	} else if (read < ADC_THRESHOLDL2) {
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	80 38       	cpi	r24, 0x80	; 128
     29c:	92 07       	cpc	r25, r18
     29e:	58 f1       	brcs	.+86     	; 0x2f6 <getXValue+0xbe>
		x_value = -2;
	} else if (read < ADC_THRESHOLDL1){
     2a0:	21 e0       	ldi	r18, 0x01	; 1
     2a2:	80 3c       	cpi	r24, 0xC0	; 192
     2a4:	92 07       	cpc	r25, r18
     2a6:	50 f5       	brcc	.+84     	; 0x2fc <getXValue+0xc4>
		x_value = -1;
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	9f ef       	ldi	r25, 0xFF	; 255
     2ac:	08 95       	ret
	
	int x_value;
	uint16_t read = adc_read(X_AXIS);
	
	if (read >= ADC_THRESHOLDH7) {
		x_value = 7;
     2ae:	87 e0       	ldi	r24, 0x07	; 7
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	08 95       	ret
	} else if (read > ADC_THRESHOLDH6) {
		x_value = 6;
     2b4:	86 e0       	ldi	r24, 0x06	; 6
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	08 95       	ret
	} else if (read > ADC_THRESHOLDH5) {
		x_value = 5;
     2ba:	85 e0       	ldi	r24, 0x05	; 5
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	08 95       	ret
	} else if (read > ADC_THRESHOLDH4) {
		x_value = 4;
     2c0:	84 e0       	ldi	r24, 0x04	; 4
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	08 95       	ret
	} else if (read > ADC_THRESHOLDH3) {
		x_value = 3;
     2c6:	83 e0       	ldi	r24, 0x03	; 3
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	08 95       	ret
	} else if (read > ADC_THRESHOLDH2) {
		x_value = 2;
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	08 95       	ret
	} else if (read > ADC_THRESHOLDH1) {
		x_value = 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	08 95       	ret
	} else if (read <= ADC_THRESHOLDL7) {
		x_value = -7;
     2d8:	89 ef       	ldi	r24, 0xF9	; 249
     2da:	9f ef       	ldi	r25, 0xFF	; 255
     2dc:	08 95       	ret
	} else if (read < ADC_THRESHOLDL6) {
		x_value = -6;
     2de:	8a ef       	ldi	r24, 0xFA	; 250
     2e0:	9f ef       	ldi	r25, 0xFF	; 255
     2e2:	08 95       	ret
	} else if (read < ADC_THRESHOLDL5) {
		x_value = -5;
     2e4:	8b ef       	ldi	r24, 0xFB	; 251
     2e6:	9f ef       	ldi	r25, 0xFF	; 255
     2e8:	08 95       	ret
	} else if (read < ADC_THRESHOLDL4) {
		x_value = -4;
     2ea:	8c ef       	ldi	r24, 0xFC	; 252
     2ec:	9f ef       	ldi	r25, 0xFF	; 255
     2ee:	08 95       	ret
	} else if (read < ADC_THRESHOLDL3) {
		x_value = -3;
     2f0:	8d ef       	ldi	r24, 0xFD	; 253
     2f2:	9f ef       	ldi	r25, 0xFF	; 255
     2f4:	08 95       	ret
	} else if (read < ADC_THRESHOLDL2) {
		x_value = -2;
     2f6:	8e ef       	ldi	r24, 0xFE	; 254
     2f8:	9f ef       	ldi	r25, 0xFF	; 255
     2fa:	08 95       	ret
	} else if (read < ADC_THRESHOLDL1){
		x_value = -1;
	} else {
		x_value = 0;
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
	}
					
	return x_value;
}
     300:	08 95       	ret

00000302 <getYValue>:
*				value of the adc_read function.
*/
int getYValue() {
	
	int y_value;
	uint16_t read = adc_read(Y_AXIS);
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	0e 94 07 01 	call	0x20e	; 0x20e <adc_read>
	
	if (read >= ADC_THRESHOLDH7) {
     308:	23 e0       	ldi	r18, 0x03	; 3
     30a:	80 3c       	cpi	r24, 0xC0	; 192
     30c:	92 07       	cpc	r25, r18
     30e:	b0 f5       	brcc	.+108    	; 0x37c <getYValue+0x7a>
		y_value = -7;
	} else if (read > ADC_THRESHOLDH6) {
     310:	43 e0       	ldi	r20, 0x03	; 3
     312:	81 38       	cpi	r24, 0x81	; 129
     314:	94 07       	cpc	r25, r20
     316:	a8 f5       	brcc	.+106    	; 0x382 <getYValue+0x80>
		y_value = -6;
	} else if (read > ADC_THRESHOLDH5) {
     318:	23 e0       	ldi	r18, 0x03	; 3
     31a:	81 34       	cpi	r24, 0x41	; 65
     31c:	92 07       	cpc	r25, r18
     31e:	a0 f5       	brcc	.+104    	; 0x388 <getYValue+0x86>
		y_value = -5;
	} else if (read > ADC_THRESHOLDH4) {
     320:	43 e0       	ldi	r20, 0x03	; 3
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	94 07       	cpc	r25, r20
     326:	98 f5       	brcc	.+102    	; 0x38e <getYValue+0x8c>
		y_value = -4;
	} else if (read > ADC_THRESHOLDH3) {
     328:	22 e0       	ldi	r18, 0x02	; 2
     32a:	81 3c       	cpi	r24, 0xC1	; 193
     32c:	92 07       	cpc	r25, r18
     32e:	90 f5       	brcc	.+100    	; 0x394 <getYValue+0x92>
		y_value = -3;
	} else if (read > ADC_THRESHOLDH2) {
     330:	42 e0       	ldi	r20, 0x02	; 2
     332:	81 38       	cpi	r24, 0x81	; 129
     334:	94 07       	cpc	r25, r20
     336:	88 f5       	brcc	.+98     	; 0x39a <getYValue+0x98>
		y_value = -2;
	} else if (read > ADC_THRESHOLDH1) {
     338:	22 e0       	ldi	r18, 0x02	; 2
     33a:	81 34       	cpi	r24, 0x41	; 65
     33c:	92 07       	cpc	r25, r18
     33e:	80 f5       	brcc	.+96     	; 0x3a0 <getYValue+0x9e>
		y_value = -1;
	} else if (read <= ADC_THRESHOLDL7) {
     340:	81 34       	cpi	r24, 0x41	; 65
     342:	91 05       	cpc	r25, r1
     344:	80 f1       	brcs	.+96     	; 0x3a6 <getYValue+0xa4>
		y_value = 7;
	} else if (read < ADC_THRESHOLDL6) {
     346:	80 38       	cpi	r24, 0x80	; 128
     348:	91 05       	cpc	r25, r1
     34a:	80 f1       	brcs	.+96     	; 0x3ac <getYValue+0xaa>
		y_value = 6;
	} else if (read < ADC_THRESHOLDL5) {
     34c:	80 3c       	cpi	r24, 0xC0	; 192
     34e:	91 05       	cpc	r25, r1
     350:	80 f1       	brcs	.+96     	; 0x3b2 <getYValue+0xb0>
		y_value = 5;
	} else if (read < ADC_THRESHOLDL4) {
     352:	8f 3f       	cpi	r24, 0xFF	; 255
     354:	91 05       	cpc	r25, r1
     356:	81 f1       	breq	.+96     	; 0x3b8 <getYValue+0xb6>
     358:	78 f1       	brcs	.+94     	; 0x3b8 <getYValue+0xb6>
		y_value = 4;
	} else if (read < ADC_THRESHOLDL3) {
     35a:	41 e0       	ldi	r20, 0x01	; 1
     35c:	80 34       	cpi	r24, 0x40	; 64
     35e:	94 07       	cpc	r25, r20
     360:	70 f1       	brcs	.+92     	; 0x3be <getYValue+0xbc>
		y_value = 3;
	} else if (read < ADC_THRESHOLDL2) {
     362:	21 e0       	ldi	r18, 0x01	; 1
     364:	80 38       	cpi	r24, 0x80	; 128
     366:	92 07       	cpc	r25, r18
     368:	68 f1       	brcs	.+90     	; 0x3c4 <getYValue+0xc2>
	
	int y_value;
	uint16_t read = adc_read(Y_AXIS);
	
	if (read >= ADC_THRESHOLDH7) {
		y_value = -7;
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	41 e0       	ldi	r20, 0x01	; 1
     370:	80 3c       	cpi	r24, 0xC0	; 192
     372:	94 07       	cpc	r25, r20
     374:	48 f1       	brcs	.+82     	; 0x3c8 <getYValue+0xc6>
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	26 c0       	rjmp	.+76     	; 0x3c8 <getYValue+0xc6>
     37c:	29 ef       	ldi	r18, 0xF9	; 249
     37e:	3f ef       	ldi	r19, 0xFF	; 255
     380:	23 c0       	rjmp	.+70     	; 0x3c8 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH6) {
		y_value = -6;
     382:	2a ef       	ldi	r18, 0xFA	; 250
     384:	3f ef       	ldi	r19, 0xFF	; 255
     386:	20 c0       	rjmp	.+64     	; 0x3c8 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH5) {
		y_value = -5;
     388:	2b ef       	ldi	r18, 0xFB	; 251
     38a:	3f ef       	ldi	r19, 0xFF	; 255
     38c:	1d c0       	rjmp	.+58     	; 0x3c8 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH4) {
		y_value = -4;
     38e:	2c ef       	ldi	r18, 0xFC	; 252
     390:	3f ef       	ldi	r19, 0xFF	; 255
     392:	1a c0       	rjmp	.+52     	; 0x3c8 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH3) {
		y_value = -3;
     394:	2d ef       	ldi	r18, 0xFD	; 253
     396:	3f ef       	ldi	r19, 0xFF	; 255
     398:	17 c0       	rjmp	.+46     	; 0x3c8 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH2) {
		y_value = -2;
     39a:	2e ef       	ldi	r18, 0xFE	; 254
     39c:	3f ef       	ldi	r19, 0xFF	; 255
     39e:	14 c0       	rjmp	.+40     	; 0x3c8 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH1) {
		y_value = -1;
     3a0:	2f ef       	ldi	r18, 0xFF	; 255
     3a2:	3f ef       	ldi	r19, 0xFF	; 255
     3a4:	11 c0       	rjmp	.+34     	; 0x3c8 <getYValue+0xc6>
	} else if (read <= ADC_THRESHOLDL7) {
		y_value = 7;
     3a6:	27 e0       	ldi	r18, 0x07	; 7
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	0e c0       	rjmp	.+28     	; 0x3c8 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL6) {
		y_value = 6;
     3ac:	26 e0       	ldi	r18, 0x06	; 6
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	0b c0       	rjmp	.+22     	; 0x3c8 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL5) {
		y_value = 5;
     3b2:	25 e0       	ldi	r18, 0x05	; 5
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL4) {
		y_value = 4;
     3b8:	24 e0       	ldi	r18, 0x04	; 4
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL3) {
		y_value = 3;
     3be:	23 e0       	ldi	r18, 0x03	; 3
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL2) {
		y_value = 2;
     3c4:	22 e0       	ldi	r18, 0x02	; 2
     3c6:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		y_value = 0;
	}
	
	return y_value;
}
     3c8:	82 2f       	mov	r24, r18
     3ca:	93 2f       	mov	r25, r19
     3cc:	08 95       	ret

000003ce <setDirections>:
*			angle: const double - The angle of the joystick position in
*									the interval [-pi, pi]. 
* Output:	-
* Description: Sets the engine directions given the angle of the joystick.
*/
void setDirections(engine_data *edata, const double angle) {
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ec 01       	movw	r28, r24
     3dc:	6a 01       	movw	r12, r20
     3de:	7b 01       	movw	r14, r22
	
	if (angle <= 3*PI/4 && angle >= -PI/4) {
     3e0:	cb 01       	movw	r24, r22
     3e2:	ba 01       	movw	r22, r20
     3e4:	24 ee       	ldi	r18, 0xE4	; 228
     3e6:	3b ec       	ldi	r19, 0xCB	; 203
     3e8:	46 e1       	ldi	r20, 0x16	; 22
     3ea:	50 e4       	ldi	r21, 0x40	; 64
     3ec:	0e 94 70 06 	call	0xce0	; 0xce0 <__cmpsf2>
     3f0:	18 16       	cp	r1, r24
     3f2:	64 f0       	brlt	.+24     	; 0x40c <setDirections+0x3e>
     3f4:	c7 01       	movw	r24, r14
     3f6:	b6 01       	movw	r22, r12
     3f8:	2b ed       	ldi	r18, 0xDB	; 219
     3fa:	3f e0       	ldi	r19, 0x0F	; 15
     3fc:	49 e4       	ldi	r20, 0x49	; 73
     3fe:	5f eb       	ldi	r21, 0xBF	; 191
     400:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     404:	88 23       	and	r24, r24
     406:	14 f0       	brlt	.+4      	; 0x40c <setDirections+0x3e>
		edata->left_engine_dir = FORWARD;
     408:	18 82       	st	Y, r1
     40a:	02 c0       	rjmp	.+4      	; 0x410 <setDirections+0x42>
	} else {
		edata->left_engine_dir = BACKWARD;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	88 83       	st	Y, r24
	}
	
	if (angle <= PI/4 && angle >= -3*PI/4) {
     410:	c7 01       	movw	r24, r14
     412:	b6 01       	movw	r22, r12
     414:	2b ed       	ldi	r18, 0xDB	; 219
     416:	3f e0       	ldi	r19, 0x0F	; 15
     418:	49 e4       	ldi	r20, 0x49	; 73
     41a:	5f e3       	ldi	r21, 0x3F	; 63
     41c:	0e 94 70 06 	call	0xce0	; 0xce0 <__cmpsf2>
     420:	18 16       	cp	r1, r24
     422:	6c f0       	brlt	.+26     	; 0x43e <setDirections+0x70>
     424:	c7 01       	movw	r24, r14
     426:	b6 01       	movw	r22, r12
     428:	24 ee       	ldi	r18, 0xE4	; 228
     42a:	3b ec       	ldi	r19, 0xCB	; 203
     42c:	46 e1       	ldi	r20, 0x16	; 22
     42e:	50 ec       	ldi	r21, 0xC0	; 192
     430:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     434:	88 23       	and	r24, r24
     436:	1c f0       	brlt	.+6      	; 0x43e <setDirections+0x70>
		edata->right_engine_dir = BACKWARD;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	01 c0       	rjmp	.+2      	; 0x440 <setDirections+0x72>
	} else {
		edata->right_engine_dir = FORWARD;
     43e:	19 82       	std	Y+1, r1	; 0x01
	}
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	08 95       	ret

0000044e <setThrottles>:
*			x_value: const int - The current x position of the joystick.
*			y_value: const int - The current y position of the joystick.
* Output:	-
* Description: Sets the engine throttles. 
*/
void setThrottles(engine_data *edata, const double angle, const int x_value, const int y_value) {
     44e:	6f 92       	push	r6
     450:	7f 92       	push	r7
     452:	8f 92       	push	r8
     454:	9f 92       	push	r9
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	3c 01       	movw	r6, r24
     46c:	6a 01       	movw	r12, r20
     46e:	7b 01       	movw	r14, r22
     470:	c2 2f       	mov	r28, r18
     472:	d3 2f       	mov	r29, r19
	* 
	* The head engines are:
	* Left engine		for [0, PI/2) and [-PI, -PI/2)  
	* Right engine		for [PI/2, PI) and [-PI/2, 0). 
	*/
	if (angle >= 0 && angle < PI/4) {
     474:	cb 01       	movw	r24, r22
     476:	ba 01       	movw	r22, r20
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	a9 01       	movw	r20, r18
     47e:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     482:	88 23       	and	r24, r24
     484:	d4 f1       	brlt	.+116    	; 0x4fa <setThrottles+0xac>
     486:	c7 01       	movw	r24, r14
     488:	b6 01       	movw	r22, r12
     48a:	2b ed       	ldi	r18, 0xDB	; 219
     48c:	3f e0       	ldi	r19, 0x0F	; 15
     48e:	49 e4       	ldi	r20, 0x49	; 73
     490:	5f e3       	ldi	r21, 0x3F	; 63
     492:	0e 94 70 06 	call	0xce0	; 0xce0 <__cmpsf2>
     496:	88 23       	and	r24, r24
     498:	84 f5       	brge	.+96     	; 0x4fa <setThrottles+0xac>
		factor = 1 - angle/(PI/4);
		edata->left_engine_throttle = (double)(abs(x_value));
     49a:	6c 2f       	mov	r22, r28
     49c:	7d 2f       	mov	r23, r29
     49e:	77 23       	and	r23, r23
     4a0:	1c f4       	brge	.+6      	; 0x4a8 <setThrottles+0x5a>
     4a2:	70 95       	com	r23
     4a4:	61 95       	neg	r22
     4a6:	7f 4f       	sbci	r23, 0xFF	; 255
     4a8:	88 27       	eor	r24, r24
     4aa:	77 fd       	sbrc	r23, 7
     4ac:	80 95       	com	r24
     4ae:	98 2f       	mov	r25, r24
     4b0:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatsisf>
     4b4:	4b 01       	movw	r8, r22
     4b6:	5c 01       	movw	r10, r24
     4b8:	f3 01       	movw	r30, r6
     4ba:	62 83       	std	Z+2, r22	; 0x02
     4bc:	73 83       	std	Z+3, r23	; 0x03
     4be:	84 83       	std	Z+4, r24	; 0x04
     4c0:	95 83       	std	Z+5, r25	; 0x05
	* The head engines are:
	* Left engine		for [0, PI/2) and [-PI, -PI/2)  
	* Right engine		for [PI/2, PI) and [-PI/2, 0). 
	*/
	if (angle >= 0 && angle < PI/4) {
		factor = 1 - angle/(PI/4);
     4c2:	c7 01       	movw	r24, r14
     4c4:	b6 01       	movw	r22, r12
     4c6:	2b ed       	ldi	r18, 0xDB	; 219
     4c8:	3f e0       	ldi	r19, 0x0F	; 15
     4ca:	49 e4       	ldi	r20, 0x49	; 73
     4cc:	5f e3       	ldi	r21, 0x3F	; 63
     4ce:	0e 94 74 06 	call	0xce8	; 0xce8 <__divsf3>
     4d2:	9b 01       	movw	r18, r22
     4d4:	ac 01       	movw	r20, r24
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	80 e8       	ldi	r24, 0x80	; 128
     4dc:	9f e3       	ldi	r25, 0x3F	; 63
     4de:	0e 94 a9 05 	call	0xb52	; 0xb52 <__subsf3>
		edata->left_engine_throttle = (double)(abs(x_value));
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
     4e2:	a5 01       	movw	r20, r10
     4e4:	94 01       	movw	r18, r8
     4e6:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3>
     4ea:	dc 01       	movw	r26, r24
     4ec:	cb 01       	movw	r24, r22
     4ee:	f3 01       	movw	r30, r6
     4f0:	86 83       	std	Z+6, r24	; 0x06
     4f2:	97 83       	std	Z+7, r25	; 0x07
     4f4:	a0 87       	std	Z+8, r26	; 0x08
     4f6:	b1 87       	std	Z+9, r27	; 0x09
     4f8:	cd c1       	rjmp	.+922    	; 0x894 <setThrottles+0x446>
		
	} else if (angle >= PI/4 && angle < PI/2) {
     4fa:	c7 01       	movw	r24, r14
     4fc:	b6 01       	movw	r22, r12
     4fe:	2b ed       	ldi	r18, 0xDB	; 219
     500:	3f e0       	ldi	r19, 0x0F	; 15
     502:	49 e4       	ldi	r20, 0x49	; 73
     504:	5f e3       	ldi	r21, 0x3F	; 63
     506:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     50a:	88 23       	and	r24, r24
     50c:	c4 f1       	brlt	.+112    	; 0x57e <setThrottles+0x130>
     50e:	c7 01       	movw	r24, r14
     510:	b6 01       	movw	r22, r12
     512:	2b ed       	ldi	r18, 0xDB	; 219
     514:	3f e0       	ldi	r19, 0x0F	; 15
     516:	49 ec       	ldi	r20, 0xC9	; 201
     518:	5f e3       	ldi	r21, 0x3F	; 63
     51a:	0e 94 70 06 	call	0xce0	; 0xce0 <__cmpsf2>
     51e:	88 23       	and	r24, r24
     520:	74 f5       	brge	.+92     	; 0x57e <setThrottles+0x130>
		factor = (angle - PI/4)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
     522:	60 2f       	mov	r22, r16
     524:	71 2f       	mov	r23, r17
     526:	77 23       	and	r23, r23
     528:	1c f4       	brge	.+6      	; 0x530 <setThrottles+0xe2>
     52a:	70 95       	com	r23
     52c:	61 95       	neg	r22
     52e:	7f 4f       	sbci	r23, 0xFF	; 255
     530:	88 27       	eor	r24, r24
     532:	77 fd       	sbrc	r23, 7
     534:	80 95       	com	r24
     536:	98 2f       	mov	r25, r24
     538:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatsisf>
     53c:	4b 01       	movw	r8, r22
     53e:	5c 01       	movw	r10, r24
     540:	f3 01       	movw	r30, r6
     542:	62 83       	std	Z+2, r22	; 0x02
     544:	73 83       	std	Z+3, r23	; 0x03
     546:	84 83       	std	Z+4, r24	; 0x04
     548:	95 83       	std	Z+5, r25	; 0x05
		factor = 1 - angle/(PI/4);
		edata->left_engine_throttle = (double)(abs(x_value));
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
		
	} else if (angle >= PI/4 && angle < PI/2) {
		factor = (angle - PI/4)/(PI/4);
     54a:	c7 01       	movw	r24, r14
     54c:	b6 01       	movw	r22, r12
     54e:	2b ed       	ldi	r18, 0xDB	; 219
     550:	3f e0       	ldi	r19, 0x0F	; 15
     552:	49 e4       	ldi	r20, 0x49	; 73
     554:	5f e3       	ldi	r21, 0x3F	; 63
     556:	0e 94 a9 05 	call	0xb52	; 0xb52 <__subsf3>
     55a:	2b ed       	ldi	r18, 0xDB	; 219
     55c:	3f e0       	ldi	r19, 0x0F	; 15
     55e:	49 e4       	ldi	r20, 0x49	; 73
     560:	5f e3       	ldi	r21, 0x3F	; 63
     562:	0e 94 74 06 	call	0xce8	; 0xce8 <__divsf3>
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
     566:	a5 01       	movw	r20, r10
     568:	94 01       	movw	r18, r8
     56a:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3>
     56e:	dc 01       	movw	r26, r24
     570:	cb 01       	movw	r24, r22
     572:	f3 01       	movw	r30, r6
     574:	86 83       	std	Z+6, r24	; 0x06
     576:	97 83       	std	Z+7, r25	; 0x07
     578:	a0 87       	std	Z+8, r26	; 0x08
     57a:	b1 87       	std	Z+9, r27	; 0x09
     57c:	8b c1       	rjmp	.+790    	; 0x894 <setThrottles+0x446>
		
	} else if (angle >= PI/2 && angle < 3*PI/4) {
     57e:	c7 01       	movw	r24, r14
     580:	b6 01       	movw	r22, r12
     582:	2b ed       	ldi	r18, 0xDB	; 219
     584:	3f e0       	ldi	r19, 0x0F	; 15
     586:	49 ec       	ldi	r20, 0xC9	; 201
     588:	5f e3       	ldi	r21, 0x3F	; 63
     58a:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     58e:	88 23       	and	r24, r24
     590:	0c f4       	brge	.+2      	; 0x594 <setThrottles+0x146>
     592:	40 c0       	rjmp	.+128    	; 0x614 <setThrottles+0x1c6>
     594:	c7 01       	movw	r24, r14
     596:	b6 01       	movw	r22, r12
     598:	24 ee       	ldi	r18, 0xE4	; 228
     59a:	3b ec       	ldi	r19, 0xCB	; 203
     59c:	46 e1       	ldi	r20, 0x16	; 22
     59e:	50 e4       	ldi	r21, 0x40	; 64
     5a0:	0e 94 70 06 	call	0xce0	; 0xce0 <__cmpsf2>
     5a4:	88 23       	and	r24, r24
     5a6:	b4 f5       	brge	.+108    	; 0x614 <setThrottles+0x1c6>
		factor = 1 - (angle - PI/2)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
     5a8:	60 2f       	mov	r22, r16
     5aa:	71 2f       	mov	r23, r17
     5ac:	77 23       	and	r23, r23
     5ae:	1c f4       	brge	.+6      	; 0x5b6 <setThrottles+0x168>
     5b0:	70 95       	com	r23
     5b2:	61 95       	neg	r22
     5b4:	7f 4f       	sbci	r23, 0xFF	; 255
     5b6:	88 27       	eor	r24, r24
     5b8:	77 fd       	sbrc	r23, 7
     5ba:	80 95       	com	r24
     5bc:	98 2f       	mov	r25, r24
     5be:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatsisf>
     5c2:	4b 01       	movw	r8, r22
     5c4:	5c 01       	movw	r10, r24
     5c6:	f3 01       	movw	r30, r6
     5c8:	66 83       	std	Z+6, r22	; 0x06
     5ca:	77 83       	std	Z+7, r23	; 0x07
     5cc:	80 87       	std	Z+8, r24	; 0x08
     5ce:	91 87       	std	Z+9, r25	; 0x09
		factor = (angle - PI/4)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
		
	} else if (angle >= PI/2 && angle < 3*PI/4) {
		factor = 1 - (angle - PI/2)/(PI/4);
     5d0:	c7 01       	movw	r24, r14
     5d2:	b6 01       	movw	r22, r12
     5d4:	2b ed       	ldi	r18, 0xDB	; 219
     5d6:	3f e0       	ldi	r19, 0x0F	; 15
     5d8:	49 ec       	ldi	r20, 0xC9	; 201
     5da:	5f e3       	ldi	r21, 0x3F	; 63
     5dc:	0e 94 a9 05 	call	0xb52	; 0xb52 <__subsf3>
     5e0:	2b ed       	ldi	r18, 0xDB	; 219
     5e2:	3f e0       	ldi	r19, 0x0F	; 15
     5e4:	49 e4       	ldi	r20, 0x49	; 73
     5e6:	5f e3       	ldi	r21, 0x3F	; 63
     5e8:	0e 94 74 06 	call	0xce8	; 0xce8 <__divsf3>
     5ec:	9b 01       	movw	r18, r22
     5ee:	ac 01       	movw	r20, r24
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	80 e8       	ldi	r24, 0x80	; 128
     5f6:	9f e3       	ldi	r25, 0x3F	; 63
     5f8:	0e 94 a9 05 	call	0xb52	; 0xb52 <__subsf3>
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
     5fc:	a5 01       	movw	r20, r10
     5fe:	94 01       	movw	r18, r8
     600:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3>
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
     608:	f3 01       	movw	r30, r6
     60a:	82 83       	std	Z+2, r24	; 0x02
     60c:	93 83       	std	Z+3, r25	; 0x03
     60e:	a4 83       	std	Z+4, r26	; 0x04
     610:	b5 83       	std	Z+5, r27	; 0x05
     612:	40 c1       	rjmp	.+640    	; 0x894 <setThrottles+0x446>
		
	} else if (angle >= 3*PI/4 && angle <= PI) {
     614:	c7 01       	movw	r24, r14
     616:	b6 01       	movw	r22, r12
     618:	24 ee       	ldi	r18, 0xE4	; 228
     61a:	3b ec       	ldi	r19, 0xCB	; 203
     61c:	46 e1       	ldi	r20, 0x16	; 22
     61e:	50 e4       	ldi	r21, 0x40	; 64
     620:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     624:	88 23       	and	r24, r24
     626:	c4 f1       	brlt	.+112    	; 0x698 <setThrottles+0x24a>
     628:	c7 01       	movw	r24, r14
     62a:	b6 01       	movw	r22, r12
     62c:	2b ed       	ldi	r18, 0xDB	; 219
     62e:	3f e0       	ldi	r19, 0x0F	; 15
     630:	49 e4       	ldi	r20, 0x49	; 73
     632:	50 e4       	ldi	r21, 0x40	; 64
     634:	0e 94 70 06 	call	0xce0	; 0xce0 <__cmpsf2>
     638:	18 16       	cp	r1, r24
     63a:	74 f1       	brlt	.+92     	; 0x698 <setThrottles+0x24a>
		factor = (angle - 3*PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
     63c:	6c 2f       	mov	r22, r28
     63e:	7d 2f       	mov	r23, r29
     640:	77 23       	and	r23, r23
     642:	1c f4       	brge	.+6      	; 0x64a <setThrottles+0x1fc>
     644:	70 95       	com	r23
     646:	61 95       	neg	r22
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	88 27       	eor	r24, r24
     64c:	77 fd       	sbrc	r23, 7
     64e:	80 95       	com	r24
     650:	98 2f       	mov	r25, r24
     652:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatsisf>
     656:	4b 01       	movw	r8, r22
     658:	5c 01       	movw	r10, r24
     65a:	f3 01       	movw	r30, r6
     65c:	66 83       	std	Z+6, r22	; 0x06
     65e:	77 83       	std	Z+7, r23	; 0x07
     660:	80 87       	std	Z+8, r24	; 0x08
     662:	91 87       	std	Z+9, r25	; 0x09
		factor = 1 - (angle - PI/2)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle >= 3*PI/4 && angle <= PI) {
		factor = (angle - 3*PI/4)/(PI/4);
     664:	c7 01       	movw	r24, r14
     666:	b6 01       	movw	r22, r12
     668:	24 ee       	ldi	r18, 0xE4	; 228
     66a:	3b ec       	ldi	r19, 0xCB	; 203
     66c:	46 e1       	ldi	r20, 0x16	; 22
     66e:	50 e4       	ldi	r21, 0x40	; 64
     670:	0e 94 a9 05 	call	0xb52	; 0xb52 <__subsf3>
     674:	2b ed       	ldi	r18, 0xDB	; 219
     676:	3f e0       	ldi	r19, 0x0F	; 15
     678:	49 e4       	ldi	r20, 0x49	; 73
     67a:	5f e3       	ldi	r21, 0x3F	; 63
     67c:	0e 94 74 06 	call	0xce8	; 0xce8 <__divsf3>
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
     680:	a5 01       	movw	r20, r10
     682:	94 01       	movw	r18, r8
     684:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	f3 01       	movw	r30, r6
     68e:	82 83       	std	Z+2, r24	; 0x02
     690:	93 83       	std	Z+3, r25	; 0x03
     692:	a4 83       	std	Z+4, r26	; 0x04
     694:	b5 83       	std	Z+5, r27	; 0x05
     696:	fe c0       	rjmp	.+508    	; 0x894 <setThrottles+0x446>
		
	} else if (angle < 0 && angle > -PI/4) {
     698:	c7 01       	movw	r24, r14
     69a:	b6 01       	movw	r22, r12
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	a9 01       	movw	r20, r18
     6a2:	0e 94 70 06 	call	0xce0	; 0xce0 <__cmpsf2>
     6a6:	88 23       	and	r24, r24
     6a8:	c4 f5       	brge	.+112    	; 0x71a <setThrottles+0x2cc>
     6aa:	c7 01       	movw	r24, r14
     6ac:	b6 01       	movw	r22, r12
     6ae:	2b ed       	ldi	r18, 0xDB	; 219
     6b0:	3f e0       	ldi	r19, 0x0F	; 15
     6b2:	49 e4       	ldi	r20, 0x49	; 73
     6b4:	5f eb       	ldi	r21, 0xBF	; 191
     6b6:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     6ba:	18 16       	cp	r1, r24
     6bc:	74 f5       	brge	.+92     	; 0x71a <setThrottles+0x2cc>
		factor = 1 - angle*(-1)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
     6be:	6c 2f       	mov	r22, r28
     6c0:	7d 2f       	mov	r23, r29
     6c2:	77 23       	and	r23, r23
     6c4:	1c f4       	brge	.+6      	; 0x6cc <setThrottles+0x27e>
     6c6:	70 95       	com	r23
     6c8:	61 95       	neg	r22
     6ca:	7f 4f       	sbci	r23, 0xFF	; 255
     6cc:	88 27       	eor	r24, r24
     6ce:	77 fd       	sbrc	r23, 7
     6d0:	80 95       	com	r24
     6d2:	98 2f       	mov	r25, r24
     6d4:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatsisf>
     6d8:	4b 01       	movw	r8, r22
     6da:	5c 01       	movw	r10, r24
     6dc:	f3 01       	movw	r30, r6
     6de:	66 83       	std	Z+6, r22	; 0x06
     6e0:	77 83       	std	Z+7, r23	; 0x07
     6e2:	80 87       	std	Z+8, r24	; 0x08
     6e4:	91 87       	std	Z+9, r25	; 0x09
		factor = (angle - 3*PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle < 0 && angle > -PI/4) {
		factor = 1 - angle*(-1)/(PI/4);
     6e6:	c7 01       	movw	r24, r14
     6e8:	b6 01       	movw	r22, r12
     6ea:	2b ed       	ldi	r18, 0xDB	; 219
     6ec:	3f e0       	ldi	r19, 0x0F	; 15
     6ee:	49 e4       	ldi	r20, 0x49	; 73
     6f0:	5f e3       	ldi	r21, 0x3F	; 63
     6f2:	0e 94 74 06 	call	0xce8	; 0xce8 <__divsf3>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e8       	ldi	r20, 0x80	; 128
     6fc:	5f e3       	ldi	r21, 0x3F	; 63
     6fe:	0e 94 aa 05 	call	0xb54	; 0xb54 <__addsf3>
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
     702:	a5 01       	movw	r20, r10
     704:	94 01       	movw	r18, r8
     706:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	f3 01       	movw	r30, r6
     710:	82 83       	std	Z+2, r24	; 0x02
     712:	93 83       	std	Z+3, r25	; 0x03
     714:	a4 83       	std	Z+4, r26	; 0x04
     716:	b5 83       	std	Z+5, r27	; 0x05
     718:	bd c0       	rjmp	.+378    	; 0x894 <setThrottles+0x446>
		
	} else if (angle <= -PI/4 && angle > -PI/2) {
     71a:	c7 01       	movw	r24, r14
     71c:	b6 01       	movw	r22, r12
     71e:	2b ed       	ldi	r18, 0xDB	; 219
     720:	3f e0       	ldi	r19, 0x0F	; 15
     722:	49 e4       	ldi	r20, 0x49	; 73
     724:	5f eb       	ldi	r21, 0xBF	; 191
     726:	0e 94 70 06 	call	0xce0	; 0xce0 <__cmpsf2>
     72a:	18 16       	cp	r1, r24
     72c:	cc f1       	brlt	.+114    	; 0x7a0 <setThrottles+0x352>
     72e:	c7 01       	movw	r24, r14
     730:	b6 01       	movw	r22, r12
     732:	2b ed       	ldi	r18, 0xDB	; 219
     734:	3f e0       	ldi	r19, 0x0F	; 15
     736:	49 ec       	ldi	r20, 0xC9	; 201
     738:	5f eb       	ldi	r21, 0xBF	; 191
     73a:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     73e:	18 16       	cp	r1, r24
     740:	7c f5       	brge	.+94     	; 0x7a0 <setThrottles+0x352>
		factor = (angle*(-1) - PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
     742:	60 2f       	mov	r22, r16
     744:	71 2f       	mov	r23, r17
     746:	77 23       	and	r23, r23
     748:	1c f4       	brge	.+6      	; 0x750 <setThrottles+0x302>
     74a:	70 95       	com	r23
     74c:	61 95       	neg	r22
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	88 27       	eor	r24, r24
     752:	77 fd       	sbrc	r23, 7
     754:	80 95       	com	r24
     756:	98 2f       	mov	r25, r24
     758:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatsisf>
     75c:	4b 01       	movw	r8, r22
     75e:	5c 01       	movw	r10, r24
     760:	f3 01       	movw	r30, r6
     762:	66 83       	std	Z+6, r22	; 0x06
     764:	77 83       	std	Z+7, r23	; 0x07
     766:	80 87       	std	Z+8, r24	; 0x08
     768:	91 87       	std	Z+9, r25	; 0x09
		factor = 1 - angle*(-1)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle <= -PI/4 && angle > -PI/2) {
		factor = (angle*(-1) - PI/4)/(PI/4);
     76a:	c7 01       	movw	r24, r14
     76c:	b6 01       	movw	r22, r12
     76e:	90 58       	subi	r25, 0x80	; 128
     770:	2b ed       	ldi	r18, 0xDB	; 219
     772:	3f e0       	ldi	r19, 0x0F	; 15
     774:	49 e4       	ldi	r20, 0x49	; 73
     776:	5f e3       	ldi	r21, 0x3F	; 63
     778:	0e 94 a9 05 	call	0xb52	; 0xb52 <__subsf3>
     77c:	2b ed       	ldi	r18, 0xDB	; 219
     77e:	3f e0       	ldi	r19, 0x0F	; 15
     780:	49 e4       	ldi	r20, 0x49	; 73
     782:	5f e3       	ldi	r21, 0x3F	; 63
     784:	0e 94 74 06 	call	0xce8	; 0xce8 <__divsf3>
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
     788:	a5 01       	movw	r20, r10
     78a:	94 01       	movw	r18, r8
     78c:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3>
     790:	dc 01       	movw	r26, r24
     792:	cb 01       	movw	r24, r22
     794:	f3 01       	movw	r30, r6
     796:	82 83       	std	Z+2, r24	; 0x02
     798:	93 83       	std	Z+3, r25	; 0x03
     79a:	a4 83       	std	Z+4, r26	; 0x04
     79c:	b5 83       	std	Z+5, r27	; 0x05
     79e:	7a c0       	rjmp	.+244    	; 0x894 <setThrottles+0x446>
		
	} else if (angle <= -PI/2 && angle > -3*PI/4) {
     7a0:	c7 01       	movw	r24, r14
     7a2:	b6 01       	movw	r22, r12
     7a4:	2b ed       	ldi	r18, 0xDB	; 219
     7a6:	3f e0       	ldi	r19, 0x0F	; 15
     7a8:	49 ec       	ldi	r20, 0xC9	; 201
     7aa:	5f eb       	ldi	r21, 0xBF	; 191
     7ac:	0e 94 70 06 	call	0xce0	; 0xce0 <__cmpsf2>
     7b0:	18 16       	cp	r1, r24
     7b2:	0c f4       	brge	.+2      	; 0x7b6 <setThrottles+0x368>
     7b4:	41 c0       	rjmp	.+130    	; 0x838 <setThrottles+0x3ea>
     7b6:	c7 01       	movw	r24, r14
     7b8:	b6 01       	movw	r22, r12
     7ba:	24 ee       	ldi	r18, 0xE4	; 228
     7bc:	3b ec       	ldi	r19, 0xCB	; 203
     7be:	46 e1       	ldi	r20, 0x16	; 22
     7c0:	50 ec       	ldi	r21, 0xC0	; 192
     7c2:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     7c6:	18 16       	cp	r1, r24
     7c8:	bc f5       	brge	.+110    	; 0x838 <setThrottles+0x3ea>
		factor = 1 - (angle*(-1) - PI/2)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
     7ca:	60 2f       	mov	r22, r16
     7cc:	71 2f       	mov	r23, r17
     7ce:	77 23       	and	r23, r23
     7d0:	1c f4       	brge	.+6      	; 0x7d8 <setThrottles+0x38a>
     7d2:	70 95       	com	r23
     7d4:	61 95       	neg	r22
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	88 27       	eor	r24, r24
     7da:	77 fd       	sbrc	r23, 7
     7dc:	80 95       	com	r24
     7de:	98 2f       	mov	r25, r24
     7e0:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatsisf>
     7e4:	4b 01       	movw	r8, r22
     7e6:	5c 01       	movw	r10, r24
     7e8:	f3 01       	movw	r30, r6
     7ea:	62 83       	std	Z+2, r22	; 0x02
     7ec:	73 83       	std	Z+3, r23	; 0x03
     7ee:	84 83       	std	Z+4, r24	; 0x04
     7f0:	95 83       	std	Z+5, r25	; 0x05
		factor = (angle*(-1) - PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle <= -PI/2 && angle > -3*PI/4) {
		factor = 1 - (angle*(-1) - PI/2)/(PI/4);
     7f2:	c7 01       	movw	r24, r14
     7f4:	b6 01       	movw	r22, r12
     7f6:	90 58       	subi	r25, 0x80	; 128
     7f8:	2b ed       	ldi	r18, 0xDB	; 219
     7fa:	3f e0       	ldi	r19, 0x0F	; 15
     7fc:	49 ec       	ldi	r20, 0xC9	; 201
     7fe:	5f e3       	ldi	r21, 0x3F	; 63
     800:	0e 94 a9 05 	call	0xb52	; 0xb52 <__subsf3>
     804:	2b ed       	ldi	r18, 0xDB	; 219
     806:	3f e0       	ldi	r19, 0x0F	; 15
     808:	49 e4       	ldi	r20, 0x49	; 73
     80a:	5f e3       	ldi	r21, 0x3F	; 63
     80c:	0e 94 74 06 	call	0xce8	; 0xce8 <__divsf3>
     810:	9b 01       	movw	r18, r22
     812:	ac 01       	movw	r20, r24
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	80 e8       	ldi	r24, 0x80	; 128
     81a:	9f e3       	ldi	r25, 0x3F	; 63
     81c:	0e 94 a9 05 	call	0xb52	; 0xb52 <__subsf3>
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
     820:	a5 01       	movw	r20, r10
     822:	94 01       	movw	r18, r8
     824:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3>
     828:	dc 01       	movw	r26, r24
     82a:	cb 01       	movw	r24, r22
     82c:	f3 01       	movw	r30, r6
     82e:	86 83       	std	Z+6, r24	; 0x06
     830:	97 83       	std	Z+7, r25	; 0x07
     832:	a0 87       	std	Z+8, r26	; 0x08
     834:	b1 87       	std	Z+9, r27	; 0x09
     836:	2e c0       	rjmp	.+92     	; 0x894 <setThrottles+0x446>
		
	} else {
		factor = (angle*(-1) - 3*PI/4)/(PI/4);
		edata->left_engine_throttle = (double)abs(x_value);
     838:	6c 2f       	mov	r22, r28
     83a:	7d 2f       	mov	r23, r29
     83c:	77 23       	and	r23, r23
     83e:	1c f4       	brge	.+6      	; 0x846 <setThrottles+0x3f8>
     840:	70 95       	com	r23
     842:	61 95       	neg	r22
     844:	7f 4f       	sbci	r23, 0xFF	; 255
     846:	88 27       	eor	r24, r24
     848:	77 fd       	sbrc	r23, 7
     84a:	80 95       	com	r24
     84c:	98 2f       	mov	r25, r24
     84e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatsisf>
     852:	4b 01       	movw	r8, r22
     854:	5c 01       	movw	r10, r24
     856:	f3 01       	movw	r30, r6
     858:	62 83       	std	Z+2, r22	; 0x02
     85a:	73 83       	std	Z+3, r23	; 0x03
     85c:	84 83       	std	Z+4, r24	; 0x04
     85e:	95 83       	std	Z+5, r25	; 0x05
		factor = 1 - (angle*(-1) - PI/2)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
		
	} else {
		factor = (angle*(-1) - 3*PI/4)/(PI/4);
     860:	c7 01       	movw	r24, r14
     862:	b6 01       	movw	r22, r12
     864:	90 58       	subi	r25, 0x80	; 128
     866:	24 ee       	ldi	r18, 0xE4	; 228
     868:	3b ec       	ldi	r19, 0xCB	; 203
     86a:	46 e1       	ldi	r20, 0x16	; 22
     86c:	50 e4       	ldi	r21, 0x40	; 64
     86e:	0e 94 a9 05 	call	0xb52	; 0xb52 <__subsf3>
     872:	2b ed       	ldi	r18, 0xDB	; 219
     874:	3f e0       	ldi	r19, 0x0F	; 15
     876:	49 e4       	ldi	r20, 0x49	; 73
     878:	5f e3       	ldi	r21, 0x3F	; 63
     87a:	0e 94 74 06 	call	0xce8	; 0xce8 <__divsf3>
		edata->left_engine_throttle = (double)abs(x_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
     87e:	a5 01       	movw	r20, r10
     880:	94 01       	movw	r18, r8
     882:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3>
     886:	dc 01       	movw	r26, r24
     888:	cb 01       	movw	r24, r22
     88a:	f3 01       	movw	r30, r6
     88c:	86 83       	std	Z+6, r24	; 0x06
     88e:	97 83       	std	Z+7, r25	; 0x07
     890:	a0 87       	std	Z+8, r26	; 0x08
     892:	b1 87       	std	Z+9, r27	; 0x09
	}
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	bf 90       	pop	r11
     8a6:	af 90       	pop	r10
     8a8:	9f 90       	pop	r9
     8aa:	8f 90       	pop	r8
     8ac:	7f 90       	pop	r7
     8ae:	6f 90       	pop	r6
     8b0:	08 95       	ret

000008b2 <compactData>:
* Input:	edata: engine_data - The engine data.
* Output:	unsigned char - The compressed data to be sent.
* Description:	Adds all engine info into one byte in the form
* [dir. left (1 bit)][throttle left (3 bit)][dir. right (1 bit)][throttle right (3 bit)].
*/
unsigned char compactData(engine_data *edata) {
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	8c 01       	movw	r16, r24
	
	unsigned char send_data;
	
	/* Place the left engine throttle data in send_data. */ 
	if (edata->left_engine_throttle >= 6.5) {
     8c2:	fc 01       	movw	r30, r24
     8c4:	c2 80       	ldd	r12, Z+2	; 0x02
     8c6:	d3 80       	ldd	r13, Z+3	; 0x03
     8c8:	e4 80       	ldd	r14, Z+4	; 0x04
     8ca:	f5 80       	ldd	r15, Z+5	; 0x05
     8cc:	c7 01       	movw	r24, r14
     8ce:	b6 01       	movw	r22, r12
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 ed       	ldi	r20, 0xD0	; 208
     8d6:	50 e4       	ldi	r21, 0x40	; 64
     8d8:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     8dc:	88 23       	and	r24, r24
     8de:	0c f0       	brlt	.+2      	; 0x8e2 <compactData+0x30>
     8e0:	3f c0       	rjmp	.+126    	; 0x960 <compactData+0xae>
		send_data = (unsigned char) 7;
	} else if (edata->left_engine_throttle >= 5.5) {
     8e2:	c7 01       	movw	r24, r14
     8e4:	b6 01       	movw	r22, r12
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 eb       	ldi	r20, 0xB0	; 176
     8ec:	50 e4       	ldi	r21, 0x40	; 64
     8ee:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     8f2:	88 23       	and	r24, r24
     8f4:	bc f5       	brge	.+110    	; 0x964 <compactData+0xb2>
		send_data = (unsigned char) 6;
	} else if (edata->left_engine_throttle >= 4.5) {
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 e9       	ldi	r20, 0x90	; 144
     900:	50 e4       	ldi	r21, 0x40	; 64
     902:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     906:	88 23       	and	r24, r24
     908:	7c f5       	brge	.+94     	; 0x968 <compactData+0xb6>
		send_data = (unsigned char) 5;
	} else if (edata->left_engine_throttle >= 3.5) {
     90a:	c7 01       	movw	r24, r14
     90c:	b6 01       	movw	r22, r12
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	40 e6       	ldi	r20, 0x60	; 96
     914:	50 e4       	ldi	r21, 0x40	; 64
     916:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     91a:	88 23       	and	r24, r24
     91c:	3c f5       	brge	.+78     	; 0x96c <compactData+0xba>
		send_data = (unsigned char) 4;
	} else if (edata->left_engine_throttle >= 2.5) {
     91e:	c7 01       	movw	r24, r14
     920:	b6 01       	movw	r22, r12
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e2       	ldi	r20, 0x20	; 32
     928:	50 e4       	ldi	r21, 0x40	; 64
     92a:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     92e:	88 23       	and	r24, r24
     930:	fc f4       	brge	.+62     	; 0x970 <compactData+0xbe>
		send_data = (unsigned char) 3;
	} else if (edata->left_engine_throttle >= 1.5) {
     932:	c7 01       	movw	r24, r14
     934:	b6 01       	movw	r22, r12
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 ec       	ldi	r20, 0xC0	; 192
     93c:	5f e3       	ldi	r21, 0x3F	; 63
     93e:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     942:	88 23       	and	r24, r24
     944:	bc f4       	brge	.+46     	; 0x974 <compactData+0xc2>
	
	unsigned char send_data;
	
	/* Place the left engine throttle data in send_data. */ 
	if (edata->left_engine_throttle >= 6.5) {
		send_data = (unsigned char) 7;
     946:	c1 e0       	ldi	r28, 0x01	; 1
     948:	c7 01       	movw	r24, r14
     94a:	b6 01       	movw	r22, r12
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	5f e3       	ldi	r21, 0x3F	; 63
     954:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     958:	88 23       	and	r24, r24
     95a:	6c f4       	brge	.+26     	; 0x976 <compactData+0xc4>
     95c:	c0 e0       	ldi	r28, 0x00	; 0
     95e:	0b c0       	rjmp	.+22     	; 0x976 <compactData+0xc4>
     960:	c7 e0       	ldi	r28, 0x07	; 7
     962:	09 c0       	rjmp	.+18     	; 0x976 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 5.5) {
		send_data = (unsigned char) 6;
     964:	c6 e0       	ldi	r28, 0x06	; 6
     966:	07 c0       	rjmp	.+14     	; 0x976 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 4.5) {
		send_data = (unsigned char) 5;
     968:	c5 e0       	ldi	r28, 0x05	; 5
     96a:	05 c0       	rjmp	.+10     	; 0x976 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 3.5) {
		send_data = (unsigned char) 4;
     96c:	c4 e0       	ldi	r28, 0x04	; 4
     96e:	03 c0       	rjmp	.+6      	; 0x976 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 2.5) {
		send_data = (unsigned char) 3;
     970:	c3 e0       	ldi	r28, 0x03	; 3
     972:	01 c0       	rjmp	.+2      	; 0x976 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 1.5) {
		send_data = (unsigned char) 2;
     974:	c2 e0       	ldi	r28, 0x02	; 2
		send_data = (unsigned char) 0;
	}
	
	/* Shift data four steps, which puts the left engine throttle 
	 * information in bit 6, 5 and 4. */
	send_data = send_data << 4;
     976:	c2 95       	swap	r28
     978:	c0 7f       	andi	r28, 0xF0	; 240

	/* Put the right engine throttle information in the three lowest bits. */
	if (edata->right_engine_throttle >= 6.5) {
     97a:	f8 01       	movw	r30, r16
     97c:	c6 80       	ldd	r12, Z+6	; 0x06
     97e:	d7 80       	ldd	r13, Z+7	; 0x07
     980:	e0 84       	ldd	r14, Z+8	; 0x08
     982:	f1 84       	ldd	r15, Z+9	; 0x09
     984:	c7 01       	movw	r24, r14
     986:	b6 01       	movw	r22, r12
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 ed       	ldi	r20, 0xD0	; 208
     98e:	50 e4       	ldi	r21, 0x40	; 64
     990:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     994:	88 23       	and	r24, r24
     996:	14 f0       	brlt	.+4      	; 0x99c <compactData+0xea>
		send_data = send_data | (unsigned char) 7;
     998:	c7 60       	ori	r28, 0x07	; 7
     99a:	47 c0       	rjmp	.+142    	; 0xa2a <compactData+0x178>
	} else if (edata->right_engine_throttle >= 5.5) {
     99c:	c7 01       	movw	r24, r14
     99e:	b6 01       	movw	r22, r12
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 eb       	ldi	r20, 0xB0	; 176
     9a6:	50 e4       	ldi	r21, 0x40	; 64
     9a8:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     9ac:	88 23       	and	r24, r24
     9ae:	14 f0       	brlt	.+4      	; 0x9b4 <compactData+0x102>
		send_data = send_data | (unsigned char) 6;
     9b0:	c6 60       	ori	r28, 0x06	; 6
     9b2:	3b c0       	rjmp	.+118    	; 0xa2a <compactData+0x178>
	} else if (edata->right_engine_throttle >= 4.5) {
     9b4:	c7 01       	movw	r24, r14
     9b6:	b6 01       	movw	r22, r12
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	40 e9       	ldi	r20, 0x90	; 144
     9be:	50 e4       	ldi	r21, 0x40	; 64
     9c0:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     9c4:	88 23       	and	r24, r24
     9c6:	14 f0       	brlt	.+4      	; 0x9cc <compactData+0x11a>
		send_data = send_data | (unsigned char) 5;
     9c8:	c5 60       	ori	r28, 0x05	; 5
     9ca:	2f c0       	rjmp	.+94     	; 0xa2a <compactData+0x178>
	} else if (edata->right_engine_throttle >= 3.5) {
     9cc:	c7 01       	movw	r24, r14
     9ce:	b6 01       	movw	r22, r12
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e6       	ldi	r20, 0x60	; 96
     9d6:	50 e4       	ldi	r21, 0x40	; 64
     9d8:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     9dc:	88 23       	and	r24, r24
     9de:	14 f0       	brlt	.+4      	; 0x9e4 <compactData+0x132>
		send_data = send_data | (unsigned char) 4;
     9e0:	c4 60       	ori	r28, 0x04	; 4
     9e2:	23 c0       	rjmp	.+70     	; 0xa2a <compactData+0x178>
	} else if (edata->right_engine_throttle >= 2.5) {
     9e4:	c7 01       	movw	r24, r14
     9e6:	b6 01       	movw	r22, r12
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e2       	ldi	r20, 0x20	; 32
     9ee:	50 e4       	ldi	r21, 0x40	; 64
     9f0:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     9f4:	88 23       	and	r24, r24
     9f6:	14 f0       	brlt	.+4      	; 0x9fc <compactData+0x14a>
		send_data = send_data | (unsigned char) 3;
     9f8:	c3 60       	ori	r28, 0x03	; 3
     9fa:	17 c0       	rjmp	.+46     	; 0xa2a <compactData+0x178>
	} else if (edata->right_engine_throttle >= 1.5) {
     9fc:	c7 01       	movw	r24, r14
     9fe:	b6 01       	movw	r22, r12
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 ec       	ldi	r20, 0xC0	; 192
     a06:	5f e3       	ldi	r21, 0x3F	; 63
     a08:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     a0c:	88 23       	and	r24, r24
     a0e:	14 f0       	brlt	.+4      	; 0xa14 <compactData+0x162>
		send_data = send_data | (unsigned char) 2;
     a10:	c2 60       	ori	r28, 0x02	; 2
     a12:	0b c0       	rjmp	.+22     	; 0xa2a <compactData+0x178>
	} else if (edata->right_engine_throttle >= 0.5) {
     a14:	c7 01       	movw	r24, r14
     a16:	b6 01       	movw	r22, r12
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	5f e3       	ldi	r21, 0x3F	; 63
     a20:	0e 94 b3 07 	call	0xf66	; 0xf66 <__gesf2>
     a24:	88 23       	and	r24, r24
     a26:	0c f0       	brlt	.+2      	; 0xa2a <compactData+0x178>
		send_data = send_data | (unsigned char) 1;
     a28:	c1 60       	ori	r28, 0x01	; 1
		send_data = send_data | (unsigned char) 0;
	}
	
	/* Set the direction information in bit 7 for the left engine
	 * and bit 3 for the right engine. */
	if (edata->left_engine_dir == FORWARD) {
     a2a:	f8 01       	movw	r30, r16
     a2c:	80 81       	ld	r24, Z
     a2e:	88 23       	and	r24, r24
     a30:	09 f4       	brne	.+2      	; 0xa34 <compactData+0x182>
		send_data = send_data | (1<<7);
     a32:	c0 68       	ori	r28, 0x80	; 128
	} else {
		send_data = send_data | (0<<7);
	}
	
	if (edata->right_engine_dir == FORWARD) {
     a34:	f8 01       	movw	r30, r16
     a36:	81 81       	ldd	r24, Z+1	; 0x01
     a38:	88 23       	and	r24, r24
     a3a:	09 f4       	brne	.+2      	; 0xa3e <compactData+0x18c>
		send_data = send_data | (1<<3);
     a3c:	c8 60       	ori	r28, 0x08	; 8
	} else {
		send_data = send_data | (0<<3);
	}
	
	return send_data;
}
     a3e:	8c 2f       	mov	r24, r28
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	08 95       	ret

00000a50 <sleepMode>:
* Description: Enters sleep mode.
*/
void sleepMode() {
	
	/* Clear global interrupt flag. */
	cli();
     a50:	f8 94       	cli
	
	/* Initialize low interrupt on INT0 in order for the MCU to be awoken. */
	initOnInterrupt();
     a52:	0e 94 7f 00 	call	0xfe	; 0xfe <initOnInterrupt>
	
	/* Turn off power to voltage regulator that powers bluetooth unit. */
	PORTD &= ~_BV(POWER_PORT);
     a56:	5f 98       	cbi	0x0b, 7	; 11
	
	/* Turn off leds that indicate power and steering. */
	PORTB &= ~_BV(POWER_CONTROL);
     a58:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~_BV(STEER_CONTROL);
     a5a:	29 98       	cbi	0x05, 1	; 5
	
	/* Set leds to input in order to save more power. */
	DDRB &= ~_BV(POWER_CONTROL);
     a5c:	20 98       	cbi	0x04, 0	; 4
	DDRB &= ~_BV(STEER_CONTROL);
     a5e:	21 98       	cbi	0x04, 1	; 4
	DDRD &= ~_BV(LED_PIN2);
	DDRD &= ~_BV(LED_PIN1);
*/

	/* Set sleep mode and enable sleep setup. */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a60:	83 b7       	in	r24, 0x33	; 51
     a62:	81 7f       	andi	r24, 0xF1	; 241
     a64:	84 60       	ori	r24, 0x04	; 4
     a66:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     a68:	83 b7       	in	r24, 0x33	; 51
     a6a:	81 60       	ori	r24, 0x01	; 1
     a6c:	83 bf       	out	0x33, r24	; 51
	
	/* Disable ADC, watchdog and BOD. */
	ADCSRA = 0;
     a6e:	10 92 7a 00 	sts	0x007A, r1
	wdt_disable();
     a72:	88 e1       	ldi	r24, 0x18	; 24
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	80 93 60 00 	sts	0x0060, r24
     a7c:	10 92 60 00 	sts	0x0060, r1
     a80:	0f be       	out	0x3f, r0	; 63
	sleep_bod_disable();
     a82:	85 b7       	in	r24, 0x35	; 53
     a84:	80 66       	ori	r24, 0x60	; 96
     a86:	85 bf       	out	0x35, r24	; 53
     a88:	8f 7d       	andi	r24, 0xDF	; 223
     a8a:	85 bf       	out	0x35, r24	; 53
	
	/* Set global interrupt flag to allow waking signals from
	 * the external interrupt and power down MCU. */
	sei();
     a8c:	78 94       	sei
	sleep_cpu();
     a8e:	88 95       	sleep
	
	/* Wake up here and disable sleep setup mode. */
	sleep_disable();
     a90:	83 b7       	in	r24, 0x33	; 51
     a92:	8e 7f       	andi	r24, 0xFE	; 254
     a94:	83 bf       	out	0x33, r24	; 51
	
	/* Re-initialize. */
	init();
     a96:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <init>
     a9a:	08 95       	ret

00000a9c <main>:

/* Global joystick coordinate variables. */
int x_value;
int y_value;

int main(void) {
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	2a 97       	sbiw	r28, 0x0a	; 10
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
    /* Engine data container. */
	engine_data *edata, ed;
	edata = &ed;
	
	/* Initialize setup. */
	init();
     ab0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <init>

	/* Main loop. */
	while (1) {
		
		if (steer == MAN) {
     ab4:	80 91 01 01 	lds	r24, 0x0101
     ab8:	88 23       	and	r24, r24
     aba:	09 f0       	breq	.+2      	; 0xabe <main+0x22>
     abc:	42 c0       	rjmp	.+132    	; 0xb42 <main+0xa6>
			
			/* Get coordinates. */
			x_value = getXValue();
     abe:	0e 94 1c 01 	call	0x238	; 0x238 <getXValue>
     ac2:	90 93 03 01 	sts	0x0103, r25
     ac6:	80 93 02 01 	sts	0x0102, r24
			y_value = getYValue();
     aca:	0e 94 81 01 	call	0x302	; 0x302 <getYValue>
     ace:	90 93 05 01 	sts	0x0105, r25
     ad2:	80 93 04 01 	sts	0x0104, r24
		
			/* Calculate angle of the position in a coordinate system. */
			double angle = atan2((double)y_value, (double)x_value);
     ad6:	9c 01       	movw	r18, r24
     ad8:	b9 01       	movw	r22, r18
     ada:	88 27       	eor	r24, r24
     adc:	77 fd       	sbrc	r23, 7
     ade:	80 95       	com	r24
     ae0:	98 2f       	mov	r25, r24
     ae2:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatsisf>
     ae6:	6b 01       	movw	r12, r22
     ae8:	7c 01       	movw	r14, r24
     aea:	60 91 02 01 	lds	r22, 0x0102
     aee:	70 91 03 01 	lds	r23, 0x0103
     af2:	88 27       	eor	r24, r24
     af4:	77 fd       	sbrc	r23, 7
     af6:	80 95       	com	r24
     af8:	98 2f       	mov	r25, r24
     afa:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatsisf>
     afe:	9b 01       	movw	r18, r22
     b00:	ac 01       	movw	r20, r24
     b02:	c7 01       	movw	r24, r14
     b04:	b6 01       	movw	r22, r12
     b06:	0e 94 1d 06 	call	0xc3a	; 0xc3a <atan2>
     b0a:	6b 01       	movw	r12, r22
     b0c:	7c 01       	movw	r14, r24
		
			/* Set all info in edata. */
			setDirections(edata, angle);
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	b7 01       	movw	r22, r14
     b14:	a6 01       	movw	r20, r12
     b16:	0e 94 e7 01 	call	0x3ce	; 0x3ce <setDirections>
			setThrottles(edata, angle, x_value, y_value);
     b1a:	20 91 02 01 	lds	r18, 0x0102
     b1e:	30 91 03 01 	lds	r19, 0x0103
     b22:	00 91 04 01 	lds	r16, 0x0104
     b26:	10 91 05 01 	lds	r17, 0x0105
     b2a:	ce 01       	movw	r24, r28
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	b7 01       	movw	r22, r14
     b30:	a6 01       	movw	r20, r12
     b32:	0e 94 27 02 	call	0x44e	; 0x44e <setThrottles>
		
			/* Compact all engine data into one 8-bit char. */
			send_data = compactData(edata);
     b36:	ce 01       	movw	r24, r28
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <compactData>
		
			/* Start data transfer signal. */
			//USART_Transmit(255);
			
			/* Send data via bluetooth. */
			USART_Transmit(send_data);
     b3e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <USART_Transmit>
		}
		
		//_delay_ms(1000);
		
		/* Check if sleep mode is to be activated. */
		if (power == OFF) {
     b42:	80 91 00 01 	lds	r24, 0x0100
     b46:	81 30       	cpi	r24, 0x01	; 1
     b48:	09 f0       	breq	.+2      	; 0xb4c <main+0xb0>
     b4a:	b4 cf       	rjmp	.-152    	; 0xab4 <main+0x18>
			sleepMode();
     b4c:	0e 94 28 05 	call	0xa50	; 0xa50 <sleepMode>
     b50:	b1 cf       	rjmp	.-158    	; 0xab4 <main+0x18>

00000b52 <__subsf3>:
     b52:	50 58       	subi	r21, 0x80	; 128

00000b54 <__addsf3>:
     b54:	bb 27       	eor	r27, r27
     b56:	aa 27       	eor	r26, r26
     b58:	0e d0       	rcall	.+28     	; 0xb76 <__addsf3x>
     b5a:	cb c1       	rjmp	.+918    	; 0xef2 <__fp_round>
     b5c:	bc d1       	rcall	.+888    	; 0xed6 <__fp_pscA>
     b5e:	30 f0       	brcs	.+12     	; 0xb6c <__addsf3+0x18>
     b60:	c1 d1       	rcall	.+898    	; 0xee4 <__fp_pscB>
     b62:	20 f0       	brcs	.+8      	; 0xb6c <__addsf3+0x18>
     b64:	31 f4       	brne	.+12     	; 0xb72 <__addsf3+0x1e>
     b66:	9f 3f       	cpi	r25, 0xFF	; 255
     b68:	11 f4       	brne	.+4      	; 0xb6e <__addsf3+0x1a>
     b6a:	1e f4       	brtc	.+6      	; 0xb72 <__addsf3+0x1e>
     b6c:	8c c1       	rjmp	.+792    	; 0xe86 <__fp_nan>
     b6e:	0e f4       	brtc	.+2      	; 0xb72 <__addsf3+0x1e>
     b70:	e0 95       	com	r30
     b72:	e7 fb       	bst	r30, 7
     b74:	82 c1       	rjmp	.+772    	; 0xe7a <__fp_inf>

00000b76 <__addsf3x>:
     b76:	e9 2f       	mov	r30, r25
     b78:	cd d1       	rcall	.+922    	; 0xf14 <__fp_split3>
     b7a:	80 f3       	brcs	.-32     	; 0xb5c <__addsf3+0x8>
     b7c:	ba 17       	cp	r27, r26
     b7e:	62 07       	cpc	r22, r18
     b80:	73 07       	cpc	r23, r19
     b82:	84 07       	cpc	r24, r20
     b84:	95 07       	cpc	r25, r21
     b86:	18 f0       	brcs	.+6      	; 0xb8e <__addsf3x+0x18>
     b88:	71 f4       	brne	.+28     	; 0xba6 <__addsf3x+0x30>
     b8a:	9e f5       	brtc	.+102    	; 0xbf2 <__addsf3x+0x7c>
     b8c:	e5 c1       	rjmp	.+970    	; 0xf58 <__fp_zero>
     b8e:	0e f4       	brtc	.+2      	; 0xb92 <__addsf3x+0x1c>
     b90:	e0 95       	com	r30
     b92:	0b 2e       	mov	r0, r27
     b94:	ba 2f       	mov	r27, r26
     b96:	a0 2d       	mov	r26, r0
     b98:	0b 01       	movw	r0, r22
     b9a:	b9 01       	movw	r22, r18
     b9c:	90 01       	movw	r18, r0
     b9e:	0c 01       	movw	r0, r24
     ba0:	ca 01       	movw	r24, r20
     ba2:	a0 01       	movw	r20, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	ff 27       	eor	r31, r31
     ba8:	59 1b       	sub	r21, r25
     baa:	99 f0       	breq	.+38     	; 0xbd2 <__addsf3x+0x5c>
     bac:	59 3f       	cpi	r21, 0xF9	; 249
     bae:	50 f4       	brcc	.+20     	; 0xbc4 <__addsf3x+0x4e>
     bb0:	50 3e       	cpi	r21, 0xE0	; 224
     bb2:	68 f1       	brcs	.+90     	; 0xc0e <__addsf3x+0x98>
     bb4:	1a 16       	cp	r1, r26
     bb6:	f0 40       	sbci	r31, 0x00	; 0
     bb8:	a2 2f       	mov	r26, r18
     bba:	23 2f       	mov	r18, r19
     bbc:	34 2f       	mov	r19, r20
     bbe:	44 27       	eor	r20, r20
     bc0:	58 5f       	subi	r21, 0xF8	; 248
     bc2:	f3 cf       	rjmp	.-26     	; 0xbaa <__addsf3x+0x34>
     bc4:	46 95       	lsr	r20
     bc6:	37 95       	ror	r19
     bc8:	27 95       	ror	r18
     bca:	a7 95       	ror	r26
     bcc:	f0 40       	sbci	r31, 0x00	; 0
     bce:	53 95       	inc	r21
     bd0:	c9 f7       	brne	.-14     	; 0xbc4 <__addsf3x+0x4e>
     bd2:	7e f4       	brtc	.+30     	; 0xbf2 <__addsf3x+0x7c>
     bd4:	1f 16       	cp	r1, r31
     bd6:	ba 0b       	sbc	r27, r26
     bd8:	62 0b       	sbc	r22, r18
     bda:	73 0b       	sbc	r23, r19
     bdc:	84 0b       	sbc	r24, r20
     bde:	ba f0       	brmi	.+46     	; 0xc0e <__addsf3x+0x98>
     be0:	91 50       	subi	r25, 0x01	; 1
     be2:	a1 f0       	breq	.+40     	; 0xc0c <__addsf3x+0x96>
     be4:	ff 0f       	add	r31, r31
     be6:	bb 1f       	adc	r27, r27
     be8:	66 1f       	adc	r22, r22
     bea:	77 1f       	adc	r23, r23
     bec:	88 1f       	adc	r24, r24
     bee:	c2 f7       	brpl	.-16     	; 0xbe0 <__addsf3x+0x6a>
     bf0:	0e c0       	rjmp	.+28     	; 0xc0e <__addsf3x+0x98>
     bf2:	ba 0f       	add	r27, r26
     bf4:	62 1f       	adc	r22, r18
     bf6:	73 1f       	adc	r23, r19
     bf8:	84 1f       	adc	r24, r20
     bfa:	48 f4       	brcc	.+18     	; 0xc0e <__addsf3x+0x98>
     bfc:	87 95       	ror	r24
     bfe:	77 95       	ror	r23
     c00:	67 95       	ror	r22
     c02:	b7 95       	ror	r27
     c04:	f7 95       	ror	r31
     c06:	9e 3f       	cpi	r25, 0xFE	; 254
     c08:	08 f0       	brcs	.+2      	; 0xc0c <__addsf3x+0x96>
     c0a:	b3 cf       	rjmp	.-154    	; 0xb72 <__addsf3+0x1e>
     c0c:	93 95       	inc	r25
     c0e:	88 0f       	add	r24, r24
     c10:	08 f0       	brcs	.+2      	; 0xc14 <__addsf3x+0x9e>
     c12:	99 27       	eor	r25, r25
     c14:	ee 0f       	add	r30, r30
     c16:	97 95       	ror	r25
     c18:	87 95       	ror	r24
     c1a:	08 95       	ret
     c1c:	5c d1       	rcall	.+696    	; 0xed6 <__fp_pscA>
     c1e:	58 f0       	brcs	.+22     	; 0xc36 <__addsf3x+0xc0>
     c20:	80 e8       	ldi	r24, 0x80	; 128
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	09 f4       	brne	.+2      	; 0xc28 <__addsf3x+0xb2>
     c26:	9e ef       	ldi	r25, 0xFE	; 254
     c28:	5d d1       	rcall	.+698    	; 0xee4 <__fp_pscB>
     c2a:	28 f0       	brcs	.+10     	; 0xc36 <__addsf3x+0xc0>
     c2c:	40 e8       	ldi	r20, 0x80	; 128
     c2e:	51 e0       	ldi	r21, 0x01	; 1
     c30:	59 f4       	brne	.+22     	; 0xc48 <atan2+0xe>
     c32:	5e ef       	ldi	r21, 0xFE	; 254
     c34:	09 c0       	rjmp	.+18     	; 0xc48 <atan2+0xe>
     c36:	27 c1       	rjmp	.+590    	; 0xe86 <__fp_nan>
     c38:	8f c1       	rjmp	.+798    	; 0xf58 <__fp_zero>

00000c3a <atan2>:
     c3a:	e9 2f       	mov	r30, r25
     c3c:	e0 78       	andi	r30, 0x80	; 128
     c3e:	6a d1       	rcall	.+724    	; 0xf14 <__fp_split3>
     c40:	68 f3       	brcs	.-38     	; 0xc1c <__addsf3x+0xa6>
     c42:	09 2e       	mov	r0, r25
     c44:	05 2a       	or	r0, r21
     c46:	c1 f3       	breq	.-16     	; 0xc38 <__addsf3x+0xc2>
     c48:	26 17       	cp	r18, r22
     c4a:	37 07       	cpc	r19, r23
     c4c:	48 07       	cpc	r20, r24
     c4e:	59 07       	cpc	r21, r25
     c50:	38 f0       	brcs	.+14     	; 0xc60 <atan2+0x26>
     c52:	0e 2e       	mov	r0, r30
     c54:	07 f8       	bld	r0, 7
     c56:	e0 25       	eor	r30, r0
     c58:	69 f0       	breq	.+26     	; 0xc74 <atan2+0x3a>
     c5a:	e0 25       	eor	r30, r0
     c5c:	e0 64       	ori	r30, 0x40	; 64
     c5e:	0a c0       	rjmp	.+20     	; 0xc74 <atan2+0x3a>
     c60:	ef 63       	ori	r30, 0x3F	; 63
     c62:	07 f8       	bld	r0, 7
     c64:	00 94       	com	r0
     c66:	07 fa       	bst	r0, 7
     c68:	db 01       	movw	r26, r22
     c6a:	b9 01       	movw	r22, r18
     c6c:	9d 01       	movw	r18, r26
     c6e:	dc 01       	movw	r26, r24
     c70:	ca 01       	movw	r24, r20
     c72:	ad 01       	movw	r20, r26
     c74:	ef 93       	push	r30
     c76:	47 d0       	rcall	.+142    	; 0xd06 <__divsf3_pse>
     c78:	3c d1       	rcall	.+632    	; 0xef2 <__fp_round>
     c7a:	0a d0       	rcall	.+20     	; 0xc90 <atan>
     c7c:	5f 91       	pop	r21
     c7e:	55 23       	and	r21, r21
     c80:	31 f0       	breq	.+12     	; 0xc8e <atan2+0x54>
     c82:	2b ed       	ldi	r18, 0xDB	; 219
     c84:	3f e0       	ldi	r19, 0x0F	; 15
     c86:	49 e4       	ldi	r20, 0x49	; 73
     c88:	50 fd       	sbrc	r21, 0
     c8a:	49 ec       	ldi	r20, 0xC9	; 201
     c8c:	63 cf       	rjmp	.-314    	; 0xb54 <__addsf3>
     c8e:	08 95       	ret

00000c90 <atan>:
     c90:	df 93       	push	r29
     c92:	dd 27       	eor	r29, r29
     c94:	b9 2f       	mov	r27, r25
     c96:	bf 77       	andi	r27, 0x7F	; 127
     c98:	40 e8       	ldi	r20, 0x80	; 128
     c9a:	5f e3       	ldi	r21, 0x3F	; 63
     c9c:	16 16       	cp	r1, r22
     c9e:	17 06       	cpc	r1, r23
     ca0:	48 07       	cpc	r20, r24
     ca2:	5b 07       	cpc	r21, r27
     ca4:	10 f4       	brcc	.+4      	; 0xcaa <atan+0x1a>
     ca6:	d9 2f       	mov	r29, r25
     ca8:	62 d1       	rcall	.+708    	; 0xf6e <inverse>
     caa:	9f 93       	push	r25
     cac:	8f 93       	push	r24
     cae:	7f 93       	push	r23
     cb0:	6f 93       	push	r22
     cb2:	c7 d1       	rcall	.+910    	; 0x1042 <square>
     cb4:	ec e8       	ldi	r30, 0x8C	; 140
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	e9 d0       	rcall	.+466    	; 0xe8c <__fp_powser>
     cba:	1b d1       	rcall	.+566    	; 0xef2 <__fp_round>
     cbc:	2f 91       	pop	r18
     cbe:	3f 91       	pop	r19
     cc0:	4f 91       	pop	r20
     cc2:	5f 91       	pop	r21
     cc4:	67 d1       	rcall	.+718    	; 0xf94 <__mulsf3x>
     cc6:	dd 23       	and	r29, r29
     cc8:	49 f0       	breq	.+18     	; 0xcdc <atan+0x4c>
     cca:	90 58       	subi	r25, 0x80	; 128
     ccc:	a2 ea       	ldi	r26, 0xA2	; 162
     cce:	2a ed       	ldi	r18, 0xDA	; 218
     cd0:	3f e0       	ldi	r19, 0x0F	; 15
     cd2:	49 ec       	ldi	r20, 0xC9	; 201
     cd4:	5f e3       	ldi	r21, 0x3F	; 63
     cd6:	d0 78       	andi	r29, 0x80	; 128
     cd8:	5d 27       	eor	r21, r29
     cda:	4d df       	rcall	.-358    	; 0xb76 <__addsf3x>
     cdc:	df 91       	pop	r29
     cde:	09 c1       	rjmp	.+530    	; 0xef2 <__fp_round>

00000ce0 <__cmpsf2>:
     ce0:	a8 d0       	rcall	.+336    	; 0xe32 <__fp_cmp>
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <__cmpsf2+0x6>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	08 95       	ret

00000ce8 <__divsf3>:
     ce8:	0c d0       	rcall	.+24     	; 0xd02 <__divsf3x>
     cea:	03 c1       	rjmp	.+518    	; 0xef2 <__fp_round>
     cec:	fb d0       	rcall	.+502    	; 0xee4 <__fp_pscB>
     cee:	40 f0       	brcs	.+16     	; 0xd00 <__divsf3+0x18>
     cf0:	f2 d0       	rcall	.+484    	; 0xed6 <__fp_pscA>
     cf2:	30 f0       	brcs	.+12     	; 0xd00 <__divsf3+0x18>
     cf4:	21 f4       	brne	.+8      	; 0xcfe <__divsf3+0x16>
     cf6:	5f 3f       	cpi	r21, 0xFF	; 255
     cf8:	19 f0       	breq	.+6      	; 0xd00 <__divsf3+0x18>
     cfa:	bf c0       	rjmp	.+382    	; 0xe7a <__fp_inf>
     cfc:	51 11       	cpse	r21, r1
     cfe:	2d c1       	rjmp	.+602    	; 0xf5a <__fp_szero>
     d00:	c2 c0       	rjmp	.+388    	; 0xe86 <__fp_nan>

00000d02 <__divsf3x>:
     d02:	08 d1       	rcall	.+528    	; 0xf14 <__fp_split3>
     d04:	98 f3       	brcs	.-26     	; 0xcec <__divsf3+0x4>

00000d06 <__divsf3_pse>:
     d06:	99 23       	and	r25, r25
     d08:	c9 f3       	breq	.-14     	; 0xcfc <__divsf3+0x14>
     d0a:	55 23       	and	r21, r21
     d0c:	b1 f3       	breq	.-20     	; 0xcfa <__divsf3+0x12>
     d0e:	95 1b       	sub	r25, r21
     d10:	55 0b       	sbc	r21, r21
     d12:	bb 27       	eor	r27, r27
     d14:	aa 27       	eor	r26, r26
     d16:	62 17       	cp	r22, r18
     d18:	73 07       	cpc	r23, r19
     d1a:	84 07       	cpc	r24, r20
     d1c:	38 f0       	brcs	.+14     	; 0xd2c <__divsf3_pse+0x26>
     d1e:	9f 5f       	subi	r25, 0xFF	; 255
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	22 0f       	add	r18, r18
     d24:	33 1f       	adc	r19, r19
     d26:	44 1f       	adc	r20, r20
     d28:	aa 1f       	adc	r26, r26
     d2a:	a9 f3       	breq	.-22     	; 0xd16 <__divsf3_pse+0x10>
     d2c:	33 d0       	rcall	.+102    	; 0xd94 <__divsf3_pse+0x8e>
     d2e:	0e 2e       	mov	r0, r30
     d30:	3a f0       	brmi	.+14     	; 0xd40 <__divsf3_pse+0x3a>
     d32:	e0 e8       	ldi	r30, 0x80	; 128
     d34:	30 d0       	rcall	.+96     	; 0xd96 <__divsf3_pse+0x90>
     d36:	91 50       	subi	r25, 0x01	; 1
     d38:	50 40       	sbci	r21, 0x00	; 0
     d3a:	e6 95       	lsr	r30
     d3c:	00 1c       	adc	r0, r0
     d3e:	ca f7       	brpl	.-14     	; 0xd32 <__divsf3_pse+0x2c>
     d40:	29 d0       	rcall	.+82     	; 0xd94 <__divsf3_pse+0x8e>
     d42:	fe 2f       	mov	r31, r30
     d44:	27 d0       	rcall	.+78     	; 0xd94 <__divsf3_pse+0x8e>
     d46:	66 0f       	add	r22, r22
     d48:	77 1f       	adc	r23, r23
     d4a:	88 1f       	adc	r24, r24
     d4c:	bb 1f       	adc	r27, r27
     d4e:	26 17       	cp	r18, r22
     d50:	37 07       	cpc	r19, r23
     d52:	48 07       	cpc	r20, r24
     d54:	ab 07       	cpc	r26, r27
     d56:	b0 e8       	ldi	r27, 0x80	; 128
     d58:	09 f0       	breq	.+2      	; 0xd5c <__divsf3_pse+0x56>
     d5a:	bb 0b       	sbc	r27, r27
     d5c:	80 2d       	mov	r24, r0
     d5e:	bf 01       	movw	r22, r30
     d60:	ff 27       	eor	r31, r31
     d62:	93 58       	subi	r25, 0x83	; 131
     d64:	5f 4f       	sbci	r21, 0xFF	; 255
     d66:	2a f0       	brmi	.+10     	; 0xd72 <__divsf3_pse+0x6c>
     d68:	9e 3f       	cpi	r25, 0xFE	; 254
     d6a:	51 05       	cpc	r21, r1
     d6c:	68 f0       	brcs	.+26     	; 0xd88 <__divsf3_pse+0x82>
     d6e:	85 c0       	rjmp	.+266    	; 0xe7a <__fp_inf>
     d70:	f4 c0       	rjmp	.+488    	; 0xf5a <__fp_szero>
     d72:	5f 3f       	cpi	r21, 0xFF	; 255
     d74:	ec f3       	brlt	.-6      	; 0xd70 <__divsf3_pse+0x6a>
     d76:	98 3e       	cpi	r25, 0xE8	; 232
     d78:	dc f3       	brlt	.-10     	; 0xd70 <__divsf3_pse+0x6a>
     d7a:	86 95       	lsr	r24
     d7c:	77 95       	ror	r23
     d7e:	67 95       	ror	r22
     d80:	b7 95       	ror	r27
     d82:	f7 95       	ror	r31
     d84:	9f 5f       	subi	r25, 0xFF	; 255
     d86:	c9 f7       	brne	.-14     	; 0xd7a <__divsf3_pse+0x74>
     d88:	88 0f       	add	r24, r24
     d8a:	91 1d       	adc	r25, r1
     d8c:	96 95       	lsr	r25
     d8e:	87 95       	ror	r24
     d90:	97 f9       	bld	r25, 7
     d92:	08 95       	ret
     d94:	e1 e0       	ldi	r30, 0x01	; 1
     d96:	66 0f       	add	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	88 1f       	adc	r24, r24
     d9c:	bb 1f       	adc	r27, r27
     d9e:	62 17       	cp	r22, r18
     da0:	73 07       	cpc	r23, r19
     da2:	84 07       	cpc	r24, r20
     da4:	ba 07       	cpc	r27, r26
     da6:	20 f0       	brcs	.+8      	; 0xdb0 <__divsf3_pse+0xaa>
     da8:	62 1b       	sub	r22, r18
     daa:	73 0b       	sbc	r23, r19
     dac:	84 0b       	sbc	r24, r20
     dae:	ba 0b       	sbc	r27, r26
     db0:	ee 1f       	adc	r30, r30
     db2:	88 f7       	brcc	.-30     	; 0xd96 <__divsf3_pse+0x90>
     db4:	e0 95       	com	r30
     db6:	08 95       	ret

00000db8 <__floatunsisf>:
     db8:	e8 94       	clt
     dba:	09 c0       	rjmp	.+18     	; 0xdce <__floatsisf+0x12>

00000dbc <__floatsisf>:
     dbc:	97 fb       	bst	r25, 7
     dbe:	3e f4       	brtc	.+14     	; 0xdce <__floatsisf+0x12>
     dc0:	90 95       	com	r25
     dc2:	80 95       	com	r24
     dc4:	70 95       	com	r23
     dc6:	61 95       	neg	r22
     dc8:	7f 4f       	sbci	r23, 0xFF	; 255
     dca:	8f 4f       	sbci	r24, 0xFF	; 255
     dcc:	9f 4f       	sbci	r25, 0xFF	; 255
     dce:	99 23       	and	r25, r25
     dd0:	a9 f0       	breq	.+42     	; 0xdfc <__floatsisf+0x40>
     dd2:	f9 2f       	mov	r31, r25
     dd4:	96 e9       	ldi	r25, 0x96	; 150
     dd6:	bb 27       	eor	r27, r27
     dd8:	93 95       	inc	r25
     dda:	f6 95       	lsr	r31
     ddc:	87 95       	ror	r24
     dde:	77 95       	ror	r23
     de0:	67 95       	ror	r22
     de2:	b7 95       	ror	r27
     de4:	f1 11       	cpse	r31, r1
     de6:	f8 cf       	rjmp	.-16     	; 0xdd8 <__floatsisf+0x1c>
     de8:	fa f4       	brpl	.+62     	; 0xe28 <__floatsisf+0x6c>
     dea:	bb 0f       	add	r27, r27
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__floatsisf+0x36>
     dee:	60 ff       	sbrs	r22, 0
     df0:	1b c0       	rjmp	.+54     	; 0xe28 <__floatsisf+0x6c>
     df2:	6f 5f       	subi	r22, 0xFF	; 255
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	8f 4f       	sbci	r24, 0xFF	; 255
     df8:	9f 4f       	sbci	r25, 0xFF	; 255
     dfa:	16 c0       	rjmp	.+44     	; 0xe28 <__floatsisf+0x6c>
     dfc:	88 23       	and	r24, r24
     dfe:	11 f0       	breq	.+4      	; 0xe04 <__floatsisf+0x48>
     e00:	96 e9       	ldi	r25, 0x96	; 150
     e02:	11 c0       	rjmp	.+34     	; 0xe26 <__floatsisf+0x6a>
     e04:	77 23       	and	r23, r23
     e06:	21 f0       	breq	.+8      	; 0xe10 <__floatsisf+0x54>
     e08:	9e e8       	ldi	r25, 0x8E	; 142
     e0a:	87 2f       	mov	r24, r23
     e0c:	76 2f       	mov	r23, r22
     e0e:	05 c0       	rjmp	.+10     	; 0xe1a <__floatsisf+0x5e>
     e10:	66 23       	and	r22, r22
     e12:	71 f0       	breq	.+28     	; 0xe30 <__floatsisf+0x74>
     e14:	96 e8       	ldi	r25, 0x86	; 134
     e16:	86 2f       	mov	r24, r22
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	2a f0       	brmi	.+10     	; 0xe28 <__floatsisf+0x6c>
     e1e:	9a 95       	dec	r25
     e20:	66 0f       	add	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	88 1f       	adc	r24, r24
     e26:	da f7       	brpl	.-10     	; 0xe1e <__floatsisf+0x62>
     e28:	88 0f       	add	r24, r24
     e2a:	96 95       	lsr	r25
     e2c:	87 95       	ror	r24
     e2e:	97 f9       	bld	r25, 7
     e30:	08 95       	ret

00000e32 <__fp_cmp>:
     e32:	99 0f       	add	r25, r25
     e34:	00 08       	sbc	r0, r0
     e36:	55 0f       	add	r21, r21
     e38:	aa 0b       	sbc	r26, r26
     e3a:	e0 e8       	ldi	r30, 0x80	; 128
     e3c:	fe ef       	ldi	r31, 0xFE	; 254
     e3e:	16 16       	cp	r1, r22
     e40:	17 06       	cpc	r1, r23
     e42:	e8 07       	cpc	r30, r24
     e44:	f9 07       	cpc	r31, r25
     e46:	c0 f0       	brcs	.+48     	; 0xe78 <__fp_cmp+0x46>
     e48:	12 16       	cp	r1, r18
     e4a:	13 06       	cpc	r1, r19
     e4c:	e4 07       	cpc	r30, r20
     e4e:	f5 07       	cpc	r31, r21
     e50:	98 f0       	brcs	.+38     	; 0xe78 <__fp_cmp+0x46>
     e52:	62 1b       	sub	r22, r18
     e54:	73 0b       	sbc	r23, r19
     e56:	84 0b       	sbc	r24, r20
     e58:	95 0b       	sbc	r25, r21
     e5a:	39 f4       	brne	.+14     	; 0xe6a <__fp_cmp+0x38>
     e5c:	0a 26       	eor	r0, r26
     e5e:	61 f0       	breq	.+24     	; 0xe78 <__fp_cmp+0x46>
     e60:	23 2b       	or	r18, r19
     e62:	24 2b       	or	r18, r20
     e64:	25 2b       	or	r18, r21
     e66:	21 f4       	brne	.+8      	; 0xe70 <__fp_cmp+0x3e>
     e68:	08 95       	ret
     e6a:	0a 26       	eor	r0, r26
     e6c:	09 f4       	brne	.+2      	; 0xe70 <__fp_cmp+0x3e>
     e6e:	a1 40       	sbci	r26, 0x01	; 1
     e70:	a6 95       	lsr	r26
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	81 1d       	adc	r24, r1
     e76:	81 1d       	adc	r24, r1
     e78:	08 95       	ret

00000e7a <__fp_inf>:
     e7a:	97 f9       	bld	r25, 7
     e7c:	9f 67       	ori	r25, 0x7F	; 127
     e7e:	80 e8       	ldi	r24, 0x80	; 128
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	08 95       	ret

00000e86 <__fp_nan>:
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	80 ec       	ldi	r24, 0xC0	; 192
     e8a:	08 95       	ret

00000e8c <__fp_powser>:
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	1f 93       	push	r17
     e92:	0f 93       	push	r16
     e94:	ff 92       	push	r15
     e96:	ef 92       	push	r14
     e98:	df 92       	push	r13
     e9a:	7b 01       	movw	r14, r22
     e9c:	8c 01       	movw	r16, r24
     e9e:	68 94       	set
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <__fp_powser+0x20>
     ea2:	da 2e       	mov	r13, r26
     ea4:	ef 01       	movw	r28, r30
     ea6:	76 d0       	rcall	.+236    	; 0xf94 <__mulsf3x>
     ea8:	fe 01       	movw	r30, r28
     eaa:	e8 94       	clt
     eac:	a5 91       	lpm	r26, Z+
     eae:	25 91       	lpm	r18, Z+
     eb0:	35 91       	lpm	r19, Z+
     eb2:	45 91       	lpm	r20, Z+
     eb4:	55 91       	lpm	r21, Z+
     eb6:	ae f3       	brts	.-22     	; 0xea2 <__fp_powser+0x16>
     eb8:	ef 01       	movw	r28, r30
     eba:	5d de       	rcall	.-838    	; 0xb76 <__addsf3x>
     ebc:	fe 01       	movw	r30, r28
     ebe:	97 01       	movw	r18, r14
     ec0:	a8 01       	movw	r20, r16
     ec2:	da 94       	dec	r13
     ec4:	79 f7       	brne	.-34     	; 0xea4 <__fp_powser+0x18>
     ec6:	df 90       	pop	r13
     ec8:	ef 90       	pop	r14
     eca:	ff 90       	pop	r15
     ecc:	0f 91       	pop	r16
     ece:	1f 91       	pop	r17
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <__fp_pscA>:
     ed6:	00 24       	eor	r0, r0
     ed8:	0a 94       	dec	r0
     eda:	16 16       	cp	r1, r22
     edc:	17 06       	cpc	r1, r23
     ede:	18 06       	cpc	r1, r24
     ee0:	09 06       	cpc	r0, r25
     ee2:	08 95       	ret

00000ee4 <__fp_pscB>:
     ee4:	00 24       	eor	r0, r0
     ee6:	0a 94       	dec	r0
     ee8:	12 16       	cp	r1, r18
     eea:	13 06       	cpc	r1, r19
     eec:	14 06       	cpc	r1, r20
     eee:	05 06       	cpc	r0, r21
     ef0:	08 95       	ret

00000ef2 <__fp_round>:
     ef2:	09 2e       	mov	r0, r25
     ef4:	03 94       	inc	r0
     ef6:	00 0c       	add	r0, r0
     ef8:	11 f4       	brne	.+4      	; 0xefe <__fp_round+0xc>
     efa:	88 23       	and	r24, r24
     efc:	52 f0       	brmi	.+20     	; 0xf12 <__fp_round+0x20>
     efe:	bb 0f       	add	r27, r27
     f00:	40 f4       	brcc	.+16     	; 0xf12 <__fp_round+0x20>
     f02:	bf 2b       	or	r27, r31
     f04:	11 f4       	brne	.+4      	; 0xf0a <__fp_round+0x18>
     f06:	60 ff       	sbrs	r22, 0
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <__fp_round+0x20>
     f0a:	6f 5f       	subi	r22, 0xFF	; 255
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	8f 4f       	sbci	r24, 0xFF	; 255
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	08 95       	ret

00000f14 <__fp_split3>:
     f14:	57 fd       	sbrc	r21, 7
     f16:	90 58       	subi	r25, 0x80	; 128
     f18:	44 0f       	add	r20, r20
     f1a:	55 1f       	adc	r21, r21
     f1c:	59 f0       	breq	.+22     	; 0xf34 <__fp_splitA+0x10>
     f1e:	5f 3f       	cpi	r21, 0xFF	; 255
     f20:	71 f0       	breq	.+28     	; 0xf3e <__fp_splitA+0x1a>
     f22:	47 95       	ror	r20

00000f24 <__fp_splitA>:
     f24:	88 0f       	add	r24, r24
     f26:	97 fb       	bst	r25, 7
     f28:	99 1f       	adc	r25, r25
     f2a:	61 f0       	breq	.+24     	; 0xf44 <__fp_splitA+0x20>
     f2c:	9f 3f       	cpi	r25, 0xFF	; 255
     f2e:	79 f0       	breq	.+30     	; 0xf4e <__fp_splitA+0x2a>
     f30:	87 95       	ror	r24
     f32:	08 95       	ret
     f34:	12 16       	cp	r1, r18
     f36:	13 06       	cpc	r1, r19
     f38:	14 06       	cpc	r1, r20
     f3a:	55 1f       	adc	r21, r21
     f3c:	f2 cf       	rjmp	.-28     	; 0xf22 <__fp_split3+0xe>
     f3e:	46 95       	lsr	r20
     f40:	f1 df       	rcall	.-30     	; 0xf24 <__fp_splitA>
     f42:	08 c0       	rjmp	.+16     	; 0xf54 <__fp_splitA+0x30>
     f44:	16 16       	cp	r1, r22
     f46:	17 06       	cpc	r1, r23
     f48:	18 06       	cpc	r1, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	f1 cf       	rjmp	.-30     	; 0xf30 <__fp_splitA+0xc>
     f4e:	86 95       	lsr	r24
     f50:	71 05       	cpc	r23, r1
     f52:	61 05       	cpc	r22, r1
     f54:	08 94       	sec
     f56:	08 95       	ret

00000f58 <__fp_zero>:
     f58:	e8 94       	clt

00000f5a <__fp_szero>:
     f5a:	bb 27       	eor	r27, r27
     f5c:	66 27       	eor	r22, r22
     f5e:	77 27       	eor	r23, r23
     f60:	cb 01       	movw	r24, r22
     f62:	97 f9       	bld	r25, 7
     f64:	08 95       	ret

00000f66 <__gesf2>:
     f66:	65 df       	rcall	.-310    	; 0xe32 <__fp_cmp>
     f68:	08 f4       	brcc	.+2      	; 0xf6c <__gesf2+0x6>
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	08 95       	ret

00000f6e <inverse>:
     f6e:	9b 01       	movw	r18, r22
     f70:	ac 01       	movw	r20, r24
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	80 e8       	ldi	r24, 0x80	; 128
     f78:	9f e3       	ldi	r25, 0x3F	; 63
     f7a:	b6 ce       	rjmp	.-660    	; 0xce8 <__divsf3>

00000f7c <__mulsf3>:
     f7c:	0b d0       	rcall	.+22     	; 0xf94 <__mulsf3x>
     f7e:	b9 cf       	rjmp	.-142    	; 0xef2 <__fp_round>
     f80:	aa df       	rcall	.-172    	; 0xed6 <__fp_pscA>
     f82:	28 f0       	brcs	.+10     	; 0xf8e <__mulsf3+0x12>
     f84:	af df       	rcall	.-162    	; 0xee4 <__fp_pscB>
     f86:	18 f0       	brcs	.+6      	; 0xf8e <__mulsf3+0x12>
     f88:	95 23       	and	r25, r21
     f8a:	09 f0       	breq	.+2      	; 0xf8e <__mulsf3+0x12>
     f8c:	76 cf       	rjmp	.-276    	; 0xe7a <__fp_inf>
     f8e:	7b cf       	rjmp	.-266    	; 0xe86 <__fp_nan>
     f90:	11 24       	eor	r1, r1
     f92:	e3 cf       	rjmp	.-58     	; 0xf5a <__fp_szero>

00000f94 <__mulsf3x>:
     f94:	bf df       	rcall	.-130    	; 0xf14 <__fp_split3>
     f96:	a0 f3       	brcs	.-24     	; 0xf80 <__mulsf3+0x4>

00000f98 <__mulsf3_pse>:
     f98:	95 9f       	mul	r25, r21
     f9a:	d1 f3       	breq	.-12     	; 0xf90 <__mulsf3+0x14>
     f9c:	95 0f       	add	r25, r21
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	55 1f       	adc	r21, r21
     fa2:	62 9f       	mul	r22, r18
     fa4:	f0 01       	movw	r30, r0
     fa6:	72 9f       	mul	r23, r18
     fa8:	bb 27       	eor	r27, r27
     faa:	f0 0d       	add	r31, r0
     fac:	b1 1d       	adc	r27, r1
     fae:	63 9f       	mul	r22, r19
     fb0:	aa 27       	eor	r26, r26
     fb2:	f0 0d       	add	r31, r0
     fb4:	b1 1d       	adc	r27, r1
     fb6:	aa 1f       	adc	r26, r26
     fb8:	64 9f       	mul	r22, r20
     fba:	66 27       	eor	r22, r22
     fbc:	b0 0d       	add	r27, r0
     fbe:	a1 1d       	adc	r26, r1
     fc0:	66 1f       	adc	r22, r22
     fc2:	82 9f       	mul	r24, r18
     fc4:	22 27       	eor	r18, r18
     fc6:	b0 0d       	add	r27, r0
     fc8:	a1 1d       	adc	r26, r1
     fca:	62 1f       	adc	r22, r18
     fcc:	73 9f       	mul	r23, r19
     fce:	b0 0d       	add	r27, r0
     fd0:	a1 1d       	adc	r26, r1
     fd2:	62 1f       	adc	r22, r18
     fd4:	83 9f       	mul	r24, r19
     fd6:	a0 0d       	add	r26, r0
     fd8:	61 1d       	adc	r22, r1
     fda:	22 1f       	adc	r18, r18
     fdc:	74 9f       	mul	r23, r20
     fde:	33 27       	eor	r19, r19
     fe0:	a0 0d       	add	r26, r0
     fe2:	61 1d       	adc	r22, r1
     fe4:	23 1f       	adc	r18, r19
     fe6:	84 9f       	mul	r24, r20
     fe8:	60 0d       	add	r22, r0
     fea:	21 1d       	adc	r18, r1
     fec:	82 2f       	mov	r24, r18
     fee:	76 2f       	mov	r23, r22
     ff0:	6a 2f       	mov	r22, r26
     ff2:	11 24       	eor	r1, r1
     ff4:	9f 57       	subi	r25, 0x7F	; 127
     ff6:	50 40       	sbci	r21, 0x00	; 0
     ff8:	8a f0       	brmi	.+34     	; 0x101c <__mulsf3_pse+0x84>
     ffa:	e1 f0       	breq	.+56     	; 0x1034 <__mulsf3_pse+0x9c>
     ffc:	88 23       	and	r24, r24
     ffe:	4a f0       	brmi	.+18     	; 0x1012 <__mulsf3_pse+0x7a>
    1000:	ee 0f       	add	r30, r30
    1002:	ff 1f       	adc	r31, r31
    1004:	bb 1f       	adc	r27, r27
    1006:	66 1f       	adc	r22, r22
    1008:	77 1f       	adc	r23, r23
    100a:	88 1f       	adc	r24, r24
    100c:	91 50       	subi	r25, 0x01	; 1
    100e:	50 40       	sbci	r21, 0x00	; 0
    1010:	a9 f7       	brne	.-22     	; 0xffc <__mulsf3_pse+0x64>
    1012:	9e 3f       	cpi	r25, 0xFE	; 254
    1014:	51 05       	cpc	r21, r1
    1016:	70 f0       	brcs	.+28     	; 0x1034 <__mulsf3_pse+0x9c>
    1018:	30 cf       	rjmp	.-416    	; 0xe7a <__fp_inf>
    101a:	9f cf       	rjmp	.-194    	; 0xf5a <__fp_szero>
    101c:	5f 3f       	cpi	r21, 0xFF	; 255
    101e:	ec f3       	brlt	.-6      	; 0x101a <__mulsf3_pse+0x82>
    1020:	98 3e       	cpi	r25, 0xE8	; 232
    1022:	dc f3       	brlt	.-10     	; 0x101a <__mulsf3_pse+0x82>
    1024:	86 95       	lsr	r24
    1026:	77 95       	ror	r23
    1028:	67 95       	ror	r22
    102a:	b7 95       	ror	r27
    102c:	f7 95       	ror	r31
    102e:	e7 95       	ror	r30
    1030:	9f 5f       	subi	r25, 0xFF	; 255
    1032:	c1 f7       	brne	.-16     	; 0x1024 <__mulsf3_pse+0x8c>
    1034:	fe 2b       	or	r31, r30
    1036:	88 0f       	add	r24, r24
    1038:	91 1d       	adc	r25, r1
    103a:	96 95       	lsr	r25
    103c:	87 95       	ror	r24
    103e:	97 f9       	bld	r25, 7
    1040:	08 95       	ret

00001042 <square>:
    1042:	9b 01       	movw	r18, r22
    1044:	ac 01       	movw	r20, r24
    1046:	9a cf       	rjmp	.-204    	; 0xf7c <__mulsf3>

00001048 <_exit>:
    1048:	f8 94       	cli

0000104a <__stop_program>:
    104a:	ff cf       	rjmp	.-2      	; 0x104a <__stop_program>
