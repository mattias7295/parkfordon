
kontroll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000128a  0000131e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000128a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800106  00800106  00001324  2**0
                  ALLOC
  3 .stab         00002c58  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a11  00000000  00000000  00003f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e0  00000000  00000000  00004990  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd6  00000000  00000000  00004a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000524  00000000  00000000  00005646  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b7  00000000  00000000  00005b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00006324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000367  00000000  00000000  000065ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000065a  00000000  00000000  00006913  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00006f6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
       8:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_2>
       c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_3>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      68:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      6c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      70:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      74:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      7c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      80:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      84:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      88:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	sts	0x9b, r22
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d0 e4       	ldi	r29, 0x40	; 64
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ea e8       	ldi	r30, 0x8A	; 138
      ce:	f2 e1       	ldi	r31, 0x12	; 18
      d0:	00 e0       	ldi	r16, 0x00	; 0
      d2:	0b bf       	out	0x3b, r16	; 59
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x14>
      d6:	07 90       	elpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a6 30       	cpi	r26, 0x06	; 6
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0x10>
      e0:	1b be       	out	0x3b, r1	; 59

000000e2 <__do_clear_bss>:
      e2:	11 e0       	ldi	r17, 0x01	; 1
      e4:	a6 e0       	ldi	r26, 0x06	; 6
      e6:	b1 e0       	ldi	r27, 0x01	; 1
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a1 32       	cpi	r26, 0x21	; 33
      ee:	b1 07       	cpc	r27, r17
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
      f2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <main>
      f6:	0c 94 43 09 	jmp	0x1286	; 0x1286 <_exit>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <initGPSParser>:
void initGPSParser(unsigned int ubrr) {
	
//	DDRD |= (1<<PD3);

	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
      fe:	90 93 cd 00 	sts	0x00CD, r25
	UBRR1L = (unsigned char)ubrr;
     102:	80 93 cc 00 	sts	0x00CC, r24

	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
     106:	88 e1       	ldi	r24, 0x18	; 24
     108:	80 93 c9 00 	sts	0x00C9, r24

	/* Set frame format: 8data, 2stop bit */
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);
     10c:	8e e0       	ldi	r24, 0x0E	; 14
     10e:	80 93 ca 00 	sts	0x00CA, r24

}
     112:	08 95       	ret

00000114 <USART_ReceiveGPS>:


unsigned char USART_ReceiveGPS(void) {
	
	/* Wait for data to be received */
	while (!(UCSR1A & (1<<RXC1)));
     114:	e8 ec       	ldi	r30, 0xC8	; 200
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	88 23       	and	r24, r24
     11c:	ec f7       	brge	.-6      	; 0x118 <USART_ReceiveGPS+0x4>
	
	/* Get and return received data from buffer */
	return UDR1;
     11e:	80 91 ce 00 	lds	r24, 0x00CE
     122:	08 95       	ret

00000124 <parseGPS>:
	/* Set frame format: 8data, 2stop bit */
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);

}

void parseGPS() {
     124:	cf 92       	push	r12
     126:	df 92       	push	r13
     128:	ef 92       	push	r14
     12a:	ff 92       	push	r15
     12c:	0f 93       	push	r16
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	cd b7       	in	r28, 0x3d	; 61
     136:	de b7       	in	r29, 0x3e	; 62
     138:	ac 97       	sbiw	r28, 0x2c	; 44
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
		
	char temp = 'O';
	char word[6];
	char sentence[37];
	char delim = ',';
     144:	8c e2       	ldi	r24, 0x2C	; 44
     146:	8c a7       	lds	r24, 0x7c
	char *GPSStatus;
	
	while (strcmp(word, "GPRMC") != 0) {
     148:	0f 2e       	mov	r0, r31
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	cf 2e       	mov	r12, r31
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	df 2e       	mov	r13, r31
     152:	f0 2d       	mov	r31, r0
	/* Set frame format: 8data, 2stop bit */
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);

}

void parseGPS() {
     154:	0f 2e       	mov	r0, r31
     156:	f6 e0       	ldi	r31, 0x06	; 6
     158:	ef 2e       	mov	r14, r31
     15a:	ff 24       	eor	r15, r15
     15c:	f0 2d       	mov	r31, r0
     15e:	ec 0e       	add	r14, r28
     160:	fd 1e       	adc	r15, r29
	char word[6];
	char sentence[37];
	char delim = ',';
	char *GPSStatus;
	
	while (strcmp(word, "GPRMC") != 0) {
     162:	10 c0       	rjmp	.+32     	; 0x184 <parseGPS+0x60>
		
		do {
			temp = USART_ReceiveGPS();
     164:	0e 94 8a 00 	call	0x114	; 0x114 <USART_ReceiveGPS>
		} while (temp != '$');
     168:	84 32       	cpi	r24, 0x24	; 36
     16a:	e1 f7       	brne	.-8      	; 0x164 <parseGPS+0x40>
     16c:	8e 01       	movw	r16, r28
     16e:	0f 5f       	subi	r16, 0xFF	; 255
     170:	1f 4f       	sbci	r17, 0xFF	; 255
		
		for (int i = 0; i < 5; i++) {
			word[i] = USART_ReceiveGPS();
     172:	0e 94 8a 00 	call	0x114	; 0x114 <USART_ReceiveGPS>
     176:	f8 01       	movw	r30, r16
     178:	81 93       	st	Z+, r24
     17a:	8f 01       	movw	r16, r30
		
		do {
			temp = USART_ReceiveGPS();
		} while (temp != '$');
		
		for (int i = 0; i < 5; i++) {
     17c:	ee 15       	cp	r30, r14
     17e:	ff 05       	cpc	r31, r15
     180:	c1 f7       	brne	.-16     	; 0x172 <parseGPS+0x4e>
			word[i] = USART_ReceiveGPS();
		}
		
		word[5] = '\0';	
     182:	1e 82       	std	Y+6, r1	; 0x06
	char word[6];
	char sentence[37];
	char delim = ',';
	char *GPSStatus;
	
	while (strcmp(word, "GPRMC") != 0) {
     184:	ce 01       	movw	r24, r28
     186:	01 96       	adiw	r24, 0x01	; 1
     188:	b6 01       	movw	r22, r12
     18a:	0e 94 0c 09 	call	0x1218	; 0x1218 <strcmp>
     18e:	28 2f       	mov	r18, r24
     190:	39 2f       	mov	r19, r25
     192:	21 15       	cp	r18, r1
     194:	31 05       	cpc	r19, r1
     196:	31 f7       	brne	.-52     	; 0x164 <parseGPS+0x40>
     198:	8e 01       	movw	r16, r28
     19a:	09 5f       	subi	r16, 0xF9	; 249
     19c:	1f 4f       	sbci	r17, 0xFF	; 255
	/* Set frame format: 8data, 2stop bit */
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);

}

void parseGPS() {
     19e:	0f 2e       	mov	r0, r31
     1a0:	fb e2       	ldi	r31, 0x2B	; 43
     1a2:	ef 2e       	mov	r14, r31
     1a4:	ff 24       	eor	r15, r15
     1a6:	f0 2d       	mov	r31, r0
     1a8:	ec 0e       	add	r14, r28
     1aa:	fd 1e       	adc	r15, r29
		
		word[5] = '\0';	
	}
		
	for (int i = 0; i < 36; i++) {
		sentence[i] = USART_ReceiveGPS();
     1ac:	0e 94 8a 00 	call	0x114	; 0x114 <USART_ReceiveGPS>
     1b0:	f8 01       	movw	r30, r16
     1b2:	81 93       	st	Z+, r24
     1b4:	8f 01       	movw	r16, r30
		}
		
		word[5] = '\0';	
	}
		
	for (int i = 0; i < 36; i++) {
     1b6:	ee 15       	cp	r30, r14
     1b8:	ff 05       	cpc	r31, r15
     1ba:	c1 f7       	brne	.-16     	; 0x1ac <parseGPS+0x88>
		sentence[i] = USART_ReceiveGPS();
	}
	
	strtok(sentence, &delim);
     1bc:	ce 01       	movw	r24, r28
     1be:	07 96       	adiw	r24, 0x07	; 7
     1c0:	be 01       	movw	r22, r28
     1c2:	64 5d       	subi	r22, 0xD4	; 212
     1c4:	7f 4f       	sbci	r23, 0xFF	; 255
     1c6:	0e 94 07 09 	call	0x120e	; 0x120e <strtok>
	GPSStatus = strtok(sentence, NULL);
     1ca:	ce 01       	movw	r24, r28
     1cc:	07 96       	adiw	r24, 0x07	; 7
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	0e 94 07 09 	call	0x120e	; 0x120e <strtok>
	
	if (*GPSStatus != 'V') {
     1d6:	fc 01       	movw	r30, r24
     1d8:	80 81       	ld	r24, Z
     1da:	86 35       	cpi	r24, 0x56	; 86
     1dc:	11 f1       	breq	.+68     	; 0x222 <parseGPS+0xfe>
		strtok(sentence, NULL);
     1de:	ce 01       	movw	r24, r28
     1e0:	07 96       	adiw	r24, 0x07	; 7
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	0e 94 07 09 	call	0x120e	; 0x120e <strtok>
		strcpy(latitude, strtok(sentence, NULL));
     1ea:	ce 01       	movw	r24, r28
     1ec:	07 96       	adiw	r24, 0x07	; 7
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	0e 94 07 09 	call	0x120e	; 0x120e <strtok>
     1f6:	bc 01       	movw	r22, r24
     1f8:	82 e1       	ldi	r24, 0x12	; 18
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	0e 94 15 09 	call	0x122a	; 0x122a <strcpy>
		strtok(sentence, NULL);
     200:	ce 01       	movw	r24, r28
     202:	07 96       	adiw	r24, 0x07	; 7
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	0e 94 07 09 	call	0x120e	; 0x120e <strtok>
		strcpy(longitude, strtok(sentence, NULL));
     20c:	ce 01       	movw	r24, r28
     20e:	07 96       	adiw	r24, 0x07	; 7
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	0e 94 07 09 	call	0x120e	; 0x120e <strtok>
     218:	bc 01       	movw	r22, r24
     21a:	88 e0       	ldi	r24, 0x08	; 8
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	0e 94 15 09 	call	0x122a	; 0x122a <strcpy>
	}
}
     222:	ac 96       	adiw	r28, 0x2c	; 44
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	1f 91       	pop	r17
     234:	0f 91       	pop	r16
     236:	ff 90       	pop	r15
     238:	ef 90       	pop	r14
     23a:	df 90       	pop	r13
     23c:	cf 90       	pop	r12
     23e:	08 95       	ret

00000240 <initOnInterrupt>:
steer_mode steer;

void initOnInterrupt() {
	
	/* Disable the external interrupt on port INT1. */
	EIMSK &= ~(1<<ON_OFF_SWITCH);
     240:	e9 98       	cbi	0x1d, 1	; 29
	
	/* Low level generates interrupt. */
	EICRA &= ~(1<<ISC10)|(1<<ISC11);
     242:	e9 e6       	ldi	r30, 0x69	; 105
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	8b 7f       	andi	r24, 0xFB	; 251
     24a:	80 83       	st	Z, r24
	
	/* Enable the external interrupt on port INT1. */
	EIMSK |= (1<<ON_OFF_SWITCH);
     24c:	e9 9a       	sbi	0x1d, 1	; 29
	
	/* Set the global interrupt flag. */
//	sei();
}
     24e:	08 95       	ret

00000250 <initOffInterrupt>:

void initOffInterrupt() {
	
	/* Disable the external interrupt on port INT1. */
	EIMSK &= ~(1<<ON_OFF_SWITCH);
     250:	e9 98       	cbi	0x1d, 1	; 29
	
	/* Rising edge generates interrupt. */
	EICRA |= (1<<ISC10)|(1<<ISC11);
     252:	e9 e6       	ldi	r30, 0x69	; 105
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	8c 60       	ori	r24, 0x0C	; 12
     25a:	80 83       	st	Z, r24
	
	/* Enable the external interrupt on port INT1. */
	EIMSK |= (1<<ON_OFF_SWITCH);
     25c:	e9 9a       	sbi	0x1d, 1	; 29
	
	/* Set the global interrupt flag. */
//	sei();
}
     25e:	08 95       	ret

00000260 <initSteerInterrupt>:

void initSteerInterrupt() {
	
	/* Disable the external interrupt on port INT2. */
	EIMSK &= ~(1<<STEER_SWITCH);
     260:	ea 98       	cbi	0x1d, 2	; 29
	
	/* Any edge generates interrupt. */
	EICRA |= (1<<ISC20);
     262:	e9 e6       	ldi	r30, 0x69	; 105
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	80 61       	ori	r24, 0x10	; 16
     26a:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC21);
     26c:	80 81       	ld	r24, Z
     26e:	8f 7d       	andi	r24, 0xDF	; 223
     270:	80 83       	st	Z, r24
	
	/* Enable the external interrupt on port INT2. */
	EIMSK |= (1<<STEER_SWITCH);
     272:	ea 9a       	sbi	0x1d, 2	; 29
	
	/* Set the global interrupt flag. */
	//	sei();
}
     274:	08 95       	ret

00000276 <__vector_2>:
* Description:	Interrupt routine for an external interrupt
*				on port INT1, does nothing but waking the MCU
*				up after entering sleep mode and changing the
*				power mode flag correctly.
*/
ISR(INT1_vect) {
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	8f 93       	push	r24
	
	/* Change power mode flag. */
	if (power == OFF) {
     282:	80 91 1b 01 	lds	r24, 0x011B
     286:	81 30       	cpi	r24, 0x01	; 1
     288:	19 f4       	brne	.+6      	; 0x290 <__vector_2+0x1a>
		power = ON;
     28a:	10 92 1b 01 	sts	0x011B, r1
     28e:	03 c0       	rjmp	.+6      	; 0x296 <__vector_2+0x20>
	} else {
		power = OFF;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	80 93 1b 01 	sts	0x011B, r24
	}
}
     296:	8f 91       	pop	r24
     298:	0f 90       	pop	r0
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	0f 90       	pop	r0
     29e:	1f 90       	pop	r1
     2a0:	18 95       	reti

000002a2 <__vector_3>:

ISR(INT2_vect) {
     2a2:	1f 92       	push	r1
     2a4:	0f 92       	push	r0
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	0f 92       	push	r0
     2aa:	11 24       	eor	r1, r1
     2ac:	8f 93       	push	r24
	
	/* Change steering mode flag. */
	if (steer == MAN) {
     2ae:	80 91 1c 01 	lds	r24, 0x011C
     2b2:	88 23       	and	r24, r24
     2b4:	29 f4       	brne	.+10     	; 0x2c0 <__vector_3+0x1e>
		steer = AUTO;
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	80 93 1c 01 	sts	0x011C, r24
		PORTB |= _BV(STEER_CONTROL);
     2bc:	29 9a       	sbi	0x05, 1	; 5
     2be:	03 c0       	rjmp	.+6      	; 0x2c6 <__vector_3+0x24>
	} else {
		steer = MAN;
     2c0:	10 92 1c 01 	sts	0x011C, r1
		PORTB &= ~_BV(STEER_CONTROL);
     2c4:	29 98       	cbi	0x05, 1	; 5
	}
	
}
     2c6:	8f 91       	pop	r24
     2c8:	0f 90       	pop	r0
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	0f 90       	pop	r0
     2ce:	1f 90       	pop	r1
     2d0:	18 95       	reti

000002d2 <USART_Init>:
* Description: Initializes the USART.
*/
void USART_Init(unsigned int ubrr) {
	
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     2d2:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     2d6:	80 93 c4 00 	sts	0x00C4, r24
	
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     2da:	88 e1       	ldi	r24, 0x18	; 24
     2dc:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     2e0:	8e e0       	ldi	r24, 0x0E	; 14
     2e2:	80 93 c2 00 	sts	0x00C2, r24
}
     2e6:	08 95       	ret

000002e8 <init>:
*				and timer.
*/
void init() {
	
	/* Set power ports to output and high. */
	DDRA |= _BV(POWER_PORT_3V);
     2e8:	0a 9a       	sbi	0x01, 2	; 1
	DDRA |= _BV(POWER_PORT_5V);
     2ea:	0b 9a       	sbi	0x01, 3	; 1
	PORTA |= _BV(POWER_PORT_3V);
     2ec:	12 9a       	sbi	0x02, 2	; 2
	PORTA |= _BV(POWER_PORT_5V);
     2ee:	13 9a       	sbi	0x02, 3	; 2
	
	/* Set power control to output and constantly high since we start in on mode. */
	DDRB |= _BV(POWER_CONTROL);
     2f0:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= _BV(POWER_CONTROL);
     2f2:	28 9a       	sbi	0x05, 0	; 5
	
	/* Set steer control to output. */
	DDRB |= _BV(STEER_CONTROL);
     2f4:	21 9a       	sbi	0x04, 1	; 4
	
	/* Set switches as inputs with pull up resistance. */
	DDRD &= ~_BV(ON_OFF_SWITCH);
     2f6:	51 98       	cbi	0x0a, 1	; 10
	DDRD &= ~_BV(STEER_SWITCH);
     2f8:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= _BV(ON_OFF_SWITCH);
     2fa:	59 9a       	sbi	0x0b, 1	; 11
	PORTD |= _BV(STEER_SWITCH);
     2fc:	5a 9a       	sbi	0x0b, 2	; 11

	/* Enable the ADC. */
	ADCSRA |= _BV(ADEN);
     2fe:	ea e7       	ldi	r30, 0x7A	; 122
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	80 68       	ori	r24, 0x80	; 128
     306:	80 83       	st	Z, r24
	
	/* Initialize the USART. */
	USART_Init(MYUBRR);
     308:	83 e3       	ldi	r24, 0x33	; 51
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <USART_Init>
	
	/* Initialize the GPS parser. */
	initGPSParser(MYUBRR);
     310:	83 e3       	ldi	r24, 0x33	; 51
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 7f 00 	call	0xfe	; 0xfe <initGPSParser>
	
	/* Initialize global flags and indicate steering mode with LED. */	
	power = ON;
     318:	10 92 1b 01 	sts	0x011B, r1
	
	if (PINB & (1<<STEER_SWITCH_IN)) {
     31c:	1a 9b       	sbis	0x03, 2	; 3
     31e:	04 c0       	rjmp	.+8      	; 0x328 <init+0x40>
		steer = MAN;
     320:	10 92 1c 01 	sts	0x011C, r1
		PORTB &= ~_BV(STEER_CONTROL);
     324:	29 98       	cbi	0x05, 1	; 5
     326:	04 c0       	rjmp	.+8      	; 0x330 <init+0x48>
	} else {
		steer = AUTO;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	80 93 1c 01 	sts	0x011C, r24
		PORTB |= _BV(STEER_CONTROL);
     32e:	29 9a       	sbi	0x05, 1	; 5
	}
	
	/* Initialize the interrupts for turning off the control pad and
	 * changing the steering mode. */
	initOffInterrupt();	
     330:	0e 94 28 01 	call	0x250	; 0x250 <initOffInterrupt>
	initSteerInterrupt();
     334:	0e 94 30 01 	call	0x260	; 0x260 <initSteerInterrupt>
	
	/* Set global interrupt flag. */
	sei();
     338:	78 94       	sei
}
     33a:	08 95       	ret

0000033c <USART_Transmit>:
* Description: Transmits data via bluetooth.
*/
void USART_Transmit(unsigned char data) {
	
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
     33c:	e0 ec       	ldi	r30, 0xC0	; 192
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	90 81       	ld	r25, Z
     342:	95 ff       	sbrs	r25, 5
     344:	fd cf       	rjmp	.-6      	; 0x340 <USART_Transmit+0x4>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     346:	80 93 c6 00 	sts	0x00C6, r24
}
     34a:	08 95       	ret

0000034c <USART_Receive>:
* Description: Receives data via bluetooth.
*/
unsigned char USART_Receive() {
	
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
     34c:	e0 ec       	ldi	r30, 0xC0	; 192
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	80 81       	ld	r24, Z
     352:	88 23       	and	r24, r24
     354:	ec f7       	brge	.-6      	; 0x350 <USART_Receive+0x4>
	
	/* Get and return received data from buffer */
	return UDR0;
     356:	80 91 c6 00 	lds	r24, 0x00C6
}
     35a:	08 95       	ret

0000035c <adc_read>:
*/
uint16_t adc_read(uint8_t adcx) {
	
	/* Takes voltage levels from Aref and sets which analog pin we want
	 * to read from. */
	ADMUX &= (1<<REFS0)|(1<<ADLAR);
     35c:	ec e7       	ldi	r30, 0x7C	; 124
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	90 81       	ld	r25, Z
     362:	90 76       	andi	r25, 0x60	; 96
     364:	90 83       	st	Z, r25
	ADMUX |= adcx;
     366:	90 81       	ld	r25, Z
     368:	89 2b       	or	r24, r25
     36a:	80 83       	st	Z, r24

	/* This starts the conversion. */
	ADCSRA |= _BV(ADSC);
     36c:	ea e7       	ldi	r30, 0x7A	; 122
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	80 64       	ori	r24, 0x40	; 64
     374:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	* is finished. It constantly checks ADCSRA's ADSC bit, which we just
	* set above, to see if it is still set. This bit is automatically
	* reset (zeroed) when the conversion is ready so if we do this in
	* a loop the loop will just go until the conversion is ready. */
	while ((ADCSRA & _BV(ADSC)));
     376:	80 81       	ld	r24, Z
     378:	86 fd       	sbrc	r24, 6
     37a:	fd cf       	rjmp	.-6      	; 0x376 <adc_read+0x1a>

	/* Finally, we return the converted value to the calling function. */
	return ADC;
     37c:	80 91 78 00 	lds	r24, 0x0078
     380:	90 91 79 00 	lds	r25, 0x0079
}
     384:	08 95       	ret

00000386 <getXValue>:
*				value of the adc_read function.
*/
int getXValue() {
	
	int x_value;
	uint16_t read = adc_read(X_AXIS);
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	0e 94 ae 01 	call	0x35c	; 0x35c <adc_read>
	
	if (read >= ADC_THRESHOLDH7) {
     38c:	23 e0       	ldi	r18, 0x03	; 3
     38e:	80 3c       	cpi	r24, 0xC0	; 192
     390:	92 07       	cpc	r25, r18
     392:	a0 f5       	brcc	.+104    	; 0x3fc <getXValue+0x76>
		x_value = 7;
	} else if (read > ADC_THRESHOLDH6) {
     394:	23 e0       	ldi	r18, 0x03	; 3
     396:	81 38       	cpi	r24, 0x81	; 129
     398:	92 07       	cpc	r25, r18
     39a:	98 f5       	brcc	.+102    	; 0x402 <getXValue+0x7c>
		x_value = 6;
	} else if (read > ADC_THRESHOLDH5) {
     39c:	23 e0       	ldi	r18, 0x03	; 3
     39e:	81 34       	cpi	r24, 0x41	; 65
     3a0:	92 07       	cpc	r25, r18
     3a2:	90 f5       	brcc	.+100    	; 0x408 <getXValue+0x82>
		x_value = 5;
	} else if (read > ADC_THRESHOLDH4) {
     3a4:	23 e0       	ldi	r18, 0x03	; 3
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	92 07       	cpc	r25, r18
     3aa:	88 f5       	brcc	.+98     	; 0x40e <getXValue+0x88>
		x_value = 4;
	} else if (read > ADC_THRESHOLDH3) {
     3ac:	22 e0       	ldi	r18, 0x02	; 2
     3ae:	81 3c       	cpi	r24, 0xC1	; 193
     3b0:	92 07       	cpc	r25, r18
     3b2:	80 f5       	brcc	.+96     	; 0x414 <getXValue+0x8e>
		x_value = 3;
	} else if (read > ADC_THRESHOLDH2) {
     3b4:	22 e0       	ldi	r18, 0x02	; 2
     3b6:	81 38       	cpi	r24, 0x81	; 129
     3b8:	92 07       	cpc	r25, r18
     3ba:	78 f5       	brcc	.+94     	; 0x41a <getXValue+0x94>
		x_value = 2;
	} else if (read > ADC_THRESHOLDH1) {
     3bc:	22 e0       	ldi	r18, 0x02	; 2
     3be:	81 34       	cpi	r24, 0x41	; 65
     3c0:	92 07       	cpc	r25, r18
     3c2:	70 f5       	brcc	.+92     	; 0x420 <getXValue+0x9a>
		x_value = 1;
	} else if (read <= ADC_THRESHOLDL7) {
     3c4:	81 34       	cpi	r24, 0x41	; 65
     3c6:	91 05       	cpc	r25, r1
     3c8:	70 f1       	brcs	.+92     	; 0x426 <getXValue+0xa0>
		x_value = -7;
	} else if (read < ADC_THRESHOLDL6) {
     3ca:	80 38       	cpi	r24, 0x80	; 128
     3cc:	91 05       	cpc	r25, r1
     3ce:	70 f1       	brcs	.+92     	; 0x42c <getXValue+0xa6>
		x_value = -6;
	} else if (read < ADC_THRESHOLDL5) {
     3d0:	80 3c       	cpi	r24, 0xC0	; 192
     3d2:	91 05       	cpc	r25, r1
     3d4:	70 f1       	brcs	.+92     	; 0x432 <getXValue+0xac>
		x_value = -5;
	} else if (read < ADC_THRESHOLDL4) {
     3d6:	8f 3f       	cpi	r24, 0xFF	; 255
     3d8:	91 05       	cpc	r25, r1
     3da:	71 f1       	breq	.+92     	; 0x438 <getXValue+0xb2>
     3dc:	68 f1       	brcs	.+90     	; 0x438 <getXValue+0xb2>
		x_value = -4;
	} else if (read < ADC_THRESHOLDL3) {
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	80 34       	cpi	r24, 0x40	; 64
     3e2:	92 07       	cpc	r25, r18
     3e4:	60 f1       	brcs	.+88     	; 0x43e <getXValue+0xb8>
		x_value = -3;
	} else if (read < ADC_THRESHOLDL2) {
     3e6:	21 e0       	ldi	r18, 0x01	; 1
     3e8:	80 38       	cpi	r24, 0x80	; 128
     3ea:	92 07       	cpc	r25, r18
     3ec:	58 f1       	brcs	.+86     	; 0x444 <getXValue+0xbe>
		x_value = -2;
	} else if (read < ADC_THRESHOLDL1){
     3ee:	21 e0       	ldi	r18, 0x01	; 1
     3f0:	80 3c       	cpi	r24, 0xC0	; 192
     3f2:	92 07       	cpc	r25, r18
     3f4:	50 f5       	brcc	.+84     	; 0x44a <getXValue+0xc4>
		x_value = -1;
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	9f ef       	ldi	r25, 0xFF	; 255
     3fa:	08 95       	ret
	
	int x_value;
	uint16_t read = adc_read(X_AXIS);
	
	if (read >= ADC_THRESHOLDH7) {
		x_value = 7;
     3fc:	87 e0       	ldi	r24, 0x07	; 7
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	08 95       	ret
	} else if (read > ADC_THRESHOLDH6) {
		x_value = 6;
     402:	86 e0       	ldi	r24, 0x06	; 6
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	08 95       	ret
	} else if (read > ADC_THRESHOLDH5) {
		x_value = 5;
     408:	85 e0       	ldi	r24, 0x05	; 5
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	08 95       	ret
	} else if (read > ADC_THRESHOLDH4) {
		x_value = 4;
     40e:	84 e0       	ldi	r24, 0x04	; 4
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	08 95       	ret
	} else if (read > ADC_THRESHOLDH3) {
		x_value = 3;
     414:	83 e0       	ldi	r24, 0x03	; 3
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	08 95       	ret
	} else if (read > ADC_THRESHOLDH2) {
		x_value = 2;
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	08 95       	ret
	} else if (read > ADC_THRESHOLDH1) {
		x_value = 1;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	08 95       	ret
	} else if (read <= ADC_THRESHOLDL7) {
		x_value = -7;
     426:	89 ef       	ldi	r24, 0xF9	; 249
     428:	9f ef       	ldi	r25, 0xFF	; 255
     42a:	08 95       	ret
	} else if (read < ADC_THRESHOLDL6) {
		x_value = -6;
     42c:	8a ef       	ldi	r24, 0xFA	; 250
     42e:	9f ef       	ldi	r25, 0xFF	; 255
     430:	08 95       	ret
	} else if (read < ADC_THRESHOLDL5) {
		x_value = -5;
     432:	8b ef       	ldi	r24, 0xFB	; 251
     434:	9f ef       	ldi	r25, 0xFF	; 255
     436:	08 95       	ret
	} else if (read < ADC_THRESHOLDL4) {
		x_value = -4;
     438:	8c ef       	ldi	r24, 0xFC	; 252
     43a:	9f ef       	ldi	r25, 0xFF	; 255
     43c:	08 95       	ret
	} else if (read < ADC_THRESHOLDL3) {
		x_value = -3;
     43e:	8d ef       	ldi	r24, 0xFD	; 253
     440:	9f ef       	ldi	r25, 0xFF	; 255
     442:	08 95       	ret
	} else if (read < ADC_THRESHOLDL2) {
		x_value = -2;
     444:	8e ef       	ldi	r24, 0xFE	; 254
     446:	9f ef       	ldi	r25, 0xFF	; 255
     448:	08 95       	ret
	} else if (read < ADC_THRESHOLDL1){
		x_value = -1;
	} else {
		x_value = 0;
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
	}
					
	return x_value;
}
     44e:	08 95       	ret

00000450 <getYValue>:
*				value of the adc_read function.
*/
int getYValue() {
	
	int y_value;
	uint16_t read = adc_read(Y_AXIS);
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 ae 01 	call	0x35c	; 0x35c <adc_read>
	
	if (read >= ADC_THRESHOLDH7) {
     456:	23 e0       	ldi	r18, 0x03	; 3
     458:	80 3c       	cpi	r24, 0xC0	; 192
     45a:	92 07       	cpc	r25, r18
     45c:	b0 f5       	brcc	.+108    	; 0x4ca <getYValue+0x7a>
		y_value = -7;
	} else if (read > ADC_THRESHOLDH6) {
     45e:	43 e0       	ldi	r20, 0x03	; 3
     460:	81 38       	cpi	r24, 0x81	; 129
     462:	94 07       	cpc	r25, r20
     464:	a8 f5       	brcc	.+106    	; 0x4d0 <getYValue+0x80>
		y_value = -6;
	} else if (read > ADC_THRESHOLDH5) {
     466:	23 e0       	ldi	r18, 0x03	; 3
     468:	81 34       	cpi	r24, 0x41	; 65
     46a:	92 07       	cpc	r25, r18
     46c:	a0 f5       	brcc	.+104    	; 0x4d6 <getYValue+0x86>
		y_value = -5;
	} else if (read > ADC_THRESHOLDH4) {
     46e:	43 e0       	ldi	r20, 0x03	; 3
     470:	81 30       	cpi	r24, 0x01	; 1
     472:	94 07       	cpc	r25, r20
     474:	98 f5       	brcc	.+102    	; 0x4dc <getYValue+0x8c>
		y_value = -4;
	} else if (read > ADC_THRESHOLDH3) {
     476:	22 e0       	ldi	r18, 0x02	; 2
     478:	81 3c       	cpi	r24, 0xC1	; 193
     47a:	92 07       	cpc	r25, r18
     47c:	90 f5       	brcc	.+100    	; 0x4e2 <getYValue+0x92>
		y_value = -3;
	} else if (read > ADC_THRESHOLDH2) {
     47e:	42 e0       	ldi	r20, 0x02	; 2
     480:	81 38       	cpi	r24, 0x81	; 129
     482:	94 07       	cpc	r25, r20
     484:	88 f5       	brcc	.+98     	; 0x4e8 <getYValue+0x98>
		y_value = -2;
	} else if (read > ADC_THRESHOLDH1) {
     486:	22 e0       	ldi	r18, 0x02	; 2
     488:	81 34       	cpi	r24, 0x41	; 65
     48a:	92 07       	cpc	r25, r18
     48c:	80 f5       	brcc	.+96     	; 0x4ee <getYValue+0x9e>
		y_value = -1;
	} else if (read <= ADC_THRESHOLDL7) {
     48e:	81 34       	cpi	r24, 0x41	; 65
     490:	91 05       	cpc	r25, r1
     492:	80 f1       	brcs	.+96     	; 0x4f4 <getYValue+0xa4>
		y_value = 7;
	} else if (read < ADC_THRESHOLDL6) {
     494:	80 38       	cpi	r24, 0x80	; 128
     496:	91 05       	cpc	r25, r1
     498:	80 f1       	brcs	.+96     	; 0x4fa <getYValue+0xaa>
		y_value = 6;
	} else if (read < ADC_THRESHOLDL5) {
     49a:	80 3c       	cpi	r24, 0xC0	; 192
     49c:	91 05       	cpc	r25, r1
     49e:	80 f1       	brcs	.+96     	; 0x500 <getYValue+0xb0>
		y_value = 5;
	} else if (read < ADC_THRESHOLDL4) {
     4a0:	8f 3f       	cpi	r24, 0xFF	; 255
     4a2:	91 05       	cpc	r25, r1
     4a4:	81 f1       	breq	.+96     	; 0x506 <getYValue+0xb6>
     4a6:	78 f1       	brcs	.+94     	; 0x506 <getYValue+0xb6>
		y_value = 4;
	} else if (read < ADC_THRESHOLDL3) {
     4a8:	41 e0       	ldi	r20, 0x01	; 1
     4aa:	80 34       	cpi	r24, 0x40	; 64
     4ac:	94 07       	cpc	r25, r20
     4ae:	70 f1       	brcs	.+92     	; 0x50c <getYValue+0xbc>
		y_value = 3;
	} else if (read < ADC_THRESHOLDL2) {
     4b0:	21 e0       	ldi	r18, 0x01	; 1
     4b2:	80 38       	cpi	r24, 0x80	; 128
     4b4:	92 07       	cpc	r25, r18
     4b6:	68 f1       	brcs	.+90     	; 0x512 <getYValue+0xc2>
	
	int y_value;
	uint16_t read = adc_read(Y_AXIS);
	
	if (read >= ADC_THRESHOLDH7) {
		y_value = -7;
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	80 3c       	cpi	r24, 0xC0	; 192
     4c0:	94 07       	cpc	r25, r20
     4c2:	48 f1       	brcs	.+82     	; 0x516 <getYValue+0xc6>
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	26 c0       	rjmp	.+76     	; 0x516 <getYValue+0xc6>
     4ca:	29 ef       	ldi	r18, 0xF9	; 249
     4cc:	3f ef       	ldi	r19, 0xFF	; 255
     4ce:	23 c0       	rjmp	.+70     	; 0x516 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH6) {
		y_value = -6;
     4d0:	2a ef       	ldi	r18, 0xFA	; 250
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	20 c0       	rjmp	.+64     	; 0x516 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH5) {
		y_value = -5;
     4d6:	2b ef       	ldi	r18, 0xFB	; 251
     4d8:	3f ef       	ldi	r19, 0xFF	; 255
     4da:	1d c0       	rjmp	.+58     	; 0x516 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH4) {
		y_value = -4;
     4dc:	2c ef       	ldi	r18, 0xFC	; 252
     4de:	3f ef       	ldi	r19, 0xFF	; 255
     4e0:	1a c0       	rjmp	.+52     	; 0x516 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH3) {
		y_value = -3;
     4e2:	2d ef       	ldi	r18, 0xFD	; 253
     4e4:	3f ef       	ldi	r19, 0xFF	; 255
     4e6:	17 c0       	rjmp	.+46     	; 0x516 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH2) {
		y_value = -2;
     4e8:	2e ef       	ldi	r18, 0xFE	; 254
     4ea:	3f ef       	ldi	r19, 0xFF	; 255
     4ec:	14 c0       	rjmp	.+40     	; 0x516 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH1) {
		y_value = -1;
     4ee:	2f ef       	ldi	r18, 0xFF	; 255
     4f0:	3f ef       	ldi	r19, 0xFF	; 255
     4f2:	11 c0       	rjmp	.+34     	; 0x516 <getYValue+0xc6>
	} else if (read <= ADC_THRESHOLDL7) {
		y_value = 7;
     4f4:	27 e0       	ldi	r18, 0x07	; 7
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	0e c0       	rjmp	.+28     	; 0x516 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL6) {
		y_value = 6;
     4fa:	26 e0       	ldi	r18, 0x06	; 6
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	0b c0       	rjmp	.+22     	; 0x516 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL5) {
		y_value = 5;
     500:	25 e0       	ldi	r18, 0x05	; 5
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	08 c0       	rjmp	.+16     	; 0x516 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL4) {
		y_value = 4;
     506:	24 e0       	ldi	r18, 0x04	; 4
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	05 c0       	rjmp	.+10     	; 0x516 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL3) {
		y_value = 3;
     50c:	23 e0       	ldi	r18, 0x03	; 3
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL2) {
		y_value = 2;
     512:	22 e0       	ldi	r18, 0x02	; 2
     514:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		y_value = 0;
	}
	
	return y_value;
}
     516:	82 2f       	mov	r24, r18
     518:	93 2f       	mov	r25, r19
     51a:	08 95       	ret

0000051c <setDirections>:
*			angle: const double - The angle of the joystick position in
*									the interval [-pi, pi]. 
* Output:	-
* Description: Sets the engine directions given the angle of the joystick.
*/
void setDirections(engine_data *edata, const double angle) {
     51c:	cf 92       	push	r12
     51e:	df 92       	push	r13
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	ec 01       	movw	r28, r24
     52a:	6a 01       	movw	r12, r20
     52c:	7b 01       	movw	r14, r22
	
	if (angle <= 3*PI/4 && angle >= -PI/4) {
     52e:	cb 01       	movw	r24, r22
     530:	ba 01       	movw	r22, r20
     532:	24 ee       	ldi	r18, 0xE4	; 228
     534:	3b ec       	ldi	r19, 0xCB	; 203
     536:	46 e1       	ldi	r20, 0x16	; 22
     538:	50 e4       	ldi	r21, 0x40	; 64
     53a:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     53e:	18 16       	cp	r1, r24
     540:	64 f0       	brlt	.+24     	; 0x55a <setDirections+0x3e>
     542:	c7 01       	movw	r24, r14
     544:	b6 01       	movw	r22, r12
     546:	2b ed       	ldi	r18, 0xDB	; 219
     548:	3f e0       	ldi	r19, 0x0F	; 15
     54a:	49 e4       	ldi	r20, 0x49	; 73
     54c:	5f eb       	ldi	r21, 0xBF	; 191
     54e:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     552:	88 23       	and	r24, r24
     554:	14 f0       	brlt	.+4      	; 0x55a <setDirections+0x3e>
		edata->left_engine_dir = FORWARD;
     556:	18 82       	st	Y, r1
     558:	02 c0       	rjmp	.+4      	; 0x55e <setDirections+0x42>
	} else {
		edata->left_engine_dir = BACKWARD;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	88 83       	st	Y, r24
	}
	
	if (angle <= PI/4 && angle >= -3*PI/4) {
     55e:	c7 01       	movw	r24, r14
     560:	b6 01       	movw	r22, r12
     562:	2b ed       	ldi	r18, 0xDB	; 219
     564:	3f e0       	ldi	r19, 0x0F	; 15
     566:	49 e4       	ldi	r20, 0x49	; 73
     568:	5f e3       	ldi	r21, 0x3F	; 63
     56a:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     56e:	18 16       	cp	r1, r24
     570:	6c f0       	brlt	.+26     	; 0x58c <setDirections+0x70>
     572:	c7 01       	movw	r24, r14
     574:	b6 01       	movw	r22, r12
     576:	24 ee       	ldi	r18, 0xE4	; 228
     578:	3b ec       	ldi	r19, 0xCB	; 203
     57a:	46 e1       	ldi	r20, 0x16	; 22
     57c:	50 ec       	ldi	r21, 0xC0	; 192
     57e:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     582:	88 23       	and	r24, r24
     584:	1c f0       	brlt	.+6      	; 0x58c <setDirections+0x70>
		edata->right_engine_dir = BACKWARD;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	89 83       	std	Y+1, r24	; 0x01
     58a:	01 c0       	rjmp	.+2      	; 0x58e <setDirections+0x72>
	} else {
		edata->right_engine_dir = FORWARD;
     58c:	19 82       	std	Y+1, r1	; 0x01
	}
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	08 95       	ret

0000059c <setThrottles>:
*			x_value: const int - The current x position of the joystick.
*			y_value: const int - The current y position of the joystick.
* Output:	-
* Description: Sets the engine throttles. 
*/
void setThrottles(engine_data *edata, const double angle, const int x_value, const int y_value) {
     59c:	6f 92       	push	r6
     59e:	7f 92       	push	r7
     5a0:	8f 92       	push	r8
     5a2:	9f 92       	push	r9
     5a4:	af 92       	push	r10
     5a6:	bf 92       	push	r11
     5a8:	cf 92       	push	r12
     5aa:	df 92       	push	r13
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	3c 01       	movw	r6, r24
     5ba:	6a 01       	movw	r12, r20
     5bc:	7b 01       	movw	r14, r22
     5be:	c2 2f       	mov	r28, r18
     5c0:	d3 2f       	mov	r29, r19
	* 
	* The head engines are:
	* Left engine		for [0, PI/2) and [-PI, -PI/2)  
	* Right engine		for [PI/2, PI) and [-PI/2, 0). 
	*/
	if (angle >= 0 && angle < PI/4) {
     5c2:	cb 01       	movw	r24, r22
     5c4:	ba 01       	movw	r22, r20
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	a9 01       	movw	r20, r18
     5cc:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     5d0:	88 23       	and	r24, r24
     5d2:	d4 f1       	brlt	.+116    	; 0x648 <setThrottles+0xac>
     5d4:	c7 01       	movw	r24, r14
     5d6:	b6 01       	movw	r22, r12
     5d8:	2b ed       	ldi	r18, 0xDB	; 219
     5da:	3f e0       	ldi	r19, 0x0F	; 15
     5dc:	49 e4       	ldi	r20, 0x49	; 73
     5de:	5f e3       	ldi	r21, 0x3F	; 63
     5e0:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     5e4:	88 23       	and	r24, r24
     5e6:	84 f5       	brge	.+96     	; 0x648 <setThrottles+0xac>
		factor = 1 - angle/(PI/4);
		edata->left_engine_throttle = (double)(abs(x_value));
     5e8:	6c 2f       	mov	r22, r28
     5ea:	7d 2f       	mov	r23, r29
     5ec:	77 23       	and	r23, r23
     5ee:	1c f4       	brge	.+6      	; 0x5f6 <setThrottles+0x5a>
     5f0:	70 95       	com	r23
     5f2:	61 95       	neg	r22
     5f4:	7f 4f       	sbci	r23, 0xFF	; 255
     5f6:	88 27       	eor	r24, r24
     5f8:	77 fd       	sbrc	r23, 7
     5fa:	80 95       	com	r24
     5fc:	98 2f       	mov	r25, r24
     5fe:	0e 94 c1 07 	call	0xf82	; 0xf82 <__floatsisf>
     602:	4b 01       	movw	r8, r22
     604:	5c 01       	movw	r10, r24
     606:	f3 01       	movw	r30, r6
     608:	62 83       	std	Z+2, r22	; 0x02
     60a:	73 83       	std	Z+3, r23	; 0x03
     60c:	84 83       	std	Z+4, r24	; 0x04
     60e:	95 83       	std	Z+5, r25	; 0x05
	* The head engines are:
	* Left engine		for [0, PI/2) and [-PI, -PI/2)  
	* Right engine		for [PI/2, PI) and [-PI/2, 0). 
	*/
	if (angle >= 0 && angle < PI/4) {
		factor = 1 - angle/(PI/4);
     610:	c7 01       	movw	r24, r14
     612:	b6 01       	movw	r22, r12
     614:	2b ed       	ldi	r18, 0xDB	; 219
     616:	3f e0       	ldi	r19, 0x0F	; 15
     618:	49 e4       	ldi	r20, 0x49	; 73
     61a:	5f e3       	ldi	r21, 0x3F	; 63
     61c:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
     620:	9b 01       	movw	r18, r22
     622:	ac 01       	movw	r20, r24
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	80 e8       	ldi	r24, 0x80	; 128
     62a:	9f e3       	ldi	r25, 0x3F	; 63
     62c:	0e 94 8c 06 	call	0xd18	; 0xd18 <__subsf3>
		edata->left_engine_throttle = (double)(abs(x_value));
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
     630:	a5 01       	movw	r20, r10
     632:	94 01       	movw	r18, r8
     634:	0e 94 a1 08 	call	0x1142	; 0x1142 <__mulsf3>
     638:	dc 01       	movw	r26, r24
     63a:	cb 01       	movw	r24, r22
     63c:	f3 01       	movw	r30, r6
     63e:	86 83       	std	Z+6, r24	; 0x06
     640:	97 83       	std	Z+7, r25	; 0x07
     642:	a0 87       	std	Z+8, r26	; 0x08
     644:	b1 87       	std	Z+9, r27	; 0x09
     646:	cd c1       	rjmp	.+922    	; 0x9e2 <setThrottles+0x446>
		
	} else if (angle >= PI/4 && angle < PI/2) {
     648:	c7 01       	movw	r24, r14
     64a:	b6 01       	movw	r22, r12
     64c:	2b ed       	ldi	r18, 0xDB	; 219
     64e:	3f e0       	ldi	r19, 0x0F	; 15
     650:	49 e4       	ldi	r20, 0x49	; 73
     652:	5f e3       	ldi	r21, 0x3F	; 63
     654:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     658:	88 23       	and	r24, r24
     65a:	c4 f1       	brlt	.+112    	; 0x6cc <setThrottles+0x130>
     65c:	c7 01       	movw	r24, r14
     65e:	b6 01       	movw	r22, r12
     660:	2b ed       	ldi	r18, 0xDB	; 219
     662:	3f e0       	ldi	r19, 0x0F	; 15
     664:	49 ec       	ldi	r20, 0xC9	; 201
     666:	5f e3       	ldi	r21, 0x3F	; 63
     668:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     66c:	88 23       	and	r24, r24
     66e:	74 f5       	brge	.+92     	; 0x6cc <setThrottles+0x130>
		factor = (angle - PI/4)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
     670:	60 2f       	mov	r22, r16
     672:	71 2f       	mov	r23, r17
     674:	77 23       	and	r23, r23
     676:	1c f4       	brge	.+6      	; 0x67e <setThrottles+0xe2>
     678:	70 95       	com	r23
     67a:	61 95       	neg	r22
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	88 27       	eor	r24, r24
     680:	77 fd       	sbrc	r23, 7
     682:	80 95       	com	r24
     684:	98 2f       	mov	r25, r24
     686:	0e 94 c1 07 	call	0xf82	; 0xf82 <__floatsisf>
     68a:	4b 01       	movw	r8, r22
     68c:	5c 01       	movw	r10, r24
     68e:	f3 01       	movw	r30, r6
     690:	62 83       	std	Z+2, r22	; 0x02
     692:	73 83       	std	Z+3, r23	; 0x03
     694:	84 83       	std	Z+4, r24	; 0x04
     696:	95 83       	std	Z+5, r25	; 0x05
		factor = 1 - angle/(PI/4);
		edata->left_engine_throttle = (double)(abs(x_value));
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
		
	} else if (angle >= PI/4 && angle < PI/2) {
		factor = (angle - PI/4)/(PI/4);
     698:	c7 01       	movw	r24, r14
     69a:	b6 01       	movw	r22, r12
     69c:	2b ed       	ldi	r18, 0xDB	; 219
     69e:	3f e0       	ldi	r19, 0x0F	; 15
     6a0:	49 e4       	ldi	r20, 0x49	; 73
     6a2:	5f e3       	ldi	r21, 0x3F	; 63
     6a4:	0e 94 8c 06 	call	0xd18	; 0xd18 <__subsf3>
     6a8:	2b ed       	ldi	r18, 0xDB	; 219
     6aa:	3f e0       	ldi	r19, 0x0F	; 15
     6ac:	49 e4       	ldi	r20, 0x49	; 73
     6ae:	5f e3       	ldi	r21, 0x3F	; 63
     6b0:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
     6b4:	a5 01       	movw	r20, r10
     6b6:	94 01       	movw	r18, r8
     6b8:	0e 94 a1 08 	call	0x1142	; 0x1142 <__mulsf3>
     6bc:	dc 01       	movw	r26, r24
     6be:	cb 01       	movw	r24, r22
     6c0:	f3 01       	movw	r30, r6
     6c2:	86 83       	std	Z+6, r24	; 0x06
     6c4:	97 83       	std	Z+7, r25	; 0x07
     6c6:	a0 87       	std	Z+8, r26	; 0x08
     6c8:	b1 87       	std	Z+9, r27	; 0x09
     6ca:	8b c1       	rjmp	.+790    	; 0x9e2 <setThrottles+0x446>
		
	} else if (angle >= PI/2 && angle < 3*PI/4) {
     6cc:	c7 01       	movw	r24, r14
     6ce:	b6 01       	movw	r22, r12
     6d0:	2b ed       	ldi	r18, 0xDB	; 219
     6d2:	3f e0       	ldi	r19, 0x0F	; 15
     6d4:	49 ec       	ldi	r20, 0xC9	; 201
     6d6:	5f e3       	ldi	r21, 0x3F	; 63
     6d8:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     6dc:	88 23       	and	r24, r24
     6de:	0c f4       	brge	.+2      	; 0x6e2 <setThrottles+0x146>
     6e0:	40 c0       	rjmp	.+128    	; 0x762 <setThrottles+0x1c6>
     6e2:	c7 01       	movw	r24, r14
     6e4:	b6 01       	movw	r22, r12
     6e6:	24 ee       	ldi	r18, 0xE4	; 228
     6e8:	3b ec       	ldi	r19, 0xCB	; 203
     6ea:	46 e1       	ldi	r20, 0x16	; 22
     6ec:	50 e4       	ldi	r21, 0x40	; 64
     6ee:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     6f2:	88 23       	and	r24, r24
     6f4:	b4 f5       	brge	.+108    	; 0x762 <setThrottles+0x1c6>
		factor = 1 - (angle - PI/2)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
     6f6:	60 2f       	mov	r22, r16
     6f8:	71 2f       	mov	r23, r17
     6fa:	77 23       	and	r23, r23
     6fc:	1c f4       	brge	.+6      	; 0x704 <setThrottles+0x168>
     6fe:	70 95       	com	r23
     700:	61 95       	neg	r22
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	88 27       	eor	r24, r24
     706:	77 fd       	sbrc	r23, 7
     708:	80 95       	com	r24
     70a:	98 2f       	mov	r25, r24
     70c:	0e 94 c1 07 	call	0xf82	; 0xf82 <__floatsisf>
     710:	4b 01       	movw	r8, r22
     712:	5c 01       	movw	r10, r24
     714:	f3 01       	movw	r30, r6
     716:	66 83       	std	Z+6, r22	; 0x06
     718:	77 83       	std	Z+7, r23	; 0x07
     71a:	80 87       	std	Z+8, r24	; 0x08
     71c:	91 87       	std	Z+9, r25	; 0x09
		factor = (angle - PI/4)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
		
	} else if (angle >= PI/2 && angle < 3*PI/4) {
		factor = 1 - (angle - PI/2)/(PI/4);
     71e:	c7 01       	movw	r24, r14
     720:	b6 01       	movw	r22, r12
     722:	2b ed       	ldi	r18, 0xDB	; 219
     724:	3f e0       	ldi	r19, 0x0F	; 15
     726:	49 ec       	ldi	r20, 0xC9	; 201
     728:	5f e3       	ldi	r21, 0x3F	; 63
     72a:	0e 94 8c 06 	call	0xd18	; 0xd18 <__subsf3>
     72e:	2b ed       	ldi	r18, 0xDB	; 219
     730:	3f e0       	ldi	r19, 0x0F	; 15
     732:	49 e4       	ldi	r20, 0x49	; 73
     734:	5f e3       	ldi	r21, 0x3F	; 63
     736:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
     73a:	9b 01       	movw	r18, r22
     73c:	ac 01       	movw	r20, r24
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	80 e8       	ldi	r24, 0x80	; 128
     744:	9f e3       	ldi	r25, 0x3F	; 63
     746:	0e 94 8c 06 	call	0xd18	; 0xd18 <__subsf3>
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
     74a:	a5 01       	movw	r20, r10
     74c:	94 01       	movw	r18, r8
     74e:	0e 94 a1 08 	call	0x1142	; 0x1142 <__mulsf3>
     752:	dc 01       	movw	r26, r24
     754:	cb 01       	movw	r24, r22
     756:	f3 01       	movw	r30, r6
     758:	82 83       	std	Z+2, r24	; 0x02
     75a:	93 83       	std	Z+3, r25	; 0x03
     75c:	a4 83       	std	Z+4, r26	; 0x04
     75e:	b5 83       	std	Z+5, r27	; 0x05
     760:	40 c1       	rjmp	.+640    	; 0x9e2 <setThrottles+0x446>
		
	} else if (angle >= 3*PI/4 && angle <= PI) {
     762:	c7 01       	movw	r24, r14
     764:	b6 01       	movw	r22, r12
     766:	24 ee       	ldi	r18, 0xE4	; 228
     768:	3b ec       	ldi	r19, 0xCB	; 203
     76a:	46 e1       	ldi	r20, 0x16	; 22
     76c:	50 e4       	ldi	r21, 0x40	; 64
     76e:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     772:	88 23       	and	r24, r24
     774:	c4 f1       	brlt	.+112    	; 0x7e6 <setThrottles+0x24a>
     776:	c7 01       	movw	r24, r14
     778:	b6 01       	movw	r22, r12
     77a:	2b ed       	ldi	r18, 0xDB	; 219
     77c:	3f e0       	ldi	r19, 0x0F	; 15
     77e:	49 e4       	ldi	r20, 0x49	; 73
     780:	50 e4       	ldi	r21, 0x40	; 64
     782:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     786:	18 16       	cp	r1, r24
     788:	74 f1       	brlt	.+92     	; 0x7e6 <setThrottles+0x24a>
		factor = (angle - 3*PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
     78a:	6c 2f       	mov	r22, r28
     78c:	7d 2f       	mov	r23, r29
     78e:	77 23       	and	r23, r23
     790:	1c f4       	brge	.+6      	; 0x798 <setThrottles+0x1fc>
     792:	70 95       	com	r23
     794:	61 95       	neg	r22
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	88 27       	eor	r24, r24
     79a:	77 fd       	sbrc	r23, 7
     79c:	80 95       	com	r24
     79e:	98 2f       	mov	r25, r24
     7a0:	0e 94 c1 07 	call	0xf82	; 0xf82 <__floatsisf>
     7a4:	4b 01       	movw	r8, r22
     7a6:	5c 01       	movw	r10, r24
     7a8:	f3 01       	movw	r30, r6
     7aa:	66 83       	std	Z+6, r22	; 0x06
     7ac:	77 83       	std	Z+7, r23	; 0x07
     7ae:	80 87       	std	Z+8, r24	; 0x08
     7b0:	91 87       	std	Z+9, r25	; 0x09
		factor = 1 - (angle - PI/2)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle >= 3*PI/4 && angle <= PI) {
		factor = (angle - 3*PI/4)/(PI/4);
     7b2:	c7 01       	movw	r24, r14
     7b4:	b6 01       	movw	r22, r12
     7b6:	24 ee       	ldi	r18, 0xE4	; 228
     7b8:	3b ec       	ldi	r19, 0xCB	; 203
     7ba:	46 e1       	ldi	r20, 0x16	; 22
     7bc:	50 e4       	ldi	r21, 0x40	; 64
     7be:	0e 94 8c 06 	call	0xd18	; 0xd18 <__subsf3>
     7c2:	2b ed       	ldi	r18, 0xDB	; 219
     7c4:	3f e0       	ldi	r19, 0x0F	; 15
     7c6:	49 e4       	ldi	r20, 0x49	; 73
     7c8:	5f e3       	ldi	r21, 0x3F	; 63
     7ca:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
     7ce:	a5 01       	movw	r20, r10
     7d0:	94 01       	movw	r18, r8
     7d2:	0e 94 a1 08 	call	0x1142	; 0x1142 <__mulsf3>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	f3 01       	movw	r30, r6
     7dc:	82 83       	std	Z+2, r24	; 0x02
     7de:	93 83       	std	Z+3, r25	; 0x03
     7e0:	a4 83       	std	Z+4, r26	; 0x04
     7e2:	b5 83       	std	Z+5, r27	; 0x05
     7e4:	fe c0       	rjmp	.+508    	; 0x9e2 <setThrottles+0x446>
		
	} else if (angle < 0 && angle > -PI/4) {
     7e6:	c7 01       	movw	r24, r14
     7e8:	b6 01       	movw	r22, r12
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	a9 01       	movw	r20, r18
     7f0:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     7f4:	88 23       	and	r24, r24
     7f6:	c4 f5       	brge	.+112    	; 0x868 <setThrottles+0x2cc>
     7f8:	c7 01       	movw	r24, r14
     7fa:	b6 01       	movw	r22, r12
     7fc:	2b ed       	ldi	r18, 0xDB	; 219
     7fe:	3f e0       	ldi	r19, 0x0F	; 15
     800:	49 e4       	ldi	r20, 0x49	; 73
     802:	5f eb       	ldi	r21, 0xBF	; 191
     804:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     808:	18 16       	cp	r1, r24
     80a:	74 f5       	brge	.+92     	; 0x868 <setThrottles+0x2cc>
		factor = 1 - angle*(-1)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
     80c:	6c 2f       	mov	r22, r28
     80e:	7d 2f       	mov	r23, r29
     810:	77 23       	and	r23, r23
     812:	1c f4       	brge	.+6      	; 0x81a <setThrottles+0x27e>
     814:	70 95       	com	r23
     816:	61 95       	neg	r22
     818:	7f 4f       	sbci	r23, 0xFF	; 255
     81a:	88 27       	eor	r24, r24
     81c:	77 fd       	sbrc	r23, 7
     81e:	80 95       	com	r24
     820:	98 2f       	mov	r25, r24
     822:	0e 94 c1 07 	call	0xf82	; 0xf82 <__floatsisf>
     826:	4b 01       	movw	r8, r22
     828:	5c 01       	movw	r10, r24
     82a:	f3 01       	movw	r30, r6
     82c:	66 83       	std	Z+6, r22	; 0x06
     82e:	77 83       	std	Z+7, r23	; 0x07
     830:	80 87       	std	Z+8, r24	; 0x08
     832:	91 87       	std	Z+9, r25	; 0x09
		factor = (angle - 3*PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle < 0 && angle > -PI/4) {
		factor = 1 - angle*(-1)/(PI/4);
     834:	c7 01       	movw	r24, r14
     836:	b6 01       	movw	r22, r12
     838:	2b ed       	ldi	r18, 0xDB	; 219
     83a:	3f e0       	ldi	r19, 0x0F	; 15
     83c:	49 e4       	ldi	r20, 0x49	; 73
     83e:	5f e3       	ldi	r21, 0x3F	; 63
     840:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	40 e8       	ldi	r20, 0x80	; 128
     84a:	5f e3       	ldi	r21, 0x3F	; 63
     84c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__addsf3>
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
     850:	a5 01       	movw	r20, r10
     852:	94 01       	movw	r18, r8
     854:	0e 94 a1 08 	call	0x1142	; 0x1142 <__mulsf3>
     858:	dc 01       	movw	r26, r24
     85a:	cb 01       	movw	r24, r22
     85c:	f3 01       	movw	r30, r6
     85e:	82 83       	std	Z+2, r24	; 0x02
     860:	93 83       	std	Z+3, r25	; 0x03
     862:	a4 83       	std	Z+4, r26	; 0x04
     864:	b5 83       	std	Z+5, r27	; 0x05
     866:	bd c0       	rjmp	.+378    	; 0x9e2 <setThrottles+0x446>
		
	} else if (angle <= -PI/4 && angle > -PI/2) {
     868:	c7 01       	movw	r24, r14
     86a:	b6 01       	movw	r22, r12
     86c:	2b ed       	ldi	r18, 0xDB	; 219
     86e:	3f e0       	ldi	r19, 0x0F	; 15
     870:	49 e4       	ldi	r20, 0x49	; 73
     872:	5f eb       	ldi	r21, 0xBF	; 191
     874:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     878:	18 16       	cp	r1, r24
     87a:	cc f1       	brlt	.+114    	; 0x8ee <setThrottles+0x352>
     87c:	c7 01       	movw	r24, r14
     87e:	b6 01       	movw	r22, r12
     880:	2b ed       	ldi	r18, 0xDB	; 219
     882:	3f e0       	ldi	r19, 0x0F	; 15
     884:	49 ec       	ldi	r20, 0xC9	; 201
     886:	5f eb       	ldi	r21, 0xBF	; 191
     888:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     88c:	18 16       	cp	r1, r24
     88e:	7c f5       	brge	.+94     	; 0x8ee <setThrottles+0x352>
		factor = (angle*(-1) - PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
     890:	60 2f       	mov	r22, r16
     892:	71 2f       	mov	r23, r17
     894:	77 23       	and	r23, r23
     896:	1c f4       	brge	.+6      	; 0x89e <setThrottles+0x302>
     898:	70 95       	com	r23
     89a:	61 95       	neg	r22
     89c:	7f 4f       	sbci	r23, 0xFF	; 255
     89e:	88 27       	eor	r24, r24
     8a0:	77 fd       	sbrc	r23, 7
     8a2:	80 95       	com	r24
     8a4:	98 2f       	mov	r25, r24
     8a6:	0e 94 c1 07 	call	0xf82	; 0xf82 <__floatsisf>
     8aa:	4b 01       	movw	r8, r22
     8ac:	5c 01       	movw	r10, r24
     8ae:	f3 01       	movw	r30, r6
     8b0:	66 83       	std	Z+6, r22	; 0x06
     8b2:	77 83       	std	Z+7, r23	; 0x07
     8b4:	80 87       	std	Z+8, r24	; 0x08
     8b6:	91 87       	std	Z+9, r25	; 0x09
		factor = 1 - angle*(-1)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle <= -PI/4 && angle > -PI/2) {
		factor = (angle*(-1) - PI/4)/(PI/4);
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	90 58       	subi	r25, 0x80	; 128
     8be:	2b ed       	ldi	r18, 0xDB	; 219
     8c0:	3f e0       	ldi	r19, 0x0F	; 15
     8c2:	49 e4       	ldi	r20, 0x49	; 73
     8c4:	5f e3       	ldi	r21, 0x3F	; 63
     8c6:	0e 94 8c 06 	call	0xd18	; 0xd18 <__subsf3>
     8ca:	2b ed       	ldi	r18, 0xDB	; 219
     8cc:	3f e0       	ldi	r19, 0x0F	; 15
     8ce:	49 e4       	ldi	r20, 0x49	; 73
     8d0:	5f e3       	ldi	r21, 0x3F	; 63
     8d2:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
     8d6:	a5 01       	movw	r20, r10
     8d8:	94 01       	movw	r18, r8
     8da:	0e 94 a1 08 	call	0x1142	; 0x1142 <__mulsf3>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	f3 01       	movw	r30, r6
     8e4:	82 83       	std	Z+2, r24	; 0x02
     8e6:	93 83       	std	Z+3, r25	; 0x03
     8e8:	a4 83       	std	Z+4, r26	; 0x04
     8ea:	b5 83       	std	Z+5, r27	; 0x05
     8ec:	7a c0       	rjmp	.+244    	; 0x9e2 <setThrottles+0x446>
		
	} else if (angle <= -PI/2 && angle > -3*PI/4) {
     8ee:	c7 01       	movw	r24, r14
     8f0:	b6 01       	movw	r22, r12
     8f2:	2b ed       	ldi	r18, 0xDB	; 219
     8f4:	3f e0       	ldi	r19, 0x0F	; 15
     8f6:	49 ec       	ldi	r20, 0xC9	; 201
     8f8:	5f eb       	ldi	r21, 0xBF	; 191
     8fa:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     8fe:	18 16       	cp	r1, r24
     900:	0c f4       	brge	.+2      	; 0x904 <setThrottles+0x368>
     902:	41 c0       	rjmp	.+130    	; 0x986 <setThrottles+0x3ea>
     904:	c7 01       	movw	r24, r14
     906:	b6 01       	movw	r22, r12
     908:	24 ee       	ldi	r18, 0xE4	; 228
     90a:	3b ec       	ldi	r19, 0xCB	; 203
     90c:	46 e1       	ldi	r20, 0x16	; 22
     90e:	50 ec       	ldi	r21, 0xC0	; 192
     910:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     914:	18 16       	cp	r1, r24
     916:	bc f5       	brge	.+110    	; 0x986 <setThrottles+0x3ea>
		factor = 1 - (angle*(-1) - PI/2)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
     918:	60 2f       	mov	r22, r16
     91a:	71 2f       	mov	r23, r17
     91c:	77 23       	and	r23, r23
     91e:	1c f4       	brge	.+6      	; 0x926 <setThrottles+0x38a>
     920:	70 95       	com	r23
     922:	61 95       	neg	r22
     924:	7f 4f       	sbci	r23, 0xFF	; 255
     926:	88 27       	eor	r24, r24
     928:	77 fd       	sbrc	r23, 7
     92a:	80 95       	com	r24
     92c:	98 2f       	mov	r25, r24
     92e:	0e 94 c1 07 	call	0xf82	; 0xf82 <__floatsisf>
     932:	4b 01       	movw	r8, r22
     934:	5c 01       	movw	r10, r24
     936:	f3 01       	movw	r30, r6
     938:	62 83       	std	Z+2, r22	; 0x02
     93a:	73 83       	std	Z+3, r23	; 0x03
     93c:	84 83       	std	Z+4, r24	; 0x04
     93e:	95 83       	std	Z+5, r25	; 0x05
		factor = (angle*(-1) - PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle <= -PI/2 && angle > -3*PI/4) {
		factor = 1 - (angle*(-1) - PI/2)/(PI/4);
     940:	c7 01       	movw	r24, r14
     942:	b6 01       	movw	r22, r12
     944:	90 58       	subi	r25, 0x80	; 128
     946:	2b ed       	ldi	r18, 0xDB	; 219
     948:	3f e0       	ldi	r19, 0x0F	; 15
     94a:	49 ec       	ldi	r20, 0xC9	; 201
     94c:	5f e3       	ldi	r21, 0x3F	; 63
     94e:	0e 94 8c 06 	call	0xd18	; 0xd18 <__subsf3>
     952:	2b ed       	ldi	r18, 0xDB	; 219
     954:	3f e0       	ldi	r19, 0x0F	; 15
     956:	49 e4       	ldi	r20, 0x49	; 73
     958:	5f e3       	ldi	r21, 0x3F	; 63
     95a:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	80 e8       	ldi	r24, 0x80	; 128
     968:	9f e3       	ldi	r25, 0x3F	; 63
     96a:	0e 94 8c 06 	call	0xd18	; 0xd18 <__subsf3>
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
     96e:	a5 01       	movw	r20, r10
     970:	94 01       	movw	r18, r8
     972:	0e 94 a1 08 	call	0x1142	; 0x1142 <__mulsf3>
     976:	dc 01       	movw	r26, r24
     978:	cb 01       	movw	r24, r22
     97a:	f3 01       	movw	r30, r6
     97c:	86 83       	std	Z+6, r24	; 0x06
     97e:	97 83       	std	Z+7, r25	; 0x07
     980:	a0 87       	std	Z+8, r26	; 0x08
     982:	b1 87       	std	Z+9, r27	; 0x09
     984:	2e c0       	rjmp	.+92     	; 0x9e2 <setThrottles+0x446>
		
	} else {
		factor = (angle*(-1) - 3*PI/4)/(PI/4);
		edata->left_engine_throttle = (double)abs(x_value);
     986:	6c 2f       	mov	r22, r28
     988:	7d 2f       	mov	r23, r29
     98a:	77 23       	and	r23, r23
     98c:	1c f4       	brge	.+6      	; 0x994 <setThrottles+0x3f8>
     98e:	70 95       	com	r23
     990:	61 95       	neg	r22
     992:	7f 4f       	sbci	r23, 0xFF	; 255
     994:	88 27       	eor	r24, r24
     996:	77 fd       	sbrc	r23, 7
     998:	80 95       	com	r24
     99a:	98 2f       	mov	r25, r24
     99c:	0e 94 c1 07 	call	0xf82	; 0xf82 <__floatsisf>
     9a0:	4b 01       	movw	r8, r22
     9a2:	5c 01       	movw	r10, r24
     9a4:	f3 01       	movw	r30, r6
     9a6:	62 83       	std	Z+2, r22	; 0x02
     9a8:	73 83       	std	Z+3, r23	; 0x03
     9aa:	84 83       	std	Z+4, r24	; 0x04
     9ac:	95 83       	std	Z+5, r25	; 0x05
		factor = 1 - (angle*(-1) - PI/2)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
		
	} else {
		factor = (angle*(-1) - 3*PI/4)/(PI/4);
     9ae:	c7 01       	movw	r24, r14
     9b0:	b6 01       	movw	r22, r12
     9b2:	90 58       	subi	r25, 0x80	; 128
     9b4:	24 ee       	ldi	r18, 0xE4	; 228
     9b6:	3b ec       	ldi	r19, 0xCB	; 203
     9b8:	46 e1       	ldi	r20, 0x16	; 22
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 8c 06 	call	0xd18	; 0xd18 <__subsf3>
     9c0:	2b ed       	ldi	r18, 0xDB	; 219
     9c2:	3f e0       	ldi	r19, 0x0F	; 15
     9c4:	49 e4       	ldi	r20, 0x49	; 73
     9c6:	5f e3       	ldi	r21, 0x3F	; 63
     9c8:	0e 94 57 07 	call	0xeae	; 0xeae <__divsf3>
		edata->left_engine_throttle = (double)abs(x_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
     9cc:	a5 01       	movw	r20, r10
     9ce:	94 01       	movw	r18, r8
     9d0:	0e 94 a1 08 	call	0x1142	; 0x1142 <__mulsf3>
     9d4:	dc 01       	movw	r26, r24
     9d6:	cb 01       	movw	r24, r22
     9d8:	f3 01       	movw	r30, r6
     9da:	86 83       	std	Z+6, r24	; 0x06
     9dc:	97 83       	std	Z+7, r25	; 0x07
     9de:	a0 87       	std	Z+8, r26	; 0x08
     9e0:	b1 87       	std	Z+9, r27	; 0x09
	}
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	bf 90       	pop	r11
     9f4:	af 90       	pop	r10
     9f6:	9f 90       	pop	r9
     9f8:	8f 90       	pop	r8
     9fa:	7f 90       	pop	r7
     9fc:	6f 90       	pop	r6
     9fe:	08 95       	ret

00000a00 <compactData>:
* Input:	edata: engine_data - The engine data.
* Output:	unsigned char - The compressed data to be sent.
* Description:	Adds all engine info into one byte in the form
* [dir. left (1 bit)][throttle left (3 bit)][dir. right (1 bit)][throttle right (3 bit)].
*/
unsigned char compactData(engine_data *edata) {
     a00:	cf 92       	push	r12
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	8c 01       	movw	r16, r24
	
	unsigned char send_data;
	
	/* Place the left engine throttle data in send_data. */ 
	if (edata->left_engine_throttle >= 6.5) {
     a10:	fc 01       	movw	r30, r24
     a12:	c2 80       	ldd	r12, Z+2	; 0x02
     a14:	d3 80       	ldd	r13, Z+3	; 0x03
     a16:	e4 80       	ldd	r14, Z+4	; 0x04
     a18:	f5 80       	ldd	r15, Z+5	; 0x05
     a1a:	c7 01       	movw	r24, r14
     a1c:	b6 01       	movw	r22, r12
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 ed       	ldi	r20, 0xD0	; 208
     a24:	50 e4       	ldi	r21, 0x40	; 64
     a26:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     a2a:	88 23       	and	r24, r24
     a2c:	0c f0       	brlt	.+2      	; 0xa30 <compactData+0x30>
     a2e:	3f c0       	rjmp	.+126    	; 0xaae <compactData+0xae>
		send_data = (unsigned char) 7;
	} else if (edata->left_engine_throttle >= 5.5) {
     a30:	c7 01       	movw	r24, r14
     a32:	b6 01       	movw	r22, r12
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	40 eb       	ldi	r20, 0xB0	; 176
     a3a:	50 e4       	ldi	r21, 0x40	; 64
     a3c:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     a40:	88 23       	and	r24, r24
     a42:	bc f5       	brge	.+110    	; 0xab2 <compactData+0xb2>
		send_data = (unsigned char) 6;
	} else if (edata->left_engine_throttle >= 4.5) {
     a44:	c7 01       	movw	r24, r14
     a46:	b6 01       	movw	r22, r12
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e9       	ldi	r20, 0x90	; 144
     a4e:	50 e4       	ldi	r21, 0x40	; 64
     a50:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     a54:	88 23       	and	r24, r24
     a56:	7c f5       	brge	.+94     	; 0xab6 <compactData+0xb6>
		send_data = (unsigned char) 5;
	} else if (edata->left_engine_throttle >= 3.5) {
     a58:	c7 01       	movw	r24, r14
     a5a:	b6 01       	movw	r22, r12
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e6       	ldi	r20, 0x60	; 96
     a62:	50 e4       	ldi	r21, 0x40	; 64
     a64:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     a68:	88 23       	and	r24, r24
     a6a:	3c f5       	brge	.+78     	; 0xaba <compactData+0xba>
		send_data = (unsigned char) 4;
	} else if (edata->left_engine_throttle >= 2.5) {
     a6c:	c7 01       	movw	r24, r14
     a6e:	b6 01       	movw	r22, r12
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	40 e2       	ldi	r20, 0x20	; 32
     a76:	50 e4       	ldi	r21, 0x40	; 64
     a78:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     a7c:	88 23       	and	r24, r24
     a7e:	fc f4       	brge	.+62     	; 0xabe <compactData+0xbe>
		send_data = (unsigned char) 3;
	} else if (edata->left_engine_throttle >= 1.5) {
     a80:	c7 01       	movw	r24, r14
     a82:	b6 01       	movw	r22, r12
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 ec       	ldi	r20, 0xC0	; 192
     a8a:	5f e3       	ldi	r21, 0x3F	; 63
     a8c:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     a90:	88 23       	and	r24, r24
     a92:	bc f4       	brge	.+46     	; 0xac2 <compactData+0xc2>
	
	unsigned char send_data;
	
	/* Place the left engine throttle data in send_data. */ 
	if (edata->left_engine_throttle >= 6.5) {
		send_data = (unsigned char) 7;
     a94:	c1 e0       	ldi	r28, 0x01	; 1
     a96:	c7 01       	movw	r24, r14
     a98:	b6 01       	movw	r22, r12
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	5f e3       	ldi	r21, 0x3F	; 63
     aa2:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     aa6:	88 23       	and	r24, r24
     aa8:	6c f4       	brge	.+26     	; 0xac4 <compactData+0xc4>
     aaa:	c0 e0       	ldi	r28, 0x00	; 0
     aac:	0b c0       	rjmp	.+22     	; 0xac4 <compactData+0xc4>
     aae:	c7 e0       	ldi	r28, 0x07	; 7
     ab0:	09 c0       	rjmp	.+18     	; 0xac4 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 5.5) {
		send_data = (unsigned char) 6;
     ab2:	c6 e0       	ldi	r28, 0x06	; 6
     ab4:	07 c0       	rjmp	.+14     	; 0xac4 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 4.5) {
		send_data = (unsigned char) 5;
     ab6:	c5 e0       	ldi	r28, 0x05	; 5
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 3.5) {
		send_data = (unsigned char) 4;
     aba:	c4 e0       	ldi	r28, 0x04	; 4
     abc:	03 c0       	rjmp	.+6      	; 0xac4 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 2.5) {
		send_data = (unsigned char) 3;
     abe:	c3 e0       	ldi	r28, 0x03	; 3
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 1.5) {
		send_data = (unsigned char) 2;
     ac2:	c2 e0       	ldi	r28, 0x02	; 2
		send_data = (unsigned char) 0;
	}
	
	/* Shift data four steps, which puts the left engine throttle 
	 * information in bit 6, 5 and 4. */
	send_data = send_data << 4;
     ac4:	c2 95       	swap	r28
     ac6:	c0 7f       	andi	r28, 0xF0	; 240

	/* Put the right engine throttle information in the three lowest bits. */
	if (edata->right_engine_throttle >= 6.5) {
     ac8:	f8 01       	movw	r30, r16
     aca:	c6 80       	ldd	r12, Z+6	; 0x06
     acc:	d7 80       	ldd	r13, Z+7	; 0x07
     ace:	e0 84       	ldd	r14, Z+8	; 0x08
     ad0:	f1 84       	ldd	r15, Z+9	; 0x09
     ad2:	c7 01       	movw	r24, r14
     ad4:	b6 01       	movw	r22, r12
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	40 ed       	ldi	r20, 0xD0	; 208
     adc:	50 e4       	ldi	r21, 0x40	; 64
     ade:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     ae2:	88 23       	and	r24, r24
     ae4:	14 f0       	brlt	.+4      	; 0xaea <compactData+0xea>
		send_data = send_data | (unsigned char) 7;
     ae6:	c7 60       	ori	r28, 0x07	; 7
     ae8:	47 c0       	rjmp	.+142    	; 0xb78 <compactData+0x178>
	} else if (edata->right_engine_throttle >= 5.5) {
     aea:	c7 01       	movw	r24, r14
     aec:	b6 01       	movw	r22, r12
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 eb       	ldi	r20, 0xB0	; 176
     af4:	50 e4       	ldi	r21, 0x40	; 64
     af6:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     afa:	88 23       	and	r24, r24
     afc:	14 f0       	brlt	.+4      	; 0xb02 <compactData+0x102>
		send_data = send_data | (unsigned char) 6;
     afe:	c6 60       	ori	r28, 0x06	; 6
     b00:	3b c0       	rjmp	.+118    	; 0xb78 <compactData+0x178>
	} else if (edata->right_engine_throttle >= 4.5) {
     b02:	c7 01       	movw	r24, r14
     b04:	b6 01       	movw	r22, r12
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e9       	ldi	r20, 0x90	; 144
     b0c:	50 e4       	ldi	r21, 0x40	; 64
     b0e:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     b12:	88 23       	and	r24, r24
     b14:	14 f0       	brlt	.+4      	; 0xb1a <compactData+0x11a>
		send_data = send_data | (unsigned char) 5;
     b16:	c5 60       	ori	r28, 0x05	; 5
     b18:	2f c0       	rjmp	.+94     	; 0xb78 <compactData+0x178>
	} else if (edata->right_engine_throttle >= 3.5) {
     b1a:	c7 01       	movw	r24, r14
     b1c:	b6 01       	movw	r22, r12
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	40 e6       	ldi	r20, 0x60	; 96
     b24:	50 e4       	ldi	r21, 0x40	; 64
     b26:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     b2a:	88 23       	and	r24, r24
     b2c:	14 f0       	brlt	.+4      	; 0xb32 <compactData+0x132>
		send_data = send_data | (unsigned char) 4;
     b2e:	c4 60       	ori	r28, 0x04	; 4
     b30:	23 c0       	rjmp	.+70     	; 0xb78 <compactData+0x178>
	} else if (edata->right_engine_throttle >= 2.5) {
     b32:	c7 01       	movw	r24, r14
     b34:	b6 01       	movw	r22, r12
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e2       	ldi	r20, 0x20	; 32
     b3c:	50 e4       	ldi	r21, 0x40	; 64
     b3e:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     b42:	88 23       	and	r24, r24
     b44:	14 f0       	brlt	.+4      	; 0xb4a <compactData+0x14a>
		send_data = send_data | (unsigned char) 3;
     b46:	c3 60       	ori	r28, 0x03	; 3
     b48:	17 c0       	rjmp	.+46     	; 0xb78 <compactData+0x178>
	} else if (edata->right_engine_throttle >= 1.5) {
     b4a:	c7 01       	movw	r24, r14
     b4c:	b6 01       	movw	r22, r12
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 ec       	ldi	r20, 0xC0	; 192
     b54:	5f e3       	ldi	r21, 0x3F	; 63
     b56:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     b5a:	88 23       	and	r24, r24
     b5c:	14 f0       	brlt	.+4      	; 0xb62 <compactData+0x162>
		send_data = send_data | (unsigned char) 2;
     b5e:	c2 60       	ori	r28, 0x02	; 2
     b60:	0b c0       	rjmp	.+22     	; 0xb78 <compactData+0x178>
	} else if (edata->right_engine_throttle >= 0.5) {
     b62:	c7 01       	movw	r24, r14
     b64:	b6 01       	movw	r22, r12
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	5f e3       	ldi	r21, 0x3F	; 63
     b6e:	0e 94 96 08 	call	0x112c	; 0x112c <__gesf2>
     b72:	88 23       	and	r24, r24
     b74:	0c f0       	brlt	.+2      	; 0xb78 <compactData+0x178>
		send_data = send_data | (unsigned char) 1;
     b76:	c1 60       	ori	r28, 0x01	; 1
		send_data = send_data | (unsigned char) 0;
	}
	
	/* Set the direction information in bit 7 for the left engine
	 * and bit 3 for the right engine. */
	if (edata->left_engine_dir == FORWARD) {
     b78:	f8 01       	movw	r30, r16
     b7a:	80 81       	ld	r24, Z
     b7c:	88 23       	and	r24, r24
     b7e:	09 f4       	brne	.+2      	; 0xb82 <compactData+0x182>
		send_data = send_data | (1<<7);
     b80:	c0 68       	ori	r28, 0x80	; 128
	} else {
		send_data = send_data | (0<<7);
	}
	
	if (edata->right_engine_dir == FORWARD) {
     b82:	f8 01       	movw	r30, r16
     b84:	81 81       	ldd	r24, Z+1	; 0x01
     b86:	88 23       	and	r24, r24
     b88:	09 f4       	brne	.+2      	; 0xb8c <compactData+0x18c>
		send_data = send_data | (1<<3);
     b8a:	c8 60       	ori	r28, 0x08	; 8
	} else {
		send_data = send_data | (0<<3);
	}
	
	return send_data;
}
     b8c:	8c 2f       	mov	r24, r28
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	08 95       	ret

00000b9e <sleepMode>:
* Description: Enters sleep mode.
*/
void sleepMode() {
	
	/* Clear global interrupt flag. */
	cli();
     b9e:	f8 94       	cli
	
	/* Initialize low interrupt on INT0 in order for the MCU to be awoken. */
	initOnInterrupt();
     ba0:	0e 94 20 01 	call	0x240	; 0x240 <initOnInterrupt>
	
	/* Turn off power to voltage regulator that powers bluetooth and GPS units. */
	PORTA &= ~_BV(POWER_PORT_3V);
     ba4:	12 98       	cbi	0x02, 2	; 2
	PORTA &= ~_BV(POWER_PORT_5V);
     ba6:	13 98       	cbi	0x02, 3	; 2
	
	/* Turn off leds that indicate power and steering. */
	PORTB &= ~_BV(POWER_CONTROL);
     ba8:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~_BV(STEER_CONTROL);
     baa:	29 98       	cbi	0x05, 1	; 5
	
	/* Set output pins to input in order to save more power. */
	DDRA &= ~_BV(POWER_PORT_3V);
     bac:	0a 98       	cbi	0x01, 2	; 1
	DDRA &= ~_BV(POWER_PORT_5V);
     bae:	0b 98       	cbi	0x01, 3	; 1
	DDRB &= ~_BV(POWER_CONTROL);
     bb0:	20 98       	cbi	0x04, 0	; 4
	DDRB &= ~_BV(STEER_CONTROL);
     bb2:	21 98       	cbi	0x04, 1	; 4
	DDRD &= ~_BV(LED_PIN2);
	DDRD &= ~_BV(LED_PIN1);
*/

	/* Set sleep mode and enable sleep setup. */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     bb4:	83 b7       	in	r24, 0x33	; 51
     bb6:	81 7f       	andi	r24, 0xF1	; 241
     bb8:	84 60       	ori	r24, 0x04	; 4
     bba:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     bbc:	83 b7       	in	r24, 0x33	; 51
     bbe:	81 60       	ori	r24, 0x01	; 1
     bc0:	83 bf       	out	0x33, r24	; 51
	
	/* Disable ADC, watchdog and BOD. */
	ADCSRA = 0;
     bc2:	10 92 7a 00 	sts	0x007A, r1
	wdt_disable();
     bc6:	88 e1       	ldi	r24, 0x18	; 24
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	80 93 60 00 	sts	0x0060, r24
     bd0:	10 92 60 00 	sts	0x0060, r1
     bd4:	0f be       	out	0x3f, r0	; 63
	sleep_bod_disable();
     bd6:	85 b7       	in	r24, 0x35	; 53
     bd8:	80 66       	ori	r24, 0x60	; 96
     bda:	85 bf       	out	0x35, r24	; 53
     bdc:	8f 7d       	andi	r24, 0xDF	; 223
     bde:	85 bf       	out	0x35, r24	; 53
	
	/* Set global interrupt flag to allow waking signals from
	 * the external interrupt and power down MCU. */
	sei();
     be0:	78 94       	sei
	sleep_cpu();
     be2:	88 95       	sleep
	
	/* Wake up here and disable sleep setup mode. */
	sleep_disable();
     be4:	83 b7       	in	r24, 0x33	; 51
     be6:	8e 7f       	andi	r24, 0xFE	; 254
     be8:	83 bf       	out	0x33, r24	; 51
	
	/* Re-initialize. */
	init();
     bea:	0e 94 74 01 	call	0x2e8	; 0x2e8 <init>
     bee:	08 95       	ret

00000bf0 <main>:

/* Global joystick coordinate variables. */
int x_value;
int y_value;

int main(void) {
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	2a 97       	sbiw	r28, 0x0a	; 10
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
    /* Engine data container. */
	engine_data *edata, ed;
	edata = &ed;
	
	/* Initialize setup. */
	init();
     c04:	0e 94 74 01 	call	0x2e8	; 0x2e8 <init>
		
		} else {
			// Get steering info from GPS unit
		}
		
		parseGPS();
     c08:	0f 2e       	mov	r0, r31
     c0a:	f2 e1       	ldi	r31, 0x12	; 18
     c0c:	6f 2e       	mov	r6, r31
     c0e:	f1 e0       	ldi	r31, 0x01	; 1
     c10:	7f 2e       	mov	r7, r31
     c12:	f0 2d       	mov	r31, r0

/* Global joystick coordinate variables. */
int x_value;
int y_value;

int main(void) {
     c14:	0f 2e       	mov	r0, r31
     c16:	f9 e0       	ldi	r31, 0x09	; 9
     c18:	cf 2e       	mov	r12, r31
     c1a:	dd 24       	eor	r13, r13
     c1c:	f0 2d       	mov	r31, r0
     c1e:	c6 0c       	add	r12, r6
     c20:	d7 1c       	adc	r13, r7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c22:	0f 2e       	mov	r0, r31
     c24:	f8 e0       	ldi	r31, 0x08	; 8
     c26:	4f 2e       	mov	r4, r31
     c28:	f1 e0       	ldi	r31, 0x01	; 1
     c2a:	5f 2e       	mov	r5, r31
     c2c:	f0 2d       	mov	r31, r0
     c2e:	0f 2e       	mov	r0, r31
     c30:	fa e0       	ldi	r31, 0x0A	; 10
     c32:	ef 2e       	mov	r14, r31
     c34:	ff 24       	eor	r15, r15
     c36:	f0 2d       	mov	r31, r0
     c38:	e4 0c       	add	r14, r4
     c3a:	f5 1c       	adc	r15, r5
	init();

	/* Main loop. */
	while (1) {
		
		if (steer == MAN) {
     c3c:	80 91 1c 01 	lds	r24, 0x011C
     c40:	88 23       	and	r24, r24
     c42:	e1 f5       	brne	.+120    	; 0xcbc <main+0xcc>
			
			/* Get coordinates. */
			x_value = getXValue();
     c44:	0e 94 c3 01 	call	0x386	; 0x386 <getXValue>
     c48:	90 93 1e 01 	sts	0x011E, r25
     c4c:	80 93 1d 01 	sts	0x011D, r24
			y_value = getYValue();
     c50:	0e 94 28 02 	call	0x450	; 0x450 <getYValue>
     c54:	90 93 20 01 	sts	0x0120, r25
     c58:	80 93 1f 01 	sts	0x011F, r24
		
			/* Calculate angle of the position in a coordinate system. */
			double angle = atan2((double)y_value, (double)x_value);
     c5c:	9c 01       	movw	r18, r24
     c5e:	b9 01       	movw	r22, r18
     c60:	88 27       	eor	r24, r24
     c62:	77 fd       	sbrc	r23, 7
     c64:	80 95       	com	r24
     c66:	98 2f       	mov	r25, r24
     c68:	0e 94 c1 07 	call	0xf82	; 0xf82 <__floatsisf>
     c6c:	4b 01       	movw	r8, r22
     c6e:	5c 01       	movw	r10, r24
     c70:	60 91 1d 01 	lds	r22, 0x011D
     c74:	70 91 1e 01 	lds	r23, 0x011E
     c78:	88 27       	eor	r24, r24
     c7a:	77 fd       	sbrc	r23, 7
     c7c:	80 95       	com	r24
     c7e:	98 2f       	mov	r25, r24
     c80:	0e 94 c1 07 	call	0xf82	; 0xf82 <__floatsisf>
     c84:	9b 01       	movw	r18, r22
     c86:	ac 01       	movw	r20, r24
     c88:	c5 01       	movw	r24, r10
     c8a:	b4 01       	movw	r22, r8
     c8c:	0e 94 00 07 	call	0xe00	; 0xe00 <atan2>
     c90:	4b 01       	movw	r8, r22
     c92:	5c 01       	movw	r10, r24
		
			/* Set all info in edata. */
			setDirections(edata, angle);
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	b5 01       	movw	r22, r10
     c9a:	a4 01       	movw	r20, r8
     c9c:	0e 94 8e 02 	call	0x51c	; 0x51c <setDirections>
			setThrottles(edata, angle, x_value, y_value);
     ca0:	20 91 1d 01 	lds	r18, 0x011D
     ca4:	30 91 1e 01 	lds	r19, 0x011E
     ca8:	00 91 1f 01 	lds	r16, 0x011F
     cac:	10 91 20 01 	lds	r17, 0x0120
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	b5 01       	movw	r22, r10
     cb6:	a4 01       	movw	r20, r8
     cb8:	0e 94 ce 02 	call	0x59c	; 0x59c <setThrottles>
		
		} else {
			// Get steering info from GPS unit
		}
		
		parseGPS();
     cbc:	0e 94 92 00 	call	0x124	; 0x124 <parseGPS>
     cc0:	83 01       	movw	r16, r6
		
		for (int i = 0; i < 9; i++) {
			USART_Transmit(latitude[i]);
     cc2:	d8 01       	movw	r26, r16
     cc4:	8d 91       	ld	r24, X+
     cc6:	8d 01       	movw	r16, r26
     cc8:	0e 94 9e 01 	call	0x33c	; 0x33c <USART_Transmit>
			// Get steering info from GPS unit
		}
		
		parseGPS();
		
		for (int i = 0; i < 9; i++) {
     ccc:	0c 15       	cp	r16, r12
     cce:	1d 05       	cpc	r17, r13
     cd0:	c1 f7       	brne	.-16     	; 0xcc2 <main+0xd2>
     cd2:	8f e3       	ldi	r24, 0x3F	; 63
     cd4:	9d e0       	ldi	r25, 0x0D	; 13
     cd6:	a3 e0       	ldi	r26, 0x03	; 3
     cd8:	81 50       	subi	r24, 0x01	; 1
     cda:	90 40       	sbci	r25, 0x00	; 0
     cdc:	a0 40       	sbci	r26, 0x00	; 0
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <main+0xe8>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <main+0xf2>
     ce2:	00 00       	nop
     ce4:	82 01       	movw	r16, r4
		}
				
		_delay_ms(1000);
		
		for (int i = 0; i < 10; i++) {
			USART_Transmit(longitude[i]);
     ce6:	d8 01       	movw	r26, r16
     ce8:	8d 91       	ld	r24, X+
     cea:	8d 01       	movw	r16, r26
     cec:	0e 94 9e 01 	call	0x33c	; 0x33c <USART_Transmit>
			USART_Transmit(latitude[i]);
		}
				
		_delay_ms(1000);
		
		for (int i = 0; i < 10; i++) {
     cf0:	0e 15       	cp	r16, r14
     cf2:	1f 05       	cpc	r17, r15
     cf4:	c1 f7       	brne	.-16     	; 0xce6 <main+0xf6>
     cf6:	8f e3       	ldi	r24, 0x3F	; 63
     cf8:	9d e0       	ldi	r25, 0x0D	; 13
     cfa:	a3 e0       	ldi	r26, 0x03	; 3
     cfc:	81 50       	subi	r24, 0x01	; 1
     cfe:	90 40       	sbci	r25, 0x00	; 0
     d00:	a0 40       	sbci	r26, 0x00	; 0
     d02:	e1 f7       	brne	.-8      	; 0xcfc <main+0x10c>
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <main+0x116>
     d06:	00 00       	nop
		}
		
		_delay_ms(1000);
		
		/* Check if sleep mode is to be activated. */
		if (power == OFF) {
     d08:	80 91 1b 01 	lds	r24, 0x011B
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	09 f0       	breq	.+2      	; 0xd12 <main+0x122>
     d10:	95 cf       	rjmp	.-214    	; 0xc3c <main+0x4c>
			sleepMode();
     d12:	0e 94 cf 05 	call	0xb9e	; 0xb9e <sleepMode>
     d16:	92 cf       	rjmp	.-220    	; 0xc3c <main+0x4c>

00000d18 <__subsf3>:
     d18:	50 58       	subi	r21, 0x80	; 128

00000d1a <__addsf3>:
     d1a:	bb 27       	eor	r27, r27
     d1c:	aa 27       	eor	r26, r26
     d1e:	0e d0       	rcall	.+28     	; 0xd3c <__addsf3x>
     d20:	cb c1       	rjmp	.+918    	; 0x10b8 <__fp_round>
     d22:	bc d1       	rcall	.+888    	; 0x109c <__fp_pscA>
     d24:	30 f0       	brcs	.+12     	; 0xd32 <__addsf3+0x18>
     d26:	c1 d1       	rcall	.+898    	; 0x10aa <__fp_pscB>
     d28:	20 f0       	brcs	.+8      	; 0xd32 <__addsf3+0x18>
     d2a:	31 f4       	brne	.+12     	; 0xd38 <__addsf3+0x1e>
     d2c:	9f 3f       	cpi	r25, 0xFF	; 255
     d2e:	11 f4       	brne	.+4      	; 0xd34 <__addsf3+0x1a>
     d30:	1e f4       	brtc	.+6      	; 0xd38 <__addsf3+0x1e>
     d32:	8c c1       	rjmp	.+792    	; 0x104c <__fp_nan>
     d34:	0e f4       	brtc	.+2      	; 0xd38 <__addsf3+0x1e>
     d36:	e0 95       	com	r30
     d38:	e7 fb       	bst	r30, 7
     d3a:	82 c1       	rjmp	.+772    	; 0x1040 <__fp_inf>

00000d3c <__addsf3x>:
     d3c:	e9 2f       	mov	r30, r25
     d3e:	cd d1       	rcall	.+922    	; 0x10da <__fp_split3>
     d40:	80 f3       	brcs	.-32     	; 0xd22 <__addsf3+0x8>
     d42:	ba 17       	cp	r27, r26
     d44:	62 07       	cpc	r22, r18
     d46:	73 07       	cpc	r23, r19
     d48:	84 07       	cpc	r24, r20
     d4a:	95 07       	cpc	r25, r21
     d4c:	18 f0       	brcs	.+6      	; 0xd54 <__addsf3x+0x18>
     d4e:	71 f4       	brne	.+28     	; 0xd6c <__addsf3x+0x30>
     d50:	9e f5       	brtc	.+102    	; 0xdb8 <__addsf3x+0x7c>
     d52:	e5 c1       	rjmp	.+970    	; 0x111e <__fp_zero>
     d54:	0e f4       	brtc	.+2      	; 0xd58 <__addsf3x+0x1c>
     d56:	e0 95       	com	r30
     d58:	0b 2e       	mov	r0, r27
     d5a:	ba 2f       	mov	r27, r26
     d5c:	a0 2d       	mov	r26, r0
     d5e:	0b 01       	movw	r0, r22
     d60:	b9 01       	movw	r22, r18
     d62:	90 01       	movw	r18, r0
     d64:	0c 01       	movw	r0, r24
     d66:	ca 01       	movw	r24, r20
     d68:	a0 01       	movw	r20, r0
     d6a:	11 24       	eor	r1, r1
     d6c:	ff 27       	eor	r31, r31
     d6e:	59 1b       	sub	r21, r25
     d70:	99 f0       	breq	.+38     	; 0xd98 <__addsf3x+0x5c>
     d72:	59 3f       	cpi	r21, 0xF9	; 249
     d74:	50 f4       	brcc	.+20     	; 0xd8a <__addsf3x+0x4e>
     d76:	50 3e       	cpi	r21, 0xE0	; 224
     d78:	68 f1       	brcs	.+90     	; 0xdd4 <__addsf3x+0x98>
     d7a:	1a 16       	cp	r1, r26
     d7c:	f0 40       	sbci	r31, 0x00	; 0
     d7e:	a2 2f       	mov	r26, r18
     d80:	23 2f       	mov	r18, r19
     d82:	34 2f       	mov	r19, r20
     d84:	44 27       	eor	r20, r20
     d86:	58 5f       	subi	r21, 0xF8	; 248
     d88:	f3 cf       	rjmp	.-26     	; 0xd70 <__addsf3x+0x34>
     d8a:	46 95       	lsr	r20
     d8c:	37 95       	ror	r19
     d8e:	27 95       	ror	r18
     d90:	a7 95       	ror	r26
     d92:	f0 40       	sbci	r31, 0x00	; 0
     d94:	53 95       	inc	r21
     d96:	c9 f7       	brne	.-14     	; 0xd8a <__addsf3x+0x4e>
     d98:	7e f4       	brtc	.+30     	; 0xdb8 <__addsf3x+0x7c>
     d9a:	1f 16       	cp	r1, r31
     d9c:	ba 0b       	sbc	r27, r26
     d9e:	62 0b       	sbc	r22, r18
     da0:	73 0b       	sbc	r23, r19
     da2:	84 0b       	sbc	r24, r20
     da4:	ba f0       	brmi	.+46     	; 0xdd4 <__addsf3x+0x98>
     da6:	91 50       	subi	r25, 0x01	; 1
     da8:	a1 f0       	breq	.+40     	; 0xdd2 <__addsf3x+0x96>
     daa:	ff 0f       	add	r31, r31
     dac:	bb 1f       	adc	r27, r27
     dae:	66 1f       	adc	r22, r22
     db0:	77 1f       	adc	r23, r23
     db2:	88 1f       	adc	r24, r24
     db4:	c2 f7       	brpl	.-16     	; 0xda6 <__addsf3x+0x6a>
     db6:	0e c0       	rjmp	.+28     	; 0xdd4 <__addsf3x+0x98>
     db8:	ba 0f       	add	r27, r26
     dba:	62 1f       	adc	r22, r18
     dbc:	73 1f       	adc	r23, r19
     dbe:	84 1f       	adc	r24, r20
     dc0:	48 f4       	brcc	.+18     	; 0xdd4 <__addsf3x+0x98>
     dc2:	87 95       	ror	r24
     dc4:	77 95       	ror	r23
     dc6:	67 95       	ror	r22
     dc8:	b7 95       	ror	r27
     dca:	f7 95       	ror	r31
     dcc:	9e 3f       	cpi	r25, 0xFE	; 254
     dce:	08 f0       	brcs	.+2      	; 0xdd2 <__addsf3x+0x96>
     dd0:	b3 cf       	rjmp	.-154    	; 0xd38 <__addsf3+0x1e>
     dd2:	93 95       	inc	r25
     dd4:	88 0f       	add	r24, r24
     dd6:	08 f0       	brcs	.+2      	; 0xdda <__addsf3x+0x9e>
     dd8:	99 27       	eor	r25, r25
     dda:	ee 0f       	add	r30, r30
     ddc:	97 95       	ror	r25
     dde:	87 95       	ror	r24
     de0:	08 95       	ret
     de2:	5c d1       	rcall	.+696    	; 0x109c <__fp_pscA>
     de4:	58 f0       	brcs	.+22     	; 0xdfc <__addsf3x+0xc0>
     de6:	80 e8       	ldi	r24, 0x80	; 128
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	09 f4       	brne	.+2      	; 0xdee <__addsf3x+0xb2>
     dec:	9e ef       	ldi	r25, 0xFE	; 254
     dee:	5d d1       	rcall	.+698    	; 0x10aa <__fp_pscB>
     df0:	28 f0       	brcs	.+10     	; 0xdfc <__addsf3x+0xc0>
     df2:	40 e8       	ldi	r20, 0x80	; 128
     df4:	51 e0       	ldi	r21, 0x01	; 1
     df6:	59 f4       	brne	.+22     	; 0xe0e <atan2+0xe>
     df8:	5e ef       	ldi	r21, 0xFE	; 254
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <atan2+0xe>
     dfc:	27 c1       	rjmp	.+590    	; 0x104c <__fp_nan>
     dfe:	8f c1       	rjmp	.+798    	; 0x111e <__fp_zero>

00000e00 <atan2>:
     e00:	e9 2f       	mov	r30, r25
     e02:	e0 78       	andi	r30, 0x80	; 128
     e04:	6a d1       	rcall	.+724    	; 0x10da <__fp_split3>
     e06:	68 f3       	brcs	.-38     	; 0xde2 <__addsf3x+0xa6>
     e08:	09 2e       	mov	r0, r25
     e0a:	05 2a       	or	r0, r21
     e0c:	c1 f3       	breq	.-16     	; 0xdfe <__addsf3x+0xc2>
     e0e:	26 17       	cp	r18, r22
     e10:	37 07       	cpc	r19, r23
     e12:	48 07       	cpc	r20, r24
     e14:	59 07       	cpc	r21, r25
     e16:	38 f0       	brcs	.+14     	; 0xe26 <atan2+0x26>
     e18:	0e 2e       	mov	r0, r30
     e1a:	07 f8       	bld	r0, 7
     e1c:	e0 25       	eor	r30, r0
     e1e:	69 f0       	breq	.+26     	; 0xe3a <atan2+0x3a>
     e20:	e0 25       	eor	r30, r0
     e22:	e0 64       	ori	r30, 0x40	; 64
     e24:	0a c0       	rjmp	.+20     	; 0xe3a <atan2+0x3a>
     e26:	ef 63       	ori	r30, 0x3F	; 63
     e28:	07 f8       	bld	r0, 7
     e2a:	00 94       	com	r0
     e2c:	07 fa       	bst	r0, 7
     e2e:	db 01       	movw	r26, r22
     e30:	b9 01       	movw	r22, r18
     e32:	9d 01       	movw	r18, r26
     e34:	dc 01       	movw	r26, r24
     e36:	ca 01       	movw	r24, r20
     e38:	ad 01       	movw	r20, r26
     e3a:	ef 93       	push	r30
     e3c:	47 d0       	rcall	.+142    	; 0xecc <__divsf3_pse>
     e3e:	3c d1       	rcall	.+632    	; 0x10b8 <__fp_round>
     e40:	0a d0       	rcall	.+20     	; 0xe56 <atan>
     e42:	5f 91       	pop	r21
     e44:	55 23       	and	r21, r21
     e46:	31 f0       	breq	.+12     	; 0xe54 <atan2+0x54>
     e48:	2b ed       	ldi	r18, 0xDB	; 219
     e4a:	3f e0       	ldi	r19, 0x0F	; 15
     e4c:	49 e4       	ldi	r20, 0x49	; 73
     e4e:	50 fd       	sbrc	r21, 0
     e50:	49 ec       	ldi	r20, 0xC9	; 201
     e52:	63 cf       	rjmp	.-314    	; 0xd1a <__addsf3>
     e54:	08 95       	ret

00000e56 <atan>:
     e56:	df 93       	push	r29
     e58:	dd 27       	eor	r29, r29
     e5a:	b9 2f       	mov	r27, r25
     e5c:	bf 77       	andi	r27, 0x7F	; 127
     e5e:	40 e8       	ldi	r20, 0x80	; 128
     e60:	5f e3       	ldi	r21, 0x3F	; 63
     e62:	16 16       	cp	r1, r22
     e64:	17 06       	cpc	r1, r23
     e66:	48 07       	cpc	r20, r24
     e68:	5b 07       	cpc	r21, r27
     e6a:	10 f4       	brcc	.+4      	; 0xe70 <atan+0x1a>
     e6c:	d9 2f       	mov	r29, r25
     e6e:	62 d1       	rcall	.+708    	; 0x1134 <inverse>
     e70:	9f 93       	push	r25
     e72:	8f 93       	push	r24
     e74:	7f 93       	push	r23
     e76:	6f 93       	push	r22
     e78:	c7 d1       	rcall	.+910    	; 0x1208 <square>
     e7a:	ec e8       	ldi	r30, 0x8C	; 140
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	e9 d0       	rcall	.+466    	; 0x1052 <__fp_powser>
     e80:	1b d1       	rcall	.+566    	; 0x10b8 <__fp_round>
     e82:	2f 91       	pop	r18
     e84:	3f 91       	pop	r19
     e86:	4f 91       	pop	r20
     e88:	5f 91       	pop	r21
     e8a:	67 d1       	rcall	.+718    	; 0x115a <__mulsf3x>
     e8c:	dd 23       	and	r29, r29
     e8e:	49 f0       	breq	.+18     	; 0xea2 <atan+0x4c>
     e90:	90 58       	subi	r25, 0x80	; 128
     e92:	a2 ea       	ldi	r26, 0xA2	; 162
     e94:	2a ed       	ldi	r18, 0xDA	; 218
     e96:	3f e0       	ldi	r19, 0x0F	; 15
     e98:	49 ec       	ldi	r20, 0xC9	; 201
     e9a:	5f e3       	ldi	r21, 0x3F	; 63
     e9c:	d0 78       	andi	r29, 0x80	; 128
     e9e:	5d 27       	eor	r21, r29
     ea0:	4d df       	rcall	.-358    	; 0xd3c <__addsf3x>
     ea2:	df 91       	pop	r29
     ea4:	09 c1       	rjmp	.+530    	; 0x10b8 <__fp_round>

00000ea6 <__cmpsf2>:
     ea6:	a8 d0       	rcall	.+336    	; 0xff8 <__fp_cmp>
     ea8:	08 f4       	brcc	.+2      	; 0xeac <__cmpsf2+0x6>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	08 95       	ret

00000eae <__divsf3>:
     eae:	0c d0       	rcall	.+24     	; 0xec8 <__divsf3x>
     eb0:	03 c1       	rjmp	.+518    	; 0x10b8 <__fp_round>
     eb2:	fb d0       	rcall	.+502    	; 0x10aa <__fp_pscB>
     eb4:	40 f0       	brcs	.+16     	; 0xec6 <__divsf3+0x18>
     eb6:	f2 d0       	rcall	.+484    	; 0x109c <__fp_pscA>
     eb8:	30 f0       	brcs	.+12     	; 0xec6 <__divsf3+0x18>
     eba:	21 f4       	brne	.+8      	; 0xec4 <__divsf3+0x16>
     ebc:	5f 3f       	cpi	r21, 0xFF	; 255
     ebe:	19 f0       	breq	.+6      	; 0xec6 <__divsf3+0x18>
     ec0:	bf c0       	rjmp	.+382    	; 0x1040 <__fp_inf>
     ec2:	51 11       	cpse	r21, r1
     ec4:	2d c1       	rjmp	.+602    	; 0x1120 <__fp_szero>
     ec6:	c2 c0       	rjmp	.+388    	; 0x104c <__fp_nan>

00000ec8 <__divsf3x>:
     ec8:	08 d1       	rcall	.+528    	; 0x10da <__fp_split3>
     eca:	98 f3       	brcs	.-26     	; 0xeb2 <__divsf3+0x4>

00000ecc <__divsf3_pse>:
     ecc:	99 23       	and	r25, r25
     ece:	c9 f3       	breq	.-14     	; 0xec2 <__divsf3+0x14>
     ed0:	55 23       	and	r21, r21
     ed2:	b1 f3       	breq	.-20     	; 0xec0 <__divsf3+0x12>
     ed4:	95 1b       	sub	r25, r21
     ed6:	55 0b       	sbc	r21, r21
     ed8:	bb 27       	eor	r27, r27
     eda:	aa 27       	eor	r26, r26
     edc:	62 17       	cp	r22, r18
     ede:	73 07       	cpc	r23, r19
     ee0:	84 07       	cpc	r24, r20
     ee2:	38 f0       	brcs	.+14     	; 0xef2 <__divsf3_pse+0x26>
     ee4:	9f 5f       	subi	r25, 0xFF	; 255
     ee6:	5f 4f       	sbci	r21, 0xFF	; 255
     ee8:	22 0f       	add	r18, r18
     eea:	33 1f       	adc	r19, r19
     eec:	44 1f       	adc	r20, r20
     eee:	aa 1f       	adc	r26, r26
     ef0:	a9 f3       	breq	.-22     	; 0xedc <__divsf3_pse+0x10>
     ef2:	33 d0       	rcall	.+102    	; 0xf5a <__divsf3_pse+0x8e>
     ef4:	0e 2e       	mov	r0, r30
     ef6:	3a f0       	brmi	.+14     	; 0xf06 <__divsf3_pse+0x3a>
     ef8:	e0 e8       	ldi	r30, 0x80	; 128
     efa:	30 d0       	rcall	.+96     	; 0xf5c <__divsf3_pse+0x90>
     efc:	91 50       	subi	r25, 0x01	; 1
     efe:	50 40       	sbci	r21, 0x00	; 0
     f00:	e6 95       	lsr	r30
     f02:	00 1c       	adc	r0, r0
     f04:	ca f7       	brpl	.-14     	; 0xef8 <__divsf3_pse+0x2c>
     f06:	29 d0       	rcall	.+82     	; 0xf5a <__divsf3_pse+0x8e>
     f08:	fe 2f       	mov	r31, r30
     f0a:	27 d0       	rcall	.+78     	; 0xf5a <__divsf3_pse+0x8e>
     f0c:	66 0f       	add	r22, r22
     f0e:	77 1f       	adc	r23, r23
     f10:	88 1f       	adc	r24, r24
     f12:	bb 1f       	adc	r27, r27
     f14:	26 17       	cp	r18, r22
     f16:	37 07       	cpc	r19, r23
     f18:	48 07       	cpc	r20, r24
     f1a:	ab 07       	cpc	r26, r27
     f1c:	b0 e8       	ldi	r27, 0x80	; 128
     f1e:	09 f0       	breq	.+2      	; 0xf22 <__divsf3_pse+0x56>
     f20:	bb 0b       	sbc	r27, r27
     f22:	80 2d       	mov	r24, r0
     f24:	bf 01       	movw	r22, r30
     f26:	ff 27       	eor	r31, r31
     f28:	93 58       	subi	r25, 0x83	; 131
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	2a f0       	brmi	.+10     	; 0xf38 <__divsf3_pse+0x6c>
     f2e:	9e 3f       	cpi	r25, 0xFE	; 254
     f30:	51 05       	cpc	r21, r1
     f32:	68 f0       	brcs	.+26     	; 0xf4e <__divsf3_pse+0x82>
     f34:	85 c0       	rjmp	.+266    	; 0x1040 <__fp_inf>
     f36:	f4 c0       	rjmp	.+488    	; 0x1120 <__fp_szero>
     f38:	5f 3f       	cpi	r21, 0xFF	; 255
     f3a:	ec f3       	brlt	.-6      	; 0xf36 <__divsf3_pse+0x6a>
     f3c:	98 3e       	cpi	r25, 0xE8	; 232
     f3e:	dc f3       	brlt	.-10     	; 0xf36 <__divsf3_pse+0x6a>
     f40:	86 95       	lsr	r24
     f42:	77 95       	ror	r23
     f44:	67 95       	ror	r22
     f46:	b7 95       	ror	r27
     f48:	f7 95       	ror	r31
     f4a:	9f 5f       	subi	r25, 0xFF	; 255
     f4c:	c9 f7       	brne	.-14     	; 0xf40 <__divsf3_pse+0x74>
     f4e:	88 0f       	add	r24, r24
     f50:	91 1d       	adc	r25, r1
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	97 f9       	bld	r25, 7
     f58:	08 95       	ret
     f5a:	e1 e0       	ldi	r30, 0x01	; 1
     f5c:	66 0f       	add	r22, r22
     f5e:	77 1f       	adc	r23, r23
     f60:	88 1f       	adc	r24, r24
     f62:	bb 1f       	adc	r27, r27
     f64:	62 17       	cp	r22, r18
     f66:	73 07       	cpc	r23, r19
     f68:	84 07       	cpc	r24, r20
     f6a:	ba 07       	cpc	r27, r26
     f6c:	20 f0       	brcs	.+8      	; 0xf76 <__divsf3_pse+0xaa>
     f6e:	62 1b       	sub	r22, r18
     f70:	73 0b       	sbc	r23, r19
     f72:	84 0b       	sbc	r24, r20
     f74:	ba 0b       	sbc	r27, r26
     f76:	ee 1f       	adc	r30, r30
     f78:	88 f7       	brcc	.-30     	; 0xf5c <__divsf3_pse+0x90>
     f7a:	e0 95       	com	r30
     f7c:	08 95       	ret

00000f7e <__floatunsisf>:
     f7e:	e8 94       	clt
     f80:	09 c0       	rjmp	.+18     	; 0xf94 <__floatsisf+0x12>

00000f82 <__floatsisf>:
     f82:	97 fb       	bst	r25, 7
     f84:	3e f4       	brtc	.+14     	; 0xf94 <__floatsisf+0x12>
     f86:	90 95       	com	r25
     f88:	80 95       	com	r24
     f8a:	70 95       	com	r23
     f8c:	61 95       	neg	r22
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	8f 4f       	sbci	r24, 0xFF	; 255
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	99 23       	and	r25, r25
     f96:	a9 f0       	breq	.+42     	; 0xfc2 <__floatsisf+0x40>
     f98:	f9 2f       	mov	r31, r25
     f9a:	96 e9       	ldi	r25, 0x96	; 150
     f9c:	bb 27       	eor	r27, r27
     f9e:	93 95       	inc	r25
     fa0:	f6 95       	lsr	r31
     fa2:	87 95       	ror	r24
     fa4:	77 95       	ror	r23
     fa6:	67 95       	ror	r22
     fa8:	b7 95       	ror	r27
     faa:	f1 11       	cpse	r31, r1
     fac:	f8 cf       	rjmp	.-16     	; 0xf9e <__floatsisf+0x1c>
     fae:	fa f4       	brpl	.+62     	; 0xfee <__floatsisf+0x6c>
     fb0:	bb 0f       	add	r27, r27
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <__floatsisf+0x36>
     fb4:	60 ff       	sbrs	r22, 0
     fb6:	1b c0       	rjmp	.+54     	; 0xfee <__floatsisf+0x6c>
     fb8:	6f 5f       	subi	r22, 0xFF	; 255
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8f 4f       	sbci	r24, 0xFF	; 255
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	16 c0       	rjmp	.+44     	; 0xfee <__floatsisf+0x6c>
     fc2:	88 23       	and	r24, r24
     fc4:	11 f0       	breq	.+4      	; 0xfca <__floatsisf+0x48>
     fc6:	96 e9       	ldi	r25, 0x96	; 150
     fc8:	11 c0       	rjmp	.+34     	; 0xfec <__floatsisf+0x6a>
     fca:	77 23       	and	r23, r23
     fcc:	21 f0       	breq	.+8      	; 0xfd6 <__floatsisf+0x54>
     fce:	9e e8       	ldi	r25, 0x8E	; 142
     fd0:	87 2f       	mov	r24, r23
     fd2:	76 2f       	mov	r23, r22
     fd4:	05 c0       	rjmp	.+10     	; 0xfe0 <__floatsisf+0x5e>
     fd6:	66 23       	and	r22, r22
     fd8:	71 f0       	breq	.+28     	; 0xff6 <__floatsisf+0x74>
     fda:	96 e8       	ldi	r25, 0x86	; 134
     fdc:	86 2f       	mov	r24, r22
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	2a f0       	brmi	.+10     	; 0xfee <__floatsisf+0x6c>
     fe4:	9a 95       	dec	r25
     fe6:	66 0f       	add	r22, r22
     fe8:	77 1f       	adc	r23, r23
     fea:	88 1f       	adc	r24, r24
     fec:	da f7       	brpl	.-10     	; 0xfe4 <__floatsisf+0x62>
     fee:	88 0f       	add	r24, r24
     ff0:	96 95       	lsr	r25
     ff2:	87 95       	ror	r24
     ff4:	97 f9       	bld	r25, 7
     ff6:	08 95       	ret

00000ff8 <__fp_cmp>:
     ff8:	99 0f       	add	r25, r25
     ffa:	00 08       	sbc	r0, r0
     ffc:	55 0f       	add	r21, r21
     ffe:	aa 0b       	sbc	r26, r26
    1000:	e0 e8       	ldi	r30, 0x80	; 128
    1002:	fe ef       	ldi	r31, 0xFE	; 254
    1004:	16 16       	cp	r1, r22
    1006:	17 06       	cpc	r1, r23
    1008:	e8 07       	cpc	r30, r24
    100a:	f9 07       	cpc	r31, r25
    100c:	c0 f0       	brcs	.+48     	; 0x103e <__fp_cmp+0x46>
    100e:	12 16       	cp	r1, r18
    1010:	13 06       	cpc	r1, r19
    1012:	e4 07       	cpc	r30, r20
    1014:	f5 07       	cpc	r31, r21
    1016:	98 f0       	brcs	.+38     	; 0x103e <__fp_cmp+0x46>
    1018:	62 1b       	sub	r22, r18
    101a:	73 0b       	sbc	r23, r19
    101c:	84 0b       	sbc	r24, r20
    101e:	95 0b       	sbc	r25, r21
    1020:	39 f4       	brne	.+14     	; 0x1030 <__fp_cmp+0x38>
    1022:	0a 26       	eor	r0, r26
    1024:	61 f0       	breq	.+24     	; 0x103e <__fp_cmp+0x46>
    1026:	23 2b       	or	r18, r19
    1028:	24 2b       	or	r18, r20
    102a:	25 2b       	or	r18, r21
    102c:	21 f4       	brne	.+8      	; 0x1036 <__fp_cmp+0x3e>
    102e:	08 95       	ret
    1030:	0a 26       	eor	r0, r26
    1032:	09 f4       	brne	.+2      	; 0x1036 <__fp_cmp+0x3e>
    1034:	a1 40       	sbci	r26, 0x01	; 1
    1036:	a6 95       	lsr	r26
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	81 1d       	adc	r24, r1
    103c:	81 1d       	adc	r24, r1
    103e:	08 95       	ret

00001040 <__fp_inf>:
    1040:	97 f9       	bld	r25, 7
    1042:	9f 67       	ori	r25, 0x7F	; 127
    1044:	80 e8       	ldi	r24, 0x80	; 128
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	08 95       	ret

0000104c <__fp_nan>:
    104c:	9f ef       	ldi	r25, 0xFF	; 255
    104e:	80 ec       	ldi	r24, 0xC0	; 192
    1050:	08 95       	ret

00001052 <__fp_powser>:
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	1f 93       	push	r17
    1058:	0f 93       	push	r16
    105a:	ff 92       	push	r15
    105c:	ef 92       	push	r14
    105e:	df 92       	push	r13
    1060:	7b 01       	movw	r14, r22
    1062:	8c 01       	movw	r16, r24
    1064:	68 94       	set
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <__fp_powser+0x20>
    1068:	da 2e       	mov	r13, r26
    106a:	ef 01       	movw	r28, r30
    106c:	76 d0       	rcall	.+236    	; 0x115a <__mulsf3x>
    106e:	fe 01       	movw	r30, r28
    1070:	e8 94       	clt
    1072:	a5 91       	lpm	r26, Z+
    1074:	25 91       	lpm	r18, Z+
    1076:	35 91       	lpm	r19, Z+
    1078:	45 91       	lpm	r20, Z+
    107a:	55 91       	lpm	r21, Z+
    107c:	ae f3       	brts	.-22     	; 0x1068 <__fp_powser+0x16>
    107e:	ef 01       	movw	r28, r30
    1080:	5d de       	rcall	.-838    	; 0xd3c <__addsf3x>
    1082:	fe 01       	movw	r30, r28
    1084:	97 01       	movw	r18, r14
    1086:	a8 01       	movw	r20, r16
    1088:	da 94       	dec	r13
    108a:	79 f7       	brne	.-34     	; 0x106a <__fp_powser+0x18>
    108c:	df 90       	pop	r13
    108e:	ef 90       	pop	r14
    1090:	ff 90       	pop	r15
    1092:	0f 91       	pop	r16
    1094:	1f 91       	pop	r17
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <__fp_pscA>:
    109c:	00 24       	eor	r0, r0
    109e:	0a 94       	dec	r0
    10a0:	16 16       	cp	r1, r22
    10a2:	17 06       	cpc	r1, r23
    10a4:	18 06       	cpc	r1, r24
    10a6:	09 06       	cpc	r0, r25
    10a8:	08 95       	ret

000010aa <__fp_pscB>:
    10aa:	00 24       	eor	r0, r0
    10ac:	0a 94       	dec	r0
    10ae:	12 16       	cp	r1, r18
    10b0:	13 06       	cpc	r1, r19
    10b2:	14 06       	cpc	r1, r20
    10b4:	05 06       	cpc	r0, r21
    10b6:	08 95       	ret

000010b8 <__fp_round>:
    10b8:	09 2e       	mov	r0, r25
    10ba:	03 94       	inc	r0
    10bc:	00 0c       	add	r0, r0
    10be:	11 f4       	brne	.+4      	; 0x10c4 <__fp_round+0xc>
    10c0:	88 23       	and	r24, r24
    10c2:	52 f0       	brmi	.+20     	; 0x10d8 <__fp_round+0x20>
    10c4:	bb 0f       	add	r27, r27
    10c6:	40 f4       	brcc	.+16     	; 0x10d8 <__fp_round+0x20>
    10c8:	bf 2b       	or	r27, r31
    10ca:	11 f4       	brne	.+4      	; 0x10d0 <__fp_round+0x18>
    10cc:	60 ff       	sbrs	r22, 0
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <__fp_round+0x20>
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	8f 4f       	sbci	r24, 0xFF	; 255
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	08 95       	ret

000010da <__fp_split3>:
    10da:	57 fd       	sbrc	r21, 7
    10dc:	90 58       	subi	r25, 0x80	; 128
    10de:	44 0f       	add	r20, r20
    10e0:	55 1f       	adc	r21, r21
    10e2:	59 f0       	breq	.+22     	; 0x10fa <__fp_splitA+0x10>
    10e4:	5f 3f       	cpi	r21, 0xFF	; 255
    10e6:	71 f0       	breq	.+28     	; 0x1104 <__fp_splitA+0x1a>
    10e8:	47 95       	ror	r20

000010ea <__fp_splitA>:
    10ea:	88 0f       	add	r24, r24
    10ec:	97 fb       	bst	r25, 7
    10ee:	99 1f       	adc	r25, r25
    10f0:	61 f0       	breq	.+24     	; 0x110a <__fp_splitA+0x20>
    10f2:	9f 3f       	cpi	r25, 0xFF	; 255
    10f4:	79 f0       	breq	.+30     	; 0x1114 <__fp_splitA+0x2a>
    10f6:	87 95       	ror	r24
    10f8:	08 95       	ret
    10fa:	12 16       	cp	r1, r18
    10fc:	13 06       	cpc	r1, r19
    10fe:	14 06       	cpc	r1, r20
    1100:	55 1f       	adc	r21, r21
    1102:	f2 cf       	rjmp	.-28     	; 0x10e8 <__fp_split3+0xe>
    1104:	46 95       	lsr	r20
    1106:	f1 df       	rcall	.-30     	; 0x10ea <__fp_splitA>
    1108:	08 c0       	rjmp	.+16     	; 0x111a <__fp_splitA+0x30>
    110a:	16 16       	cp	r1, r22
    110c:	17 06       	cpc	r1, r23
    110e:	18 06       	cpc	r1, r24
    1110:	99 1f       	adc	r25, r25
    1112:	f1 cf       	rjmp	.-30     	; 0x10f6 <__fp_splitA+0xc>
    1114:	86 95       	lsr	r24
    1116:	71 05       	cpc	r23, r1
    1118:	61 05       	cpc	r22, r1
    111a:	08 94       	sec
    111c:	08 95       	ret

0000111e <__fp_zero>:
    111e:	e8 94       	clt

00001120 <__fp_szero>:
    1120:	bb 27       	eor	r27, r27
    1122:	66 27       	eor	r22, r22
    1124:	77 27       	eor	r23, r23
    1126:	cb 01       	movw	r24, r22
    1128:	97 f9       	bld	r25, 7
    112a:	08 95       	ret

0000112c <__gesf2>:
    112c:	65 df       	rcall	.-310    	; 0xff8 <__fp_cmp>
    112e:	08 f4       	brcc	.+2      	; 0x1132 <__gesf2+0x6>
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	08 95       	ret

00001134 <inverse>:
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 e8       	ldi	r24, 0x80	; 128
    113e:	9f e3       	ldi	r25, 0x3F	; 63
    1140:	b6 ce       	rjmp	.-660    	; 0xeae <__divsf3>

00001142 <__mulsf3>:
    1142:	0b d0       	rcall	.+22     	; 0x115a <__mulsf3x>
    1144:	b9 cf       	rjmp	.-142    	; 0x10b8 <__fp_round>
    1146:	aa df       	rcall	.-172    	; 0x109c <__fp_pscA>
    1148:	28 f0       	brcs	.+10     	; 0x1154 <__mulsf3+0x12>
    114a:	af df       	rcall	.-162    	; 0x10aa <__fp_pscB>
    114c:	18 f0       	brcs	.+6      	; 0x1154 <__mulsf3+0x12>
    114e:	95 23       	and	r25, r21
    1150:	09 f0       	breq	.+2      	; 0x1154 <__mulsf3+0x12>
    1152:	76 cf       	rjmp	.-276    	; 0x1040 <__fp_inf>
    1154:	7b cf       	rjmp	.-266    	; 0x104c <__fp_nan>
    1156:	11 24       	eor	r1, r1
    1158:	e3 cf       	rjmp	.-58     	; 0x1120 <__fp_szero>

0000115a <__mulsf3x>:
    115a:	bf df       	rcall	.-130    	; 0x10da <__fp_split3>
    115c:	a0 f3       	brcs	.-24     	; 0x1146 <__mulsf3+0x4>

0000115e <__mulsf3_pse>:
    115e:	95 9f       	mul	r25, r21
    1160:	d1 f3       	breq	.-12     	; 0x1156 <__mulsf3+0x14>
    1162:	95 0f       	add	r25, r21
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	55 1f       	adc	r21, r21
    1168:	62 9f       	mul	r22, r18
    116a:	f0 01       	movw	r30, r0
    116c:	72 9f       	mul	r23, r18
    116e:	bb 27       	eor	r27, r27
    1170:	f0 0d       	add	r31, r0
    1172:	b1 1d       	adc	r27, r1
    1174:	63 9f       	mul	r22, r19
    1176:	aa 27       	eor	r26, r26
    1178:	f0 0d       	add	r31, r0
    117a:	b1 1d       	adc	r27, r1
    117c:	aa 1f       	adc	r26, r26
    117e:	64 9f       	mul	r22, r20
    1180:	66 27       	eor	r22, r22
    1182:	b0 0d       	add	r27, r0
    1184:	a1 1d       	adc	r26, r1
    1186:	66 1f       	adc	r22, r22
    1188:	82 9f       	mul	r24, r18
    118a:	22 27       	eor	r18, r18
    118c:	b0 0d       	add	r27, r0
    118e:	a1 1d       	adc	r26, r1
    1190:	62 1f       	adc	r22, r18
    1192:	73 9f       	mul	r23, r19
    1194:	b0 0d       	add	r27, r0
    1196:	a1 1d       	adc	r26, r1
    1198:	62 1f       	adc	r22, r18
    119a:	83 9f       	mul	r24, r19
    119c:	a0 0d       	add	r26, r0
    119e:	61 1d       	adc	r22, r1
    11a0:	22 1f       	adc	r18, r18
    11a2:	74 9f       	mul	r23, r20
    11a4:	33 27       	eor	r19, r19
    11a6:	a0 0d       	add	r26, r0
    11a8:	61 1d       	adc	r22, r1
    11aa:	23 1f       	adc	r18, r19
    11ac:	84 9f       	mul	r24, r20
    11ae:	60 0d       	add	r22, r0
    11b0:	21 1d       	adc	r18, r1
    11b2:	82 2f       	mov	r24, r18
    11b4:	76 2f       	mov	r23, r22
    11b6:	6a 2f       	mov	r22, r26
    11b8:	11 24       	eor	r1, r1
    11ba:	9f 57       	subi	r25, 0x7F	; 127
    11bc:	50 40       	sbci	r21, 0x00	; 0
    11be:	8a f0       	brmi	.+34     	; 0x11e2 <__mulsf3_pse+0x84>
    11c0:	e1 f0       	breq	.+56     	; 0x11fa <__mulsf3_pse+0x9c>
    11c2:	88 23       	and	r24, r24
    11c4:	4a f0       	brmi	.+18     	; 0x11d8 <__mulsf3_pse+0x7a>
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	bb 1f       	adc	r27, r27
    11cc:	66 1f       	adc	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	88 1f       	adc	r24, r24
    11d2:	91 50       	subi	r25, 0x01	; 1
    11d4:	50 40       	sbci	r21, 0x00	; 0
    11d6:	a9 f7       	brne	.-22     	; 0x11c2 <__mulsf3_pse+0x64>
    11d8:	9e 3f       	cpi	r25, 0xFE	; 254
    11da:	51 05       	cpc	r21, r1
    11dc:	70 f0       	brcs	.+28     	; 0x11fa <__mulsf3_pse+0x9c>
    11de:	30 cf       	rjmp	.-416    	; 0x1040 <__fp_inf>
    11e0:	9f cf       	rjmp	.-194    	; 0x1120 <__fp_szero>
    11e2:	5f 3f       	cpi	r21, 0xFF	; 255
    11e4:	ec f3       	brlt	.-6      	; 0x11e0 <__mulsf3_pse+0x82>
    11e6:	98 3e       	cpi	r25, 0xE8	; 232
    11e8:	dc f3       	brlt	.-10     	; 0x11e0 <__mulsf3_pse+0x82>
    11ea:	86 95       	lsr	r24
    11ec:	77 95       	ror	r23
    11ee:	67 95       	ror	r22
    11f0:	b7 95       	ror	r27
    11f2:	f7 95       	ror	r31
    11f4:	e7 95       	ror	r30
    11f6:	9f 5f       	subi	r25, 0xFF	; 255
    11f8:	c1 f7       	brne	.-16     	; 0x11ea <__mulsf3_pse+0x8c>
    11fa:	fe 2b       	or	r31, r30
    11fc:	88 0f       	add	r24, r24
    11fe:	91 1d       	adc	r25, r1
    1200:	96 95       	lsr	r25
    1202:	87 95       	ror	r24
    1204:	97 f9       	bld	r25, 7
    1206:	08 95       	ret

00001208 <square>:
    1208:	9b 01       	movw	r18, r22
    120a:	ac 01       	movw	r20, r24
    120c:	9a cf       	rjmp	.-204    	; 0x1142 <__mulsf3>

0000120e <strtok>:
    120e:	46 e0       	ldi	r20, 0x06	; 6
    1210:	51 e0       	ldi	r21, 0x01	; 1
    1212:	0e 94 1c 09 	call	0x1238	; 0x1238 <strtok_r>
    1216:	08 95       	ret

00001218 <strcmp>:
    1218:	fb 01       	movw	r30, r22
    121a:	dc 01       	movw	r26, r24
    121c:	8d 91       	ld	r24, X+
    121e:	01 90       	ld	r0, Z+
    1220:	80 19       	sub	r24, r0
    1222:	01 10       	cpse	r0, r1
    1224:	d9 f3       	breq	.-10     	; 0x121c <strcmp+0x4>
    1226:	99 0b       	sbc	r25, r25
    1228:	08 95       	ret

0000122a <strcpy>:
    122a:	fb 01       	movw	r30, r22
    122c:	dc 01       	movw	r26, r24
    122e:	01 90       	ld	r0, Z+
    1230:	0d 92       	st	X+, r0
    1232:	00 20       	and	r0, r0
    1234:	e1 f7       	brne	.-8      	; 0x122e <strcpy+0x4>
    1236:	08 95       	ret

00001238 <strtok_r>:
    1238:	fa 01       	movw	r30, r20
    123a:	a1 91       	ld	r26, Z+
    123c:	b0 81       	ld	r27, Z
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	19 f4       	brne	.+6      	; 0x1248 <strtok_r+0x10>
    1242:	10 97       	sbiw	r26, 0x00	; 0
    1244:	e1 f0       	breq	.+56     	; 0x127e <strtok_r+0x46>
    1246:	cd 01       	movw	r24, r26
    1248:	dc 01       	movw	r26, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0d 90       	ld	r0, X+
    124e:	00 20       	and	r0, r0
    1250:	11 f4       	brne	.+4      	; 0x1256 <strtok_r+0x1e>
    1252:	c0 01       	movw	r24, r0
    1254:	13 c0       	rjmp	.+38     	; 0x127c <strtok_r+0x44>
    1256:	fb 01       	movw	r30, r22
    1258:	21 91       	ld	r18, Z+
    125a:	22 23       	and	r18, r18
    125c:	19 f0       	breq	.+6      	; 0x1264 <strtok_r+0x2c>
    125e:	20 15       	cp	r18, r0
    1260:	d9 f7       	brne	.-10     	; 0x1258 <strtok_r+0x20>
    1262:	f3 cf       	rjmp	.-26     	; 0x124a <strtok_r+0x12>
    1264:	fb 01       	movw	r30, r22
    1266:	21 91       	ld	r18, Z+
    1268:	20 15       	cp	r18, r0
    126a:	19 f4       	brne	.+6      	; 0x1272 <strtok_r+0x3a>
    126c:	1e 92       	st	-X, r1
    126e:	11 96       	adiw	r26, 0x01	; 1
    1270:	06 c0       	rjmp	.+12     	; 0x127e <strtok_r+0x46>
    1272:	22 23       	and	r18, r18
    1274:	c1 f7       	brne	.-16     	; 0x1266 <strtok_r+0x2e>
    1276:	0d 90       	ld	r0, X+
    1278:	00 20       	and	r0, r0
    127a:	a1 f7       	brne	.-24     	; 0x1264 <strtok_r+0x2c>
    127c:	d0 01       	movw	r26, r0
    127e:	fa 01       	movw	r30, r20
    1280:	a1 93       	st	Z+, r26
    1282:	b0 83       	st	Z, r27
    1284:	08 95       	ret

00001286 <_exit>:
    1286:	f8 94       	cli

00001288 <__stop_program>:
    1288:	ff cf       	rjmp	.-2      	; 0x1288 <__stop_program>
