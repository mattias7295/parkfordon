
kontroll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000ff6  0000108a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000108a  2**0
                  ALLOC
  3 .stab         00002964  00000000  00000000  0000108c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008e9  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000042e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000077c  00000000  00000000  00004380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002be  00000000  00000000  00004afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cd  00000000  00000000  00004dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00005288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000021e  00000000  00000000  00005438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d0  00000000  00000000  00005656  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_1>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  68:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  6c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  70:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  74:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  7c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  80:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  84:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  88:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  8c:	08 4a       	sbci	r16, 0xA8	; 168
  8e:	d7 3b       	cpi	r29, 0xB7	; 183
  90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
  92:	01 6e       	ori	r16, 0xE1	; 225
  94:	84 bc       	out	0x24, r8	; 36
  96:	bf fd       	.word	0xfdbf	; ????
  98:	c1 2f       	mov	r28, r17
  9a:	3d 6c       	ori	r19, 0xCD	; 205
  9c:	74 31       	cpi	r23, 0x14	; 20
  9e:	9a bd       	out	0x2a, r25	; 42
  a0:	56 83       	std	Z+6, r21	; 0x06
  a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
  a4:	3d 00       	.word	0x003d	; ????
  a6:	c7 7f       	andi	r28, 0xF7	; 247
  a8:	11 be       	out	0x31, r1	; 49
  aa:	d9 e4       	ldi	r29, 0x49	; 73
  ac:	bb 4c       	sbci	r27, 0xCB	; 203
  ae:	3e 91       	ld	r19, -X
  b0:	6b aa       	sts	0x9b, r22
  b2:	aa be       	out	0x3a, r10	; 58
  b4:	00 00       	nop
  b6:	00 80       	ld	r0, Z
  b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d0 e4       	ldi	r29, 0x40	; 64
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	e6 ef       	ldi	r30, 0xF6	; 246
  ce:	ff e0       	ldi	r31, 0x0F	; 15
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	0b bf       	out	0x3b, r16	; 59
  d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x14>
  d6:	07 90       	elpm	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	a0 30       	cpi	r26, 0x00	; 0
  dc:	b1 07       	cpc	r27, r17
  de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0x10>
  e0:	1b be       	out	0x3b, r1	; 59

000000e2 <__do_clear_bss>:
  e2:	11 e0       	ldi	r17, 0x01	; 1
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b1 e0       	ldi	r27, 0x01	; 1
  e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
  ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
  ec:	a6 30       	cpi	r26, 0x06	; 6
  ee:	b1 07       	cpc	r27, r17
  f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
  f2:	0e 94 0e 04 	call	0x81c	; 0x81c <main>
  f6:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <_exit>

000000fa <__bad_interrupt>:
  fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <switchInit>:
#include "switch_interrupt.h"

void switchInit() {
	
	/* Low level generates interrupt. */
	EICRA = (0<<ISC00)|(0<<ISC01);
  fe:	10 92 69 00 	sts	0x0069, r1
	
	/* Enable the external interrupt on port INT0. */
	EIMSK = (1<<ON_OFF_SWITCH);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	8d bb       	out	0x1d, r24	; 29
	
	/* Set the global interrupt flag. */
	sei();
 106:	78 94       	sei
}
 108:	08 95       	ret

0000010a <__vector_1>:
* Output:	-
* Description:	Interrupt routine for an external interrupt
*				on port INT0, does nothing but waking the MCU
*				up after entering sleep mode.
*/
ISR(INT0_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
}
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <USART_Init>:
* Description: Initializes the USART.
*/
void USART_Init(unsigned int ubrr) {
	
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 11e:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 122:	80 93 c4 00 	sts	0x00C4, r24
	
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 126:	88 e1       	ldi	r24, 0x18	; 24
 128:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 12c:	8e e0       	ldi	r24, 0x0E	; 14
 12e:	80 93 c2 00 	sts	0x00C2, r24
}
 132:	08 95       	ret

00000134 <init>:
*				and timer.
*/
void init() {
	
	/* Set power control to output and constantly high. */
	DDRB |= _BV(POWER_CONTROL);
 134:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= _BV(POWER_CONTROL);
 136:	28 9a       	sbi	0x05, 0	; 5
	
	/* Set joystick trigger as input with pull up resistance. */
	DDRD &= ~_BV(JOY_TRIGGER);
 138:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= _BV(JOY_TRIGGER);
 13a:	5a 9a       	sbi	0x0b, 2	; 11

	/* Enable the ADC. */
	ADCSRA |= _BV(ADEN);
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 68       	ori	r24, 0x80	; 128
 144:	80 83       	st	Z, r24
	
	/* Initialize the USART. */
	USART_Init(MYUBRR);
 146:	87 e6       	ldi	r24, 0x67	; 103
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_Init>
	
	/* Initialize the interrupts */
	
	
	/* Initialize global flags. */
	power = ON;
 14e:	10 92 02 01 	sts	0x0102, r1
	steer = MAN;
 152:	10 92 05 01 	sts	0x0105, r1
}
 156:	08 95       	ret

00000158 <USART_Transmit>:
* Description: Transmits data via bluetooth.
*/
void USART_Transmit(unsigned char data) {
	
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
 158:	e0 ec       	ldi	r30, 0xC0	; 192
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	90 81       	ld	r25, Z
 15e:	95 ff       	sbrs	r25, 5
 160:	fd cf       	rjmp	.-6      	; 0x15c <USART_Transmit+0x4>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 162:	80 93 c6 00 	sts	0x00C6, r24
}
 166:	08 95       	ret

00000168 <USART_Receive>:
* Description: Receives data via bluetooth.
*/
unsigned char USART_Receive() {
	
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 168:	e0 ec       	ldi	r30, 0xC0	; 192
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	88 23       	and	r24, r24
 170:	ec f7       	brge	.-6      	; 0x16c <USART_Receive+0x4>
	
	/* Get and return received data from buffer */
	return UDR0;
 172:	80 91 c6 00 	lds	r24, 0x00C6
}
 176:	08 95       	ret

00000178 <adc_read>:
*/
uint16_t adc_read(uint8_t adcx) {
	
	/* Takes voltage levels from Aref and sets which analog pin we want
	 * to read from. */
	ADMUX &= 0b01100000;
 178:	ec e7       	ldi	r30, 0x7C	; 124
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	90 81       	ld	r25, Z
 17e:	90 76       	andi	r25, 0x60	; 96
 180:	90 83       	st	Z, r25
	ADMUX |= adcx;
 182:	90 81       	ld	r25, Z
 184:	89 2b       	or	r24, r25
 186:	80 83       	st	Z, r24

	/* This starts the conversion. */
	ADCSRA |= _BV(ADSC);
 188:	ea e7       	ldi	r30, 0x7A	; 122
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	* is finished. It constantly checks ADCSRA's ADSC bit, which we just
	* set above, to see if it is still set. This bit is automatically
	* reset (zeroed) when the conversion is ready so if we do this in
	* a loop the loop will just go until the conversion is ready. */
	while ((ADCSRA & _BV(ADSC)));
 192:	80 81       	ld	r24, Z
 194:	86 fd       	sbrc	r24, 6
 196:	fd cf       	rjmp	.-6      	; 0x192 <adc_read+0x1a>

	/* Finally, we return the converted value to the calling function. */
	return ADC;
 198:	80 91 78 00 	lds	r24, 0x0078
 19c:	90 91 79 00 	lds	r25, 0x0079
}
 1a0:	08 95       	ret

000001a2 <getXValue>:
*				value of the adc_read function.
*/
int getXValue() {
	
	int x_value;
	uint16_t read = adc_read(X_AXIS);
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 bc 00 	call	0x178	; 0x178 <adc_read>
	
	if (read >= ADC_THRESHOLDH7) {
 1a8:	23 e0       	ldi	r18, 0x03	; 3
 1aa:	80 3c       	cpi	r24, 0xC0	; 192
 1ac:	92 07       	cpc	r25, r18
 1ae:	a0 f5       	brcc	.+104    	; 0x218 <getXValue+0x76>
		x_value = 7;
	} else if (read > ADC_THRESHOLDH6) {
 1b0:	23 e0       	ldi	r18, 0x03	; 3
 1b2:	81 38       	cpi	r24, 0x81	; 129
 1b4:	92 07       	cpc	r25, r18
 1b6:	98 f5       	brcc	.+102    	; 0x21e <getXValue+0x7c>
		x_value = 6;
	} else if (read > ADC_THRESHOLDH5) {
 1b8:	23 e0       	ldi	r18, 0x03	; 3
 1ba:	81 34       	cpi	r24, 0x41	; 65
 1bc:	92 07       	cpc	r25, r18
 1be:	90 f5       	brcc	.+100    	; 0x224 <getXValue+0x82>
		x_value = 5;
	} else if (read > ADC_THRESHOLDH4) {
 1c0:	23 e0       	ldi	r18, 0x03	; 3
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	92 07       	cpc	r25, r18
 1c6:	88 f5       	brcc	.+98     	; 0x22a <getXValue+0x88>
		x_value = 4;
	} else if (read > ADC_THRESHOLDH3) {
 1c8:	22 e0       	ldi	r18, 0x02	; 2
 1ca:	81 3c       	cpi	r24, 0xC1	; 193
 1cc:	92 07       	cpc	r25, r18
 1ce:	80 f5       	brcc	.+96     	; 0x230 <getXValue+0x8e>
		x_value = 3;
	} else if (read > ADC_THRESHOLDH2) {
 1d0:	22 e0       	ldi	r18, 0x02	; 2
 1d2:	81 38       	cpi	r24, 0x81	; 129
 1d4:	92 07       	cpc	r25, r18
 1d6:	78 f5       	brcc	.+94     	; 0x236 <getXValue+0x94>
		x_value = 2;
	} else if (read > ADC_THRESHOLDH1) {
 1d8:	22 e0       	ldi	r18, 0x02	; 2
 1da:	81 34       	cpi	r24, 0x41	; 65
 1dc:	92 07       	cpc	r25, r18
 1de:	70 f5       	brcc	.+92     	; 0x23c <getXValue+0x9a>
		x_value = 1;
	} else if (read <= ADC_THRESHOLDL7) {
 1e0:	81 34       	cpi	r24, 0x41	; 65
 1e2:	91 05       	cpc	r25, r1
 1e4:	70 f1       	brcs	.+92     	; 0x242 <getXValue+0xa0>
		x_value = -7;
	} else if (read < ADC_THRESHOLDL6) {
 1e6:	80 38       	cpi	r24, 0x80	; 128
 1e8:	91 05       	cpc	r25, r1
 1ea:	70 f1       	brcs	.+92     	; 0x248 <getXValue+0xa6>
		x_value = -6;
	} else if (read < ADC_THRESHOLDL5) {
 1ec:	80 3c       	cpi	r24, 0xC0	; 192
 1ee:	91 05       	cpc	r25, r1
 1f0:	70 f1       	brcs	.+92     	; 0x24e <getXValue+0xac>
		x_value = -5;
	} else if (read < ADC_THRESHOLDL4) {
 1f2:	8f 3f       	cpi	r24, 0xFF	; 255
 1f4:	91 05       	cpc	r25, r1
 1f6:	71 f1       	breq	.+92     	; 0x254 <getXValue+0xb2>
 1f8:	68 f1       	brcs	.+90     	; 0x254 <getXValue+0xb2>
		x_value = -4;
	} else if (read < ADC_THRESHOLDL3) {
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	80 34       	cpi	r24, 0x40	; 64
 1fe:	92 07       	cpc	r25, r18
 200:	60 f1       	brcs	.+88     	; 0x25a <getXValue+0xb8>
		x_value = -3;
	} else if (read < ADC_THRESHOLDL2) {
 202:	21 e0       	ldi	r18, 0x01	; 1
 204:	80 38       	cpi	r24, 0x80	; 128
 206:	92 07       	cpc	r25, r18
 208:	58 f1       	brcs	.+86     	; 0x260 <getXValue+0xbe>
		x_value = -2;
	} else if (read < ADC_THRESHOLDL1){
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	80 3c       	cpi	r24, 0xC0	; 192
 20e:	92 07       	cpc	r25, r18
 210:	50 f5       	brcc	.+84     	; 0x266 <getXValue+0xc4>
		x_value = -1;
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	9f ef       	ldi	r25, 0xFF	; 255
 216:	08 95       	ret
	
	int x_value;
	uint16_t read = adc_read(X_AXIS);
	
	if (read >= ADC_THRESHOLDH7) {
		x_value = 7;
 218:	87 e0       	ldi	r24, 0x07	; 7
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret
	} else if (read > ADC_THRESHOLDH6) {
		x_value = 6;
 21e:	86 e0       	ldi	r24, 0x06	; 6
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret
	} else if (read > ADC_THRESHOLDH5) {
		x_value = 5;
 224:	85 e0       	ldi	r24, 0x05	; 5
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	08 95       	ret
	} else if (read > ADC_THRESHOLDH4) {
		x_value = 4;
 22a:	84 e0       	ldi	r24, 0x04	; 4
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	08 95       	ret
	} else if (read > ADC_THRESHOLDH3) {
		x_value = 3;
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	08 95       	ret
	} else if (read > ADC_THRESHOLDH2) {
		x_value = 2;
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	08 95       	ret
	} else if (read > ADC_THRESHOLDH1) {
		x_value = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	08 95       	ret
	} else if (read <= ADC_THRESHOLDL7) {
		x_value = -7;
 242:	89 ef       	ldi	r24, 0xF9	; 249
 244:	9f ef       	ldi	r25, 0xFF	; 255
 246:	08 95       	ret
	} else if (read < ADC_THRESHOLDL6) {
		x_value = -6;
 248:	8a ef       	ldi	r24, 0xFA	; 250
 24a:	9f ef       	ldi	r25, 0xFF	; 255
 24c:	08 95       	ret
	} else if (read < ADC_THRESHOLDL5) {
		x_value = -5;
 24e:	8b ef       	ldi	r24, 0xFB	; 251
 250:	9f ef       	ldi	r25, 0xFF	; 255
 252:	08 95       	ret
	} else if (read < ADC_THRESHOLDL4) {
		x_value = -4;
 254:	8c ef       	ldi	r24, 0xFC	; 252
 256:	9f ef       	ldi	r25, 0xFF	; 255
 258:	08 95       	ret
	} else if (read < ADC_THRESHOLDL3) {
		x_value = -3;
 25a:	8d ef       	ldi	r24, 0xFD	; 253
 25c:	9f ef       	ldi	r25, 0xFF	; 255
 25e:	08 95       	ret
	} else if (read < ADC_THRESHOLDL2) {
		x_value = -2;
 260:	8e ef       	ldi	r24, 0xFE	; 254
 262:	9f ef       	ldi	r25, 0xFF	; 255
 264:	08 95       	ret
	} else if (read < ADC_THRESHOLDL1){
		x_value = -1;
	} else {
		x_value = 0;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
	}
					
	return x_value;
}
 26a:	08 95       	ret

0000026c <getYValue>:
*				value of the adc_read function.
*/
int getYValue() {
	
	int y_value;
	uint16_t read = adc_read(Y_AXIS);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 bc 00 	call	0x178	; 0x178 <adc_read>
	
	if (read >= ADC_THRESHOLDH7) {
 272:	23 e0       	ldi	r18, 0x03	; 3
 274:	80 3c       	cpi	r24, 0xC0	; 192
 276:	92 07       	cpc	r25, r18
 278:	b0 f5       	brcc	.+108    	; 0x2e6 <getYValue+0x7a>
		y_value = -7;
	} else if (read > ADC_THRESHOLDH6) {
 27a:	43 e0       	ldi	r20, 0x03	; 3
 27c:	81 38       	cpi	r24, 0x81	; 129
 27e:	94 07       	cpc	r25, r20
 280:	a8 f5       	brcc	.+106    	; 0x2ec <getYValue+0x80>
		y_value = -6;
	} else if (read > ADC_THRESHOLDH5) {
 282:	23 e0       	ldi	r18, 0x03	; 3
 284:	81 34       	cpi	r24, 0x41	; 65
 286:	92 07       	cpc	r25, r18
 288:	a0 f5       	brcc	.+104    	; 0x2f2 <getYValue+0x86>
		y_value = -5;
	} else if (read > ADC_THRESHOLDH4) {
 28a:	43 e0       	ldi	r20, 0x03	; 3
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	94 07       	cpc	r25, r20
 290:	98 f5       	brcc	.+102    	; 0x2f8 <getYValue+0x8c>
		y_value = -4;
	} else if (read > ADC_THRESHOLDH3) {
 292:	22 e0       	ldi	r18, 0x02	; 2
 294:	81 3c       	cpi	r24, 0xC1	; 193
 296:	92 07       	cpc	r25, r18
 298:	90 f5       	brcc	.+100    	; 0x2fe <getYValue+0x92>
		y_value = -3;
	} else if (read > ADC_THRESHOLDH2) {
 29a:	42 e0       	ldi	r20, 0x02	; 2
 29c:	81 38       	cpi	r24, 0x81	; 129
 29e:	94 07       	cpc	r25, r20
 2a0:	88 f5       	brcc	.+98     	; 0x304 <getYValue+0x98>
		y_value = -2;
	} else if (read > ADC_THRESHOLDH1) {
 2a2:	22 e0       	ldi	r18, 0x02	; 2
 2a4:	81 34       	cpi	r24, 0x41	; 65
 2a6:	92 07       	cpc	r25, r18
 2a8:	80 f5       	brcc	.+96     	; 0x30a <getYValue+0x9e>
		y_value = -1;
	} else if (read <= ADC_THRESHOLDL7) {
 2aa:	81 34       	cpi	r24, 0x41	; 65
 2ac:	91 05       	cpc	r25, r1
 2ae:	80 f1       	brcs	.+96     	; 0x310 <getYValue+0xa4>
		y_value = 7;
	} else if (read < ADC_THRESHOLDL6) {
 2b0:	80 38       	cpi	r24, 0x80	; 128
 2b2:	91 05       	cpc	r25, r1
 2b4:	80 f1       	brcs	.+96     	; 0x316 <getYValue+0xaa>
		y_value = 6;
	} else if (read < ADC_THRESHOLDL5) {
 2b6:	80 3c       	cpi	r24, 0xC0	; 192
 2b8:	91 05       	cpc	r25, r1
 2ba:	80 f1       	brcs	.+96     	; 0x31c <getYValue+0xb0>
		y_value = 5;
	} else if (read < ADC_THRESHOLDL4) {
 2bc:	8f 3f       	cpi	r24, 0xFF	; 255
 2be:	91 05       	cpc	r25, r1
 2c0:	81 f1       	breq	.+96     	; 0x322 <getYValue+0xb6>
 2c2:	78 f1       	brcs	.+94     	; 0x322 <getYValue+0xb6>
		y_value = 4;
	} else if (read < ADC_THRESHOLDL3) {
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	80 34       	cpi	r24, 0x40	; 64
 2c8:	94 07       	cpc	r25, r20
 2ca:	70 f1       	brcs	.+92     	; 0x328 <getYValue+0xbc>
		y_value = 3;
	} else if (read < ADC_THRESHOLDL2) {
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	80 38       	cpi	r24, 0x80	; 128
 2d0:	92 07       	cpc	r25, r18
 2d2:	68 f1       	brcs	.+90     	; 0x32e <getYValue+0xc2>
	
	int y_value;
	uint16_t read = adc_read(Y_AXIS);
	
	if (read >= ADC_THRESHOLDH7) {
		y_value = -7;
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	80 3c       	cpi	r24, 0xC0	; 192
 2dc:	94 07       	cpc	r25, r20
 2de:	48 f1       	brcs	.+82     	; 0x332 <getYValue+0xc6>
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	26 c0       	rjmp	.+76     	; 0x332 <getYValue+0xc6>
 2e6:	29 ef       	ldi	r18, 0xF9	; 249
 2e8:	3f ef       	ldi	r19, 0xFF	; 255
 2ea:	23 c0       	rjmp	.+70     	; 0x332 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH6) {
		y_value = -6;
 2ec:	2a ef       	ldi	r18, 0xFA	; 250
 2ee:	3f ef       	ldi	r19, 0xFF	; 255
 2f0:	20 c0       	rjmp	.+64     	; 0x332 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH5) {
		y_value = -5;
 2f2:	2b ef       	ldi	r18, 0xFB	; 251
 2f4:	3f ef       	ldi	r19, 0xFF	; 255
 2f6:	1d c0       	rjmp	.+58     	; 0x332 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH4) {
		y_value = -4;
 2f8:	2c ef       	ldi	r18, 0xFC	; 252
 2fa:	3f ef       	ldi	r19, 0xFF	; 255
 2fc:	1a c0       	rjmp	.+52     	; 0x332 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH3) {
		y_value = -3;
 2fe:	2d ef       	ldi	r18, 0xFD	; 253
 300:	3f ef       	ldi	r19, 0xFF	; 255
 302:	17 c0       	rjmp	.+46     	; 0x332 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH2) {
		y_value = -2;
 304:	2e ef       	ldi	r18, 0xFE	; 254
 306:	3f ef       	ldi	r19, 0xFF	; 255
 308:	14 c0       	rjmp	.+40     	; 0x332 <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH1) {
		y_value = -1;
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	3f ef       	ldi	r19, 0xFF	; 255
 30e:	11 c0       	rjmp	.+34     	; 0x332 <getYValue+0xc6>
	} else if (read <= ADC_THRESHOLDL7) {
		y_value = 7;
 310:	27 e0       	ldi	r18, 0x07	; 7
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	0e c0       	rjmp	.+28     	; 0x332 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL6) {
		y_value = 6;
 316:	26 e0       	ldi	r18, 0x06	; 6
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	0b c0       	rjmp	.+22     	; 0x332 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL5) {
		y_value = 5;
 31c:	25 e0       	ldi	r18, 0x05	; 5
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	08 c0       	rjmp	.+16     	; 0x332 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL4) {
		y_value = 4;
 322:	24 e0       	ldi	r18, 0x04	; 4
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	05 c0       	rjmp	.+10     	; 0x332 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL3) {
		y_value = 3;
 328:	23 e0       	ldi	r18, 0x03	; 3
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL2) {
		y_value = 2;
 32e:	22 e0       	ldi	r18, 0x02	; 2
 330:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		y_value = 0;
	}
	
	return y_value;
}
 332:	82 2f       	mov	r24, r18
 334:	93 2f       	mov	r25, r19
 336:	08 95       	ret

00000338 <setDirections>:
*			angle: const double - The angle of the joystick position in
*									the interval [-pi, pi]. 
* Output:	-
* Description: Sets the engine directions given the angle of the joystick.
*/
void setDirections(engine_data *edata, const double angle) {
 338:	cf 92       	push	r12
 33a:	df 92       	push	r13
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	ec 01       	movw	r28, r24
 346:	6a 01       	movw	r12, r20
 348:	7b 01       	movw	r14, r22
	
	if (angle <= 3*PI/4 && angle >= -PI/4) {
 34a:	cb 01       	movw	r24, r22
 34c:	ba 01       	movw	r22, r20
 34e:	24 ee       	ldi	r18, 0xE4	; 228
 350:	3b ec       	ldi	r19, 0xCB	; 203
 352:	46 e1       	ldi	r20, 0x16	; 22
 354:	50 e4       	ldi	r21, 0x40	; 64
 356:	0e 94 45 06 	call	0xc8a	; 0xc8a <__cmpsf2>
 35a:	18 16       	cp	r1, r24
 35c:	64 f0       	brlt	.+24     	; 0x376 <setDirections+0x3e>
 35e:	c7 01       	movw	r24, r14
 360:	b6 01       	movw	r22, r12
 362:	2b ed       	ldi	r18, 0xDB	; 219
 364:	3f e0       	ldi	r19, 0x0F	; 15
 366:	49 e4       	ldi	r20, 0x49	; 73
 368:	5f eb       	ldi	r21, 0xBF	; 191
 36a:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 36e:	88 23       	and	r24, r24
 370:	14 f0       	brlt	.+4      	; 0x376 <setDirections+0x3e>
		edata->left_engine_dir = FORWARD;
 372:	18 82       	st	Y, r1
 374:	02 c0       	rjmp	.+4      	; 0x37a <setDirections+0x42>
	} else {
		edata->left_engine_dir = BACKWARD;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	88 83       	st	Y, r24
	}
	
	if (angle <= PI/4 && angle >= -3*PI/4) {
 37a:	c7 01       	movw	r24, r14
 37c:	b6 01       	movw	r22, r12
 37e:	2b ed       	ldi	r18, 0xDB	; 219
 380:	3f e0       	ldi	r19, 0x0F	; 15
 382:	49 e4       	ldi	r20, 0x49	; 73
 384:	5f e3       	ldi	r21, 0x3F	; 63
 386:	0e 94 45 06 	call	0xc8a	; 0xc8a <__cmpsf2>
 38a:	18 16       	cp	r1, r24
 38c:	6c f0       	brlt	.+26     	; 0x3a8 <setDirections+0x70>
 38e:	c7 01       	movw	r24, r14
 390:	b6 01       	movw	r22, r12
 392:	24 ee       	ldi	r18, 0xE4	; 228
 394:	3b ec       	ldi	r19, 0xCB	; 203
 396:	46 e1       	ldi	r20, 0x16	; 22
 398:	50 ec       	ldi	r21, 0xC0	; 192
 39a:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 39e:	88 23       	and	r24, r24
 3a0:	1c f0       	brlt	.+6      	; 0x3a8 <setDirections+0x70>
		edata->right_engine_dir = BACKWARD;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	89 83       	std	Y+1, r24	; 0x01
 3a6:	01 c0       	rjmp	.+2      	; 0x3aa <setDirections+0x72>
	} else {
		edata->right_engine_dir = FORWARD;
 3a8:	19 82       	std	Y+1, r1	; 0x01
	}
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	df 90       	pop	r13
 3b4:	cf 90       	pop	r12
 3b6:	08 95       	ret

000003b8 <setThrottles>:
*			x_value: const int - The current x position of the joystick.
*			y_value: const int - The current y position of the joystick.
* Output:	-
* Description: Sets the engine throttles. 
*/
void setThrottles(engine_data *edata, const double angle, const int x_value, const int y_value) {
 3b8:	6f 92       	push	r6
 3ba:	7f 92       	push	r7
 3bc:	8f 92       	push	r8
 3be:	9f 92       	push	r9
 3c0:	af 92       	push	r10
 3c2:	bf 92       	push	r11
 3c4:	cf 92       	push	r12
 3c6:	df 92       	push	r13
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	3c 01       	movw	r6, r24
 3d6:	6a 01       	movw	r12, r20
 3d8:	7b 01       	movw	r14, r22
 3da:	c2 2f       	mov	r28, r18
 3dc:	d3 2f       	mov	r29, r19
	* 
	* The head engines are:
	* Left engine		for [0, PI/2) and [-PI, -PI/2)  
	* Right engine		for [PI/2, PI) and [-PI/2, 0). 
	*/
	if (angle >= 0 && angle < PI/4) {
 3de:	cb 01       	movw	r24, r22
 3e0:	ba 01       	movw	r22, r20
 3e2:	20 e0       	ldi	r18, 0x00	; 0
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	a9 01       	movw	r20, r18
 3e8:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 3ec:	88 23       	and	r24, r24
 3ee:	d4 f1       	brlt	.+116    	; 0x464 <setThrottles+0xac>
 3f0:	c7 01       	movw	r24, r14
 3f2:	b6 01       	movw	r22, r12
 3f4:	2b ed       	ldi	r18, 0xDB	; 219
 3f6:	3f e0       	ldi	r19, 0x0F	; 15
 3f8:	49 e4       	ldi	r20, 0x49	; 73
 3fa:	5f e3       	ldi	r21, 0x3F	; 63
 3fc:	0e 94 45 06 	call	0xc8a	; 0xc8a <__cmpsf2>
 400:	88 23       	and	r24, r24
 402:	84 f5       	brge	.+96     	; 0x464 <setThrottles+0xac>
		factor = 1 - angle/(PI/4);
		edata->left_engine_throttle = (double)(abs(x_value));
 404:	6c 2f       	mov	r22, r28
 406:	7d 2f       	mov	r23, r29
 408:	77 23       	and	r23, r23
 40a:	1c f4       	brge	.+6      	; 0x412 <setThrottles+0x5a>
 40c:	70 95       	com	r23
 40e:	61 95       	neg	r22
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	88 27       	eor	r24, r24
 414:	77 fd       	sbrc	r23, 7
 416:	80 95       	com	r24
 418:	98 2f       	mov	r25, r24
 41a:	0e 94 b3 06 	call	0xd66	; 0xd66 <__floatsisf>
 41e:	4b 01       	movw	r8, r22
 420:	5c 01       	movw	r10, r24
 422:	f3 01       	movw	r30, r6
 424:	62 83       	std	Z+2, r22	; 0x02
 426:	73 83       	std	Z+3, r23	; 0x03
 428:	84 83       	std	Z+4, r24	; 0x04
 42a:	95 83       	std	Z+5, r25	; 0x05
	* The head engines are:
	* Left engine		for [0, PI/2) and [-PI, -PI/2)  
	* Right engine		for [PI/2, PI) and [-PI/2, 0). 
	*/
	if (angle >= 0 && angle < PI/4) {
		factor = 1 - angle/(PI/4);
 42c:	c7 01       	movw	r24, r14
 42e:	b6 01       	movw	r22, r12
 430:	2b ed       	ldi	r18, 0xDB	; 219
 432:	3f e0       	ldi	r19, 0x0F	; 15
 434:	49 e4       	ldi	r20, 0x49	; 73
 436:	5f e3       	ldi	r21, 0x3F	; 63
 438:	0e 94 49 06 	call	0xc92	; 0xc92 <__divsf3>
 43c:	9b 01       	movw	r18, r22
 43e:	ac 01       	movw	r20, r24
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	80 e8       	ldi	r24, 0x80	; 128
 446:	9f e3       	ldi	r25, 0x3F	; 63
 448:	0e 94 7e 05 	call	0xafc	; 0xafc <__subsf3>
		edata->left_engine_throttle = (double)(abs(x_value));
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
 44c:	a5 01       	movw	r20, r10
 44e:	94 01       	movw	r18, r8
 450:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
 454:	dc 01       	movw	r26, r24
 456:	cb 01       	movw	r24, r22
 458:	f3 01       	movw	r30, r6
 45a:	86 83       	std	Z+6, r24	; 0x06
 45c:	97 83       	std	Z+7, r25	; 0x07
 45e:	a0 87       	std	Z+8, r26	; 0x08
 460:	b1 87       	std	Z+9, r27	; 0x09
 462:	cd c1       	rjmp	.+922    	; 0x7fe <setThrottles+0x446>
		
	} else if (angle >= PI/4 && angle < PI/2) {
 464:	c7 01       	movw	r24, r14
 466:	b6 01       	movw	r22, r12
 468:	2b ed       	ldi	r18, 0xDB	; 219
 46a:	3f e0       	ldi	r19, 0x0F	; 15
 46c:	49 e4       	ldi	r20, 0x49	; 73
 46e:	5f e3       	ldi	r21, 0x3F	; 63
 470:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 474:	88 23       	and	r24, r24
 476:	c4 f1       	brlt	.+112    	; 0x4e8 <setThrottles+0x130>
 478:	c7 01       	movw	r24, r14
 47a:	b6 01       	movw	r22, r12
 47c:	2b ed       	ldi	r18, 0xDB	; 219
 47e:	3f e0       	ldi	r19, 0x0F	; 15
 480:	49 ec       	ldi	r20, 0xC9	; 201
 482:	5f e3       	ldi	r21, 0x3F	; 63
 484:	0e 94 45 06 	call	0xc8a	; 0xc8a <__cmpsf2>
 488:	88 23       	and	r24, r24
 48a:	74 f5       	brge	.+92     	; 0x4e8 <setThrottles+0x130>
		factor = (angle - PI/4)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
 48c:	60 2f       	mov	r22, r16
 48e:	71 2f       	mov	r23, r17
 490:	77 23       	and	r23, r23
 492:	1c f4       	brge	.+6      	; 0x49a <setThrottles+0xe2>
 494:	70 95       	com	r23
 496:	61 95       	neg	r22
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	88 27       	eor	r24, r24
 49c:	77 fd       	sbrc	r23, 7
 49e:	80 95       	com	r24
 4a0:	98 2f       	mov	r25, r24
 4a2:	0e 94 b3 06 	call	0xd66	; 0xd66 <__floatsisf>
 4a6:	4b 01       	movw	r8, r22
 4a8:	5c 01       	movw	r10, r24
 4aa:	f3 01       	movw	r30, r6
 4ac:	62 83       	std	Z+2, r22	; 0x02
 4ae:	73 83       	std	Z+3, r23	; 0x03
 4b0:	84 83       	std	Z+4, r24	; 0x04
 4b2:	95 83       	std	Z+5, r25	; 0x05
		factor = 1 - angle/(PI/4);
		edata->left_engine_throttle = (double)(abs(x_value));
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
		
	} else if (angle >= PI/4 && angle < PI/2) {
		factor = (angle - PI/4)/(PI/4);
 4b4:	c7 01       	movw	r24, r14
 4b6:	b6 01       	movw	r22, r12
 4b8:	2b ed       	ldi	r18, 0xDB	; 219
 4ba:	3f e0       	ldi	r19, 0x0F	; 15
 4bc:	49 e4       	ldi	r20, 0x49	; 73
 4be:	5f e3       	ldi	r21, 0x3F	; 63
 4c0:	0e 94 7e 05 	call	0xafc	; 0xafc <__subsf3>
 4c4:	2b ed       	ldi	r18, 0xDB	; 219
 4c6:	3f e0       	ldi	r19, 0x0F	; 15
 4c8:	49 e4       	ldi	r20, 0x49	; 73
 4ca:	5f e3       	ldi	r21, 0x3F	; 63
 4cc:	0e 94 49 06 	call	0xc92	; 0xc92 <__divsf3>
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
 4d0:	a5 01       	movw	r20, r10
 4d2:	94 01       	movw	r18, r8
 4d4:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
 4d8:	dc 01       	movw	r26, r24
 4da:	cb 01       	movw	r24, r22
 4dc:	f3 01       	movw	r30, r6
 4de:	86 83       	std	Z+6, r24	; 0x06
 4e0:	97 83       	std	Z+7, r25	; 0x07
 4e2:	a0 87       	std	Z+8, r26	; 0x08
 4e4:	b1 87       	std	Z+9, r27	; 0x09
 4e6:	8b c1       	rjmp	.+790    	; 0x7fe <setThrottles+0x446>
		
	} else if (angle >= PI/2 && angle < 3*PI/4) {
 4e8:	c7 01       	movw	r24, r14
 4ea:	b6 01       	movw	r22, r12
 4ec:	2b ed       	ldi	r18, 0xDB	; 219
 4ee:	3f e0       	ldi	r19, 0x0F	; 15
 4f0:	49 ec       	ldi	r20, 0xC9	; 201
 4f2:	5f e3       	ldi	r21, 0x3F	; 63
 4f4:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 4f8:	88 23       	and	r24, r24
 4fa:	0c f4       	brge	.+2      	; 0x4fe <setThrottles+0x146>
 4fc:	40 c0       	rjmp	.+128    	; 0x57e <setThrottles+0x1c6>
 4fe:	c7 01       	movw	r24, r14
 500:	b6 01       	movw	r22, r12
 502:	24 ee       	ldi	r18, 0xE4	; 228
 504:	3b ec       	ldi	r19, 0xCB	; 203
 506:	46 e1       	ldi	r20, 0x16	; 22
 508:	50 e4       	ldi	r21, 0x40	; 64
 50a:	0e 94 45 06 	call	0xc8a	; 0xc8a <__cmpsf2>
 50e:	88 23       	and	r24, r24
 510:	b4 f5       	brge	.+108    	; 0x57e <setThrottles+0x1c6>
		factor = 1 - (angle - PI/2)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
 512:	60 2f       	mov	r22, r16
 514:	71 2f       	mov	r23, r17
 516:	77 23       	and	r23, r23
 518:	1c f4       	brge	.+6      	; 0x520 <setThrottles+0x168>
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	88 27       	eor	r24, r24
 522:	77 fd       	sbrc	r23, 7
 524:	80 95       	com	r24
 526:	98 2f       	mov	r25, r24
 528:	0e 94 b3 06 	call	0xd66	; 0xd66 <__floatsisf>
 52c:	4b 01       	movw	r8, r22
 52e:	5c 01       	movw	r10, r24
 530:	f3 01       	movw	r30, r6
 532:	66 83       	std	Z+6, r22	; 0x06
 534:	77 83       	std	Z+7, r23	; 0x07
 536:	80 87       	std	Z+8, r24	; 0x08
 538:	91 87       	std	Z+9, r25	; 0x09
		factor = (angle - PI/4)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
		
	} else if (angle >= PI/2 && angle < 3*PI/4) {
		factor = 1 - (angle - PI/2)/(PI/4);
 53a:	c7 01       	movw	r24, r14
 53c:	b6 01       	movw	r22, r12
 53e:	2b ed       	ldi	r18, 0xDB	; 219
 540:	3f e0       	ldi	r19, 0x0F	; 15
 542:	49 ec       	ldi	r20, 0xC9	; 201
 544:	5f e3       	ldi	r21, 0x3F	; 63
 546:	0e 94 7e 05 	call	0xafc	; 0xafc <__subsf3>
 54a:	2b ed       	ldi	r18, 0xDB	; 219
 54c:	3f e0       	ldi	r19, 0x0F	; 15
 54e:	49 e4       	ldi	r20, 0x49	; 73
 550:	5f e3       	ldi	r21, 0x3F	; 63
 552:	0e 94 49 06 	call	0xc92	; 0xc92 <__divsf3>
 556:	9b 01       	movw	r18, r22
 558:	ac 01       	movw	r20, r24
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	80 e8       	ldi	r24, 0x80	; 128
 560:	9f e3       	ldi	r25, 0x3F	; 63
 562:	0e 94 7e 05 	call	0xafc	; 0xafc <__subsf3>
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
 566:	a5 01       	movw	r20, r10
 568:	94 01       	movw	r18, r8
 56a:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
 56e:	dc 01       	movw	r26, r24
 570:	cb 01       	movw	r24, r22
 572:	f3 01       	movw	r30, r6
 574:	82 83       	std	Z+2, r24	; 0x02
 576:	93 83       	std	Z+3, r25	; 0x03
 578:	a4 83       	std	Z+4, r26	; 0x04
 57a:	b5 83       	std	Z+5, r27	; 0x05
 57c:	40 c1       	rjmp	.+640    	; 0x7fe <setThrottles+0x446>
		
	} else if (angle >= 3*PI/4 && angle <= PI) {
 57e:	c7 01       	movw	r24, r14
 580:	b6 01       	movw	r22, r12
 582:	24 ee       	ldi	r18, 0xE4	; 228
 584:	3b ec       	ldi	r19, 0xCB	; 203
 586:	46 e1       	ldi	r20, 0x16	; 22
 588:	50 e4       	ldi	r21, 0x40	; 64
 58a:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 58e:	88 23       	and	r24, r24
 590:	c4 f1       	brlt	.+112    	; 0x602 <setThrottles+0x24a>
 592:	c7 01       	movw	r24, r14
 594:	b6 01       	movw	r22, r12
 596:	2b ed       	ldi	r18, 0xDB	; 219
 598:	3f e0       	ldi	r19, 0x0F	; 15
 59a:	49 e4       	ldi	r20, 0x49	; 73
 59c:	50 e4       	ldi	r21, 0x40	; 64
 59e:	0e 94 45 06 	call	0xc8a	; 0xc8a <__cmpsf2>
 5a2:	18 16       	cp	r1, r24
 5a4:	74 f1       	brlt	.+92     	; 0x602 <setThrottles+0x24a>
		factor = (angle - 3*PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
 5a6:	6c 2f       	mov	r22, r28
 5a8:	7d 2f       	mov	r23, r29
 5aa:	77 23       	and	r23, r23
 5ac:	1c f4       	brge	.+6      	; 0x5b4 <setThrottles+0x1fc>
 5ae:	70 95       	com	r23
 5b0:	61 95       	neg	r22
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	88 27       	eor	r24, r24
 5b6:	77 fd       	sbrc	r23, 7
 5b8:	80 95       	com	r24
 5ba:	98 2f       	mov	r25, r24
 5bc:	0e 94 b3 06 	call	0xd66	; 0xd66 <__floatsisf>
 5c0:	4b 01       	movw	r8, r22
 5c2:	5c 01       	movw	r10, r24
 5c4:	f3 01       	movw	r30, r6
 5c6:	66 83       	std	Z+6, r22	; 0x06
 5c8:	77 83       	std	Z+7, r23	; 0x07
 5ca:	80 87       	std	Z+8, r24	; 0x08
 5cc:	91 87       	std	Z+9, r25	; 0x09
		factor = 1 - (angle - PI/2)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle >= 3*PI/4 && angle <= PI) {
		factor = (angle - 3*PI/4)/(PI/4);
 5ce:	c7 01       	movw	r24, r14
 5d0:	b6 01       	movw	r22, r12
 5d2:	24 ee       	ldi	r18, 0xE4	; 228
 5d4:	3b ec       	ldi	r19, 0xCB	; 203
 5d6:	46 e1       	ldi	r20, 0x16	; 22
 5d8:	50 e4       	ldi	r21, 0x40	; 64
 5da:	0e 94 7e 05 	call	0xafc	; 0xafc <__subsf3>
 5de:	2b ed       	ldi	r18, 0xDB	; 219
 5e0:	3f e0       	ldi	r19, 0x0F	; 15
 5e2:	49 e4       	ldi	r20, 0x49	; 73
 5e4:	5f e3       	ldi	r21, 0x3F	; 63
 5e6:	0e 94 49 06 	call	0xc92	; 0xc92 <__divsf3>
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
 5ea:	a5 01       	movw	r20, r10
 5ec:	94 01       	movw	r18, r8
 5ee:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
 5f2:	dc 01       	movw	r26, r24
 5f4:	cb 01       	movw	r24, r22
 5f6:	f3 01       	movw	r30, r6
 5f8:	82 83       	std	Z+2, r24	; 0x02
 5fa:	93 83       	std	Z+3, r25	; 0x03
 5fc:	a4 83       	std	Z+4, r26	; 0x04
 5fe:	b5 83       	std	Z+5, r27	; 0x05
 600:	fe c0       	rjmp	.+508    	; 0x7fe <setThrottles+0x446>
		
	} else if (angle < 0 && angle > -PI/4) {
 602:	c7 01       	movw	r24, r14
 604:	b6 01       	movw	r22, r12
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	a9 01       	movw	r20, r18
 60c:	0e 94 45 06 	call	0xc8a	; 0xc8a <__cmpsf2>
 610:	88 23       	and	r24, r24
 612:	c4 f5       	brge	.+112    	; 0x684 <setThrottles+0x2cc>
 614:	c7 01       	movw	r24, r14
 616:	b6 01       	movw	r22, r12
 618:	2b ed       	ldi	r18, 0xDB	; 219
 61a:	3f e0       	ldi	r19, 0x0F	; 15
 61c:	49 e4       	ldi	r20, 0x49	; 73
 61e:	5f eb       	ldi	r21, 0xBF	; 191
 620:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 624:	18 16       	cp	r1, r24
 626:	74 f5       	brge	.+92     	; 0x684 <setThrottles+0x2cc>
		factor = 1 - angle*(-1)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
 628:	6c 2f       	mov	r22, r28
 62a:	7d 2f       	mov	r23, r29
 62c:	77 23       	and	r23, r23
 62e:	1c f4       	brge	.+6      	; 0x636 <setThrottles+0x27e>
 630:	70 95       	com	r23
 632:	61 95       	neg	r22
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	88 27       	eor	r24, r24
 638:	77 fd       	sbrc	r23, 7
 63a:	80 95       	com	r24
 63c:	98 2f       	mov	r25, r24
 63e:	0e 94 b3 06 	call	0xd66	; 0xd66 <__floatsisf>
 642:	4b 01       	movw	r8, r22
 644:	5c 01       	movw	r10, r24
 646:	f3 01       	movw	r30, r6
 648:	66 83       	std	Z+6, r22	; 0x06
 64a:	77 83       	std	Z+7, r23	; 0x07
 64c:	80 87       	std	Z+8, r24	; 0x08
 64e:	91 87       	std	Z+9, r25	; 0x09
		factor = (angle - 3*PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle < 0 && angle > -PI/4) {
		factor = 1 - angle*(-1)/(PI/4);
 650:	c7 01       	movw	r24, r14
 652:	b6 01       	movw	r22, r12
 654:	2b ed       	ldi	r18, 0xDB	; 219
 656:	3f e0       	ldi	r19, 0x0F	; 15
 658:	49 e4       	ldi	r20, 0x49	; 73
 65a:	5f e3       	ldi	r21, 0x3F	; 63
 65c:	0e 94 49 06 	call	0xc92	; 0xc92 <__divsf3>
 660:	20 e0       	ldi	r18, 0x00	; 0
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	40 e8       	ldi	r20, 0x80	; 128
 666:	5f e3       	ldi	r21, 0x3F	; 63
 668:	0e 94 7f 05 	call	0xafe	; 0xafe <__addsf3>
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
 66c:	a5 01       	movw	r20, r10
 66e:	94 01       	movw	r18, r8
 670:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
 674:	dc 01       	movw	r26, r24
 676:	cb 01       	movw	r24, r22
 678:	f3 01       	movw	r30, r6
 67a:	82 83       	std	Z+2, r24	; 0x02
 67c:	93 83       	std	Z+3, r25	; 0x03
 67e:	a4 83       	std	Z+4, r26	; 0x04
 680:	b5 83       	std	Z+5, r27	; 0x05
 682:	bd c0       	rjmp	.+378    	; 0x7fe <setThrottles+0x446>
		
	} else if (angle <= -PI/4 && angle > -PI/2) {
 684:	c7 01       	movw	r24, r14
 686:	b6 01       	movw	r22, r12
 688:	2b ed       	ldi	r18, 0xDB	; 219
 68a:	3f e0       	ldi	r19, 0x0F	; 15
 68c:	49 e4       	ldi	r20, 0x49	; 73
 68e:	5f eb       	ldi	r21, 0xBF	; 191
 690:	0e 94 45 06 	call	0xc8a	; 0xc8a <__cmpsf2>
 694:	18 16       	cp	r1, r24
 696:	cc f1       	brlt	.+114    	; 0x70a <setThrottles+0x352>
 698:	c7 01       	movw	r24, r14
 69a:	b6 01       	movw	r22, r12
 69c:	2b ed       	ldi	r18, 0xDB	; 219
 69e:	3f e0       	ldi	r19, 0x0F	; 15
 6a0:	49 ec       	ldi	r20, 0xC9	; 201
 6a2:	5f eb       	ldi	r21, 0xBF	; 191
 6a4:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 6a8:	18 16       	cp	r1, r24
 6aa:	7c f5       	brge	.+94     	; 0x70a <setThrottles+0x352>
		factor = (angle*(-1) - PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
 6ac:	60 2f       	mov	r22, r16
 6ae:	71 2f       	mov	r23, r17
 6b0:	77 23       	and	r23, r23
 6b2:	1c f4       	brge	.+6      	; 0x6ba <setThrottles+0x302>
 6b4:	70 95       	com	r23
 6b6:	61 95       	neg	r22
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	88 27       	eor	r24, r24
 6bc:	77 fd       	sbrc	r23, 7
 6be:	80 95       	com	r24
 6c0:	98 2f       	mov	r25, r24
 6c2:	0e 94 b3 06 	call	0xd66	; 0xd66 <__floatsisf>
 6c6:	4b 01       	movw	r8, r22
 6c8:	5c 01       	movw	r10, r24
 6ca:	f3 01       	movw	r30, r6
 6cc:	66 83       	std	Z+6, r22	; 0x06
 6ce:	77 83       	std	Z+7, r23	; 0x07
 6d0:	80 87       	std	Z+8, r24	; 0x08
 6d2:	91 87       	std	Z+9, r25	; 0x09
		factor = 1 - angle*(-1)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle <= -PI/4 && angle > -PI/2) {
		factor = (angle*(-1) - PI/4)/(PI/4);
 6d4:	c7 01       	movw	r24, r14
 6d6:	b6 01       	movw	r22, r12
 6d8:	90 58       	subi	r25, 0x80	; 128
 6da:	2b ed       	ldi	r18, 0xDB	; 219
 6dc:	3f e0       	ldi	r19, 0x0F	; 15
 6de:	49 e4       	ldi	r20, 0x49	; 73
 6e0:	5f e3       	ldi	r21, 0x3F	; 63
 6e2:	0e 94 7e 05 	call	0xafc	; 0xafc <__subsf3>
 6e6:	2b ed       	ldi	r18, 0xDB	; 219
 6e8:	3f e0       	ldi	r19, 0x0F	; 15
 6ea:	49 e4       	ldi	r20, 0x49	; 73
 6ec:	5f e3       	ldi	r21, 0x3F	; 63
 6ee:	0e 94 49 06 	call	0xc92	; 0xc92 <__divsf3>
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
 6f2:	a5 01       	movw	r20, r10
 6f4:	94 01       	movw	r18, r8
 6f6:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
 6fa:	dc 01       	movw	r26, r24
 6fc:	cb 01       	movw	r24, r22
 6fe:	f3 01       	movw	r30, r6
 700:	82 83       	std	Z+2, r24	; 0x02
 702:	93 83       	std	Z+3, r25	; 0x03
 704:	a4 83       	std	Z+4, r26	; 0x04
 706:	b5 83       	std	Z+5, r27	; 0x05
 708:	7a c0       	rjmp	.+244    	; 0x7fe <setThrottles+0x446>
		
	} else if (angle <= -PI/2 && angle > -3*PI/4) {
 70a:	c7 01       	movw	r24, r14
 70c:	b6 01       	movw	r22, r12
 70e:	2b ed       	ldi	r18, 0xDB	; 219
 710:	3f e0       	ldi	r19, 0x0F	; 15
 712:	49 ec       	ldi	r20, 0xC9	; 201
 714:	5f eb       	ldi	r21, 0xBF	; 191
 716:	0e 94 45 06 	call	0xc8a	; 0xc8a <__cmpsf2>
 71a:	18 16       	cp	r1, r24
 71c:	0c f4       	brge	.+2      	; 0x720 <setThrottles+0x368>
 71e:	41 c0       	rjmp	.+130    	; 0x7a2 <setThrottles+0x3ea>
 720:	c7 01       	movw	r24, r14
 722:	b6 01       	movw	r22, r12
 724:	24 ee       	ldi	r18, 0xE4	; 228
 726:	3b ec       	ldi	r19, 0xCB	; 203
 728:	46 e1       	ldi	r20, 0x16	; 22
 72a:	50 ec       	ldi	r21, 0xC0	; 192
 72c:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 730:	18 16       	cp	r1, r24
 732:	bc f5       	brge	.+110    	; 0x7a2 <setThrottles+0x3ea>
		factor = 1 - (angle*(-1) - PI/2)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
 734:	60 2f       	mov	r22, r16
 736:	71 2f       	mov	r23, r17
 738:	77 23       	and	r23, r23
 73a:	1c f4       	brge	.+6      	; 0x742 <setThrottles+0x38a>
 73c:	70 95       	com	r23
 73e:	61 95       	neg	r22
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	88 27       	eor	r24, r24
 744:	77 fd       	sbrc	r23, 7
 746:	80 95       	com	r24
 748:	98 2f       	mov	r25, r24
 74a:	0e 94 b3 06 	call	0xd66	; 0xd66 <__floatsisf>
 74e:	4b 01       	movw	r8, r22
 750:	5c 01       	movw	r10, r24
 752:	f3 01       	movw	r30, r6
 754:	62 83       	std	Z+2, r22	; 0x02
 756:	73 83       	std	Z+3, r23	; 0x03
 758:	84 83       	std	Z+4, r24	; 0x04
 75a:	95 83       	std	Z+5, r25	; 0x05
		factor = (angle*(-1) - PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle <= -PI/2 && angle > -3*PI/4) {
		factor = 1 - (angle*(-1) - PI/2)/(PI/4);
 75c:	c7 01       	movw	r24, r14
 75e:	b6 01       	movw	r22, r12
 760:	90 58       	subi	r25, 0x80	; 128
 762:	2b ed       	ldi	r18, 0xDB	; 219
 764:	3f e0       	ldi	r19, 0x0F	; 15
 766:	49 ec       	ldi	r20, 0xC9	; 201
 768:	5f e3       	ldi	r21, 0x3F	; 63
 76a:	0e 94 7e 05 	call	0xafc	; 0xafc <__subsf3>
 76e:	2b ed       	ldi	r18, 0xDB	; 219
 770:	3f e0       	ldi	r19, 0x0F	; 15
 772:	49 e4       	ldi	r20, 0x49	; 73
 774:	5f e3       	ldi	r21, 0x3F	; 63
 776:	0e 94 49 06 	call	0xc92	; 0xc92 <__divsf3>
 77a:	9b 01       	movw	r18, r22
 77c:	ac 01       	movw	r20, r24
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	80 e8       	ldi	r24, 0x80	; 128
 784:	9f e3       	ldi	r25, 0x3F	; 63
 786:	0e 94 7e 05 	call	0xafc	; 0xafc <__subsf3>
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
 78a:	a5 01       	movw	r20, r10
 78c:	94 01       	movw	r18, r8
 78e:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
 792:	dc 01       	movw	r26, r24
 794:	cb 01       	movw	r24, r22
 796:	f3 01       	movw	r30, r6
 798:	86 83       	std	Z+6, r24	; 0x06
 79a:	97 83       	std	Z+7, r25	; 0x07
 79c:	a0 87       	std	Z+8, r26	; 0x08
 79e:	b1 87       	std	Z+9, r27	; 0x09
 7a0:	2e c0       	rjmp	.+92     	; 0x7fe <setThrottles+0x446>
		
	} else {
		factor = (angle*(-1) - 3*PI/4)/(PI/4);
		edata->left_engine_throttle = (double)abs(x_value);
 7a2:	6c 2f       	mov	r22, r28
 7a4:	7d 2f       	mov	r23, r29
 7a6:	77 23       	and	r23, r23
 7a8:	1c f4       	brge	.+6      	; 0x7b0 <setThrottles+0x3f8>
 7aa:	70 95       	com	r23
 7ac:	61 95       	neg	r22
 7ae:	7f 4f       	sbci	r23, 0xFF	; 255
 7b0:	88 27       	eor	r24, r24
 7b2:	77 fd       	sbrc	r23, 7
 7b4:	80 95       	com	r24
 7b6:	98 2f       	mov	r25, r24
 7b8:	0e 94 b3 06 	call	0xd66	; 0xd66 <__floatsisf>
 7bc:	4b 01       	movw	r8, r22
 7be:	5c 01       	movw	r10, r24
 7c0:	f3 01       	movw	r30, r6
 7c2:	62 83       	std	Z+2, r22	; 0x02
 7c4:	73 83       	std	Z+3, r23	; 0x03
 7c6:	84 83       	std	Z+4, r24	; 0x04
 7c8:	95 83       	std	Z+5, r25	; 0x05
		factor = 1 - (angle*(-1) - PI/2)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
		
	} else {
		factor = (angle*(-1) - 3*PI/4)/(PI/4);
 7ca:	c7 01       	movw	r24, r14
 7cc:	b6 01       	movw	r22, r12
 7ce:	90 58       	subi	r25, 0x80	; 128
 7d0:	24 ee       	ldi	r18, 0xE4	; 228
 7d2:	3b ec       	ldi	r19, 0xCB	; 203
 7d4:	46 e1       	ldi	r20, 0x16	; 22
 7d6:	50 e4       	ldi	r21, 0x40	; 64
 7d8:	0e 94 7e 05 	call	0xafc	; 0xafc <__subsf3>
 7dc:	2b ed       	ldi	r18, 0xDB	; 219
 7de:	3f e0       	ldi	r19, 0x0F	; 15
 7e0:	49 e4       	ldi	r20, 0x49	; 73
 7e2:	5f e3       	ldi	r21, 0x3F	; 63
 7e4:	0e 94 49 06 	call	0xc92	; 0xc92 <__divsf3>
		edata->left_engine_throttle = (double)abs(x_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
 7e8:	a5 01       	movw	r20, r10
 7ea:	94 01       	movw	r18, r8
 7ec:	0e 94 93 07 	call	0xf26	; 0xf26 <__mulsf3>
 7f0:	dc 01       	movw	r26, r24
 7f2:	cb 01       	movw	r24, r22
 7f4:	f3 01       	movw	r30, r6
 7f6:	86 83       	std	Z+6, r24	; 0x06
 7f8:	97 83       	std	Z+7, r25	; 0x07
 7fa:	a0 87       	std	Z+8, r26	; 0x08
 7fc:	b1 87       	std	Z+9, r27	; 0x09
	}
}
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	1f 91       	pop	r17
 804:	0f 91       	pop	r16
 806:	ff 90       	pop	r15
 808:	ef 90       	pop	r14
 80a:	df 90       	pop	r13
 80c:	cf 90       	pop	r12
 80e:	bf 90       	pop	r11
 810:	af 90       	pop	r10
 812:	9f 90       	pop	r9
 814:	8f 90       	pop	r8
 816:	7f 90       	pop	r7
 818:	6f 90       	pop	r6
 81a:	08 95       	ret

0000081c <main>:

/*Define test buttons. */
#define SW1 PA2
#define SW2 PA3

int main(void) {
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	cd b7       	in	r28, 0x3d	; 61
 822:	de b7       	in	r29, 0x3e	; 62
 824:	2a 97       	sbiw	r28, 0x0a	; 10
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	f8 94       	cli
 82a:	de bf       	out	0x3e, r29	; 62
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	cd bf       	out	0x3d, r28	; 61
    /* Engine data container. */
	engine_data *edata, ed;
	edata = &ed;
	
	/* Initialize setup. */
	init();
 830:	0e 94 9a 00 	call	0x134	; 0x134 <init>

	/* Main loop. */
	while (1) {
		
		/* Get coordinates. */
		x_value = getXValue();
 834:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <getXValue>
 838:	90 93 01 01 	sts	0x0101, r25
 83c:	80 93 00 01 	sts	0x0100, r24
		y_value = getYValue();
 840:	0e 94 36 01 	call	0x26c	; 0x26c <getYValue>
 844:	90 93 04 01 	sts	0x0104, r25
 848:	80 93 03 01 	sts	0x0103, r24
		
		/* Calculate angle of the position in a coordinate system. */
		double angle = atan2((double)y_value, (double)x_value);
 84c:	9c 01       	movw	r18, r24
 84e:	b9 01       	movw	r22, r18
 850:	88 27       	eor	r24, r24
 852:	77 fd       	sbrc	r23, 7
 854:	80 95       	com	r24
 856:	98 2f       	mov	r25, r24
 858:	0e 94 b3 06 	call	0xd66	; 0xd66 <__floatsisf>
 85c:	6b 01       	movw	r12, r22
 85e:	7c 01       	movw	r14, r24
 860:	60 91 00 01 	lds	r22, 0x0100
 864:	70 91 01 01 	lds	r23, 0x0101
 868:	88 27       	eor	r24, r24
 86a:	77 fd       	sbrc	r23, 7
 86c:	80 95       	com	r24
 86e:	98 2f       	mov	r25, r24
 870:	0e 94 b3 06 	call	0xd66	; 0xd66 <__floatsisf>
 874:	9b 01       	movw	r18, r22
 876:	ac 01       	movw	r20, r24
 878:	c7 01       	movw	r24, r14
 87a:	b6 01       	movw	r22, r12
 87c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <atan2>
 880:	6b 01       	movw	r12, r22
 882:	7c 01       	movw	r14, r24
		
		/* Set all info in edata. */
		setDirections(edata, angle);
 884:	ce 01       	movw	r24, r28
 886:	01 96       	adiw	r24, 0x01	; 1
 888:	b7 01       	movw	r22, r14
 88a:	a6 01       	movw	r20, r12
 88c:	0e 94 9c 01 	call	0x338	; 0x338 <setDirections>
		setThrottles(edata, angle, x_value, y_value);
 890:	20 91 00 01 	lds	r18, 0x0100
 894:	30 91 01 01 	lds	r19, 0x0101
 898:	00 91 03 01 	lds	r16, 0x0103
 89c:	10 91 04 01 	lds	r17, 0x0104
 8a0:	ce 01       	movw	r24, r28
 8a2:	01 96       	adiw	r24, 0x01	; 1
 8a4:	b7 01       	movw	r22, r14
 8a6:	a6 01       	movw	r20, r12
 8a8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <setThrottles>
		
		/* Send data via bluetooth. */
//		USART_Transmit(send_data);

		/*Set buttons as input*/
		DDRA &= ~_BV(SW1);
 8ac:	0a 98       	cbi	0x01, 2	; 1
		DDRA &= ~_BV(SW2);
 8ae:	0b 98       	cbi	0x01, 3	; 1
		
		/* Set the LED pin as an output. */
		DDRA |= _BV(LED_H);
 8b0:	0f 9a       	sbi	0x01, 7	; 1
		DDRA |= _BV(LED_V);
 8b2:	0e 9a       	sbi	0x01, 6	; 1
		DDRA |= _BV(LED_U);
 8b4:	0d 9a       	sbi	0x01, 5	; 1
		DDRA |= _BV(LED_N);
 8b6:	0c 9a       	sbi	0x01, 4	; 1

		if ((PINA & _BV(SW1))){
 8b8:	02 9b       	sbis	0x00, 2	; 0
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <main+0xa6>
			
			PORTA |= _BV(LED_H);
 8bc:	17 9a       	sbi	0x02, 7	; 2
			PORTA |= _BV(LED_V);
 8be:	16 9a       	sbi	0x02, 6	; 2
 8c0:	14 c0       	rjmp	.+40     	; 0x8ea <main+0xce>
		}
		else if (adc_read(X_AXIS) > ADC_THRESHOLDH3) {
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	0e 94 bc 00 	call	0x178	; 0x178 <adc_read>
 8c8:	32 e0       	ldi	r19, 0x02	; 2
 8ca:	81 3c       	cpi	r24, 0xC1	; 193
 8cc:	93 07       	cpc	r25, r19
 8ce:	10 f0       	brcs	.+4      	; 0x8d4 <main+0xb8>
			
			PORTA |= _BV(LED_H);
 8d0:	17 9a       	sbi	0x02, 7	; 2
 8d2:	0b c0       	rjmp	.+22     	; 0x8ea <main+0xce>
		} else if (adc_read(X_AXIS) < ADC_THRESHOLDL3) {
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	0e 94 bc 00 	call	0x178	; 0x178 <adc_read>
 8da:	21 e0       	ldi	r18, 0x01	; 1
 8dc:	80 34       	cpi	r24, 0x40	; 64
 8de:	92 07       	cpc	r25, r18
 8e0:	10 f4       	brcc	.+4      	; 0x8e6 <main+0xca>
			
			PORTA |= _BV(LED_V);
 8e2:	16 9a       	sbi	0x02, 6	; 2
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <main+0xce>
		}
		else{
			
			PORTA &= ~_BV(LED_H);
 8e6:	17 98       	cbi	0x02, 7	; 2
			PORTA &= ~_BV(LED_V);
 8e8:	16 98       	cbi	0x02, 6	; 2
		}
		
		
		if ((PINA & _BV(SW2))){
 8ea:	03 9b       	sbis	0x00, 3	; 0
 8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <main+0xd8>
			
			PORTA |= _BV(LED_U);
 8ee:	15 9a       	sbi	0x02, 5	; 2
			PORTA |= _BV(LED_N);
 8f0:	14 9a       	sbi	0x02, 4	; 2
 8f2:	a0 cf       	rjmp	.-192    	; 0x834 <main+0x18>
		}
		else if (adc_read(Y_AXIS) > ADC_THRESHOLDH3) {
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	0e 94 bc 00 	call	0x178	; 0x178 <adc_read>
 8fa:	32 e0       	ldi	r19, 0x02	; 2
 8fc:	81 3c       	cpi	r24, 0xC1	; 193
 8fe:	93 07       	cpc	r25, r19
 900:	10 f0       	brcs	.+4      	; 0x906 <main+0xea>
			
			PORTA |= _BV(LED_N);
 902:	14 9a       	sbi	0x02, 4	; 2
 904:	97 cf       	rjmp	.-210    	; 0x834 <main+0x18>
		} else if (adc_read(Y_AXIS) < ADC_THRESHOLDL3) {
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	0e 94 bc 00 	call	0x178	; 0x178 <adc_read>
 90c:	21 e0       	ldi	r18, 0x01	; 1
 90e:	80 34       	cpi	r24, 0x40	; 64
 910:	92 07       	cpc	r25, r18
 912:	10 f4       	brcc	.+4      	; 0x918 <main+0xfc>
			
			PORTA |= _BV(LED_U);
 914:	15 9a       	sbi	0x02, 5	; 2
 916:	8e cf       	rjmp	.-228    	; 0x834 <main+0x18>
		}
		else{
			
			PORTA &= ~_BV(LED_U);
 918:	15 98       	cbi	0x02, 5	; 2
			PORTA &= ~_BV(LED_N);
 91a:	14 98       	cbi	0x02, 4	; 2
 91c:	8b cf       	rjmp	.-234    	; 0x834 <main+0x18>

0000091e <compactData>:
* Input:	edata: engine_data - The engine data.
* Output:	unsigned char - The compressed data to be sent.
* Description:	Adds all engine info into one byte in the form
* [dir. left (1 bit)][throttle left (3 bit)][dir. right (1 bit)][throttle right (3 bit)].
*/
unsigned char compactData(engine_data *edata) {
 91e:	cf 92       	push	r12
 920:	df 92       	push	r13
 922:	ef 92       	push	r14
 924:	ff 92       	push	r15
 926:	0f 93       	push	r16
 928:	1f 93       	push	r17
 92a:	cf 93       	push	r28
 92c:	8c 01       	movw	r16, r24
	
	unsigned char send_data;
	
	/* Place the left engine throttle data in send_data. */ 
	if (edata->left_engine_throttle >= 6.5) {
 92e:	fc 01       	movw	r30, r24
 930:	c2 80       	ldd	r12, Z+2	; 0x02
 932:	d3 80       	ldd	r13, Z+3	; 0x03
 934:	e4 80       	ldd	r14, Z+4	; 0x04
 936:	f5 80       	ldd	r15, Z+5	; 0x05
 938:	c7 01       	movw	r24, r14
 93a:	b6 01       	movw	r22, r12
 93c:	20 e0       	ldi	r18, 0x00	; 0
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	40 ed       	ldi	r20, 0xD0	; 208
 942:	50 e4       	ldi	r21, 0x40	; 64
 944:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 948:	88 23       	and	r24, r24
 94a:	0c f0       	brlt	.+2      	; 0x94e <compactData+0x30>
 94c:	3f c0       	rjmp	.+126    	; 0x9cc <compactData+0xae>
		send_data = (unsigned char) 7;
	} else if (edata->left_engine_throttle >= 5.5) {
 94e:	c7 01       	movw	r24, r14
 950:	b6 01       	movw	r22, r12
 952:	20 e0       	ldi	r18, 0x00	; 0
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	40 eb       	ldi	r20, 0xB0	; 176
 958:	50 e4       	ldi	r21, 0x40	; 64
 95a:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 95e:	88 23       	and	r24, r24
 960:	bc f5       	brge	.+110    	; 0x9d0 <compactData+0xb2>
		send_data = (unsigned char) 6;
	} else if (edata->left_engine_throttle >= 4.5) {
 962:	c7 01       	movw	r24, r14
 964:	b6 01       	movw	r22, r12
 966:	20 e0       	ldi	r18, 0x00	; 0
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	40 e9       	ldi	r20, 0x90	; 144
 96c:	50 e4       	ldi	r21, 0x40	; 64
 96e:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 972:	88 23       	and	r24, r24
 974:	7c f5       	brge	.+94     	; 0x9d4 <compactData+0xb6>
		send_data = (unsigned char) 5;
	} else if (edata->left_engine_throttle >= 3.5) {
 976:	c7 01       	movw	r24, r14
 978:	b6 01       	movw	r22, r12
 97a:	20 e0       	ldi	r18, 0x00	; 0
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	40 e6       	ldi	r20, 0x60	; 96
 980:	50 e4       	ldi	r21, 0x40	; 64
 982:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 986:	88 23       	and	r24, r24
 988:	3c f5       	brge	.+78     	; 0x9d8 <compactData+0xba>
		send_data = (unsigned char) 4;
	} else if (edata->left_engine_throttle >= 2.5) {
 98a:	c7 01       	movw	r24, r14
 98c:	b6 01       	movw	r22, r12
 98e:	20 e0       	ldi	r18, 0x00	; 0
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	40 e2       	ldi	r20, 0x20	; 32
 994:	50 e4       	ldi	r21, 0x40	; 64
 996:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 99a:	88 23       	and	r24, r24
 99c:	fc f4       	brge	.+62     	; 0x9dc <compactData+0xbe>
		send_data = (unsigned char) 3;
	} else if (edata->left_engine_throttle >= 1.5) {
 99e:	c7 01       	movw	r24, r14
 9a0:	b6 01       	movw	r22, r12
 9a2:	20 e0       	ldi	r18, 0x00	; 0
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	40 ec       	ldi	r20, 0xC0	; 192
 9a8:	5f e3       	ldi	r21, 0x3F	; 63
 9aa:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 9ae:	88 23       	and	r24, r24
 9b0:	bc f4       	brge	.+46     	; 0x9e0 <compactData+0xc2>
	
	unsigned char send_data;
	
	/* Place the left engine throttle data in send_data. */ 
	if (edata->left_engine_throttle >= 6.5) {
		send_data = (unsigned char) 7;
 9b2:	c1 e0       	ldi	r28, 0x01	; 1
 9b4:	c7 01       	movw	r24, r14
 9b6:	b6 01       	movw	r22, r12
 9b8:	20 e0       	ldi	r18, 0x00	; 0
 9ba:	30 e0       	ldi	r19, 0x00	; 0
 9bc:	40 e0       	ldi	r20, 0x00	; 0
 9be:	5f e3       	ldi	r21, 0x3F	; 63
 9c0:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 9c4:	88 23       	and	r24, r24
 9c6:	6c f4       	brge	.+26     	; 0x9e2 <compactData+0xc4>
 9c8:	c0 e0       	ldi	r28, 0x00	; 0
 9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <compactData+0xc4>
 9cc:	c7 e0       	ldi	r28, 0x07	; 7
 9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 5.5) {
		send_data = (unsigned char) 6;
 9d0:	c6 e0       	ldi	r28, 0x06	; 6
 9d2:	07 c0       	rjmp	.+14     	; 0x9e2 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 4.5) {
		send_data = (unsigned char) 5;
 9d4:	c5 e0       	ldi	r28, 0x05	; 5
 9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 3.5) {
		send_data = (unsigned char) 4;
 9d8:	c4 e0       	ldi	r28, 0x04	; 4
 9da:	03 c0       	rjmp	.+6      	; 0x9e2 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 2.5) {
		send_data = (unsigned char) 3;
 9dc:	c3 e0       	ldi	r28, 0x03	; 3
 9de:	01 c0       	rjmp	.+2      	; 0x9e2 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 1.5) {
		send_data = (unsigned char) 2;
 9e0:	c2 e0       	ldi	r28, 0x02	; 2
		send_data = (unsigned char) 0;
	}
	
	/* Shift data four steps, which puts the left engine throttle 
	 * information in bit 6, 5 and 4. */
	send_data = send_data << 4;
 9e2:	c2 95       	swap	r28
 9e4:	c0 7f       	andi	r28, 0xF0	; 240

	/* Put the right engine throttle information in the three lowest bits. */
	if (edata->right_engine_throttle >= 6.5) {
 9e6:	f8 01       	movw	r30, r16
 9e8:	c6 80       	ldd	r12, Z+6	; 0x06
 9ea:	d7 80       	ldd	r13, Z+7	; 0x07
 9ec:	e0 84       	ldd	r14, Z+8	; 0x08
 9ee:	f1 84       	ldd	r15, Z+9	; 0x09
 9f0:	c7 01       	movw	r24, r14
 9f2:	b6 01       	movw	r22, r12
 9f4:	20 e0       	ldi	r18, 0x00	; 0
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	40 ed       	ldi	r20, 0xD0	; 208
 9fa:	50 e4       	ldi	r21, 0x40	; 64
 9fc:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 a00:	88 23       	and	r24, r24
 a02:	14 f0       	brlt	.+4      	; 0xa08 <compactData+0xea>
		send_data = send_data | (unsigned char) 7;
 a04:	c7 60       	ori	r28, 0x07	; 7
 a06:	47 c0       	rjmp	.+142    	; 0xa96 <compactData+0x178>
	} else if (edata->right_engine_throttle >= 5.5) {
 a08:	c7 01       	movw	r24, r14
 a0a:	b6 01       	movw	r22, r12
 a0c:	20 e0       	ldi	r18, 0x00	; 0
 a0e:	30 e0       	ldi	r19, 0x00	; 0
 a10:	40 eb       	ldi	r20, 0xB0	; 176
 a12:	50 e4       	ldi	r21, 0x40	; 64
 a14:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 a18:	88 23       	and	r24, r24
 a1a:	14 f0       	brlt	.+4      	; 0xa20 <compactData+0x102>
		send_data = send_data | (unsigned char) 6;
 a1c:	c6 60       	ori	r28, 0x06	; 6
 a1e:	3b c0       	rjmp	.+118    	; 0xa96 <compactData+0x178>
	} else if (edata->right_engine_throttle >= 4.5) {
 a20:	c7 01       	movw	r24, r14
 a22:	b6 01       	movw	r22, r12
 a24:	20 e0       	ldi	r18, 0x00	; 0
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	40 e9       	ldi	r20, 0x90	; 144
 a2a:	50 e4       	ldi	r21, 0x40	; 64
 a2c:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 a30:	88 23       	and	r24, r24
 a32:	14 f0       	brlt	.+4      	; 0xa38 <compactData+0x11a>
		send_data = send_data | (unsigned char) 5;
 a34:	c5 60       	ori	r28, 0x05	; 5
 a36:	2f c0       	rjmp	.+94     	; 0xa96 <compactData+0x178>
	} else if (edata->right_engine_throttle >= 3.5) {
 a38:	c7 01       	movw	r24, r14
 a3a:	b6 01       	movw	r22, r12
 a3c:	20 e0       	ldi	r18, 0x00	; 0
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	40 e6       	ldi	r20, 0x60	; 96
 a42:	50 e4       	ldi	r21, 0x40	; 64
 a44:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 a48:	88 23       	and	r24, r24
 a4a:	14 f0       	brlt	.+4      	; 0xa50 <compactData+0x132>
		send_data = send_data | (unsigned char) 4;
 a4c:	c4 60       	ori	r28, 0x04	; 4
 a4e:	23 c0       	rjmp	.+70     	; 0xa96 <compactData+0x178>
	} else if (edata->right_engine_throttle >= 2.5) {
 a50:	c7 01       	movw	r24, r14
 a52:	b6 01       	movw	r22, r12
 a54:	20 e0       	ldi	r18, 0x00	; 0
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	40 e2       	ldi	r20, 0x20	; 32
 a5a:	50 e4       	ldi	r21, 0x40	; 64
 a5c:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 a60:	88 23       	and	r24, r24
 a62:	14 f0       	brlt	.+4      	; 0xa68 <compactData+0x14a>
		send_data = send_data | (unsigned char) 3;
 a64:	c3 60       	ori	r28, 0x03	; 3
 a66:	17 c0       	rjmp	.+46     	; 0xa96 <compactData+0x178>
	} else if (edata->right_engine_throttle >= 1.5) {
 a68:	c7 01       	movw	r24, r14
 a6a:	b6 01       	movw	r22, r12
 a6c:	20 e0       	ldi	r18, 0x00	; 0
 a6e:	30 e0       	ldi	r19, 0x00	; 0
 a70:	40 ec       	ldi	r20, 0xC0	; 192
 a72:	5f e3       	ldi	r21, 0x3F	; 63
 a74:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 a78:	88 23       	and	r24, r24
 a7a:	14 f0       	brlt	.+4      	; 0xa80 <compactData+0x162>
		send_data = send_data | (unsigned char) 2;
 a7c:	c2 60       	ori	r28, 0x02	; 2
 a7e:	0b c0       	rjmp	.+22     	; 0xa96 <compactData+0x178>
	} else if (edata->right_engine_throttle >= 0.5) {
 a80:	c7 01       	movw	r24, r14
 a82:	b6 01       	movw	r22, r12
 a84:	20 e0       	ldi	r18, 0x00	; 0
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	40 e0       	ldi	r20, 0x00	; 0
 a8a:	5f e3       	ldi	r21, 0x3F	; 63
 a8c:	0e 94 88 07 	call	0xf10	; 0xf10 <__gesf2>
 a90:	88 23       	and	r24, r24
 a92:	0c f0       	brlt	.+2      	; 0xa96 <compactData+0x178>
		send_data = send_data | (unsigned char) 1;
 a94:	c1 60       	ori	r28, 0x01	; 1
		send_data = send_data | (unsigned char) 0;
	}
	
	/* Set the direction information in bit 7 for the left engine
	 * and bit 3 for the right engine. */
	if (edata->left_engine_dir == FORWARD) {
 a96:	f8 01       	movw	r30, r16
 a98:	80 81       	ld	r24, Z
 a9a:	88 23       	and	r24, r24
 a9c:	09 f4       	brne	.+2      	; 0xaa0 <compactData+0x182>
		send_data = send_data | (1<<7);
 a9e:	c0 68       	ori	r28, 0x80	; 128
	} else {
		send_data = send_data | (0<<7);
	}
	
	if (edata->right_engine_dir == FORWARD) {
 aa0:	f8 01       	movw	r30, r16
 aa2:	81 81       	ldd	r24, Z+1	; 0x01
 aa4:	88 23       	and	r24, r24
 aa6:	09 f4       	brne	.+2      	; 0xaaa <compactData+0x18c>
		send_data = send_data | (1<<3);
 aa8:	c8 60       	ori	r28, 0x08	; 8
	} else {
		send_data = send_data | (0<<3);
	}
	
	return send_data;
}
 aaa:	8c 2f       	mov	r24, r28
 aac:	cf 91       	pop	r28
 aae:	1f 91       	pop	r17
 ab0:	0f 91       	pop	r16
 ab2:	ff 90       	pop	r15
 ab4:	ef 90       	pop	r14
 ab6:	df 90       	pop	r13
 ab8:	cf 90       	pop	r12
 aba:	08 95       	ret

00000abc <sleepMode>:
* Description: Enters sleep mode.
*/
void sleepMode() {
	
	/* Clear global interrupt flag and stop timer. */
	cli();
 abc:	f8 94       	cli
			
	/* Turn off power to voltage regulator that powers 
	 * OLED and bluetooth unit. */
	PORTB &= ~_BV(POWER_CONTROL);
 abe:	28 98       	cbi	0x05, 0	; 5
	DDRD &= ~_BV(LED_PIN2);
	DDRD &= ~_BV(LED_PIN1);
*/

	/* Set sleep mode and enable sleep setup. */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 ac0:	83 b7       	in	r24, 0x33	; 51
 ac2:	81 7f       	andi	r24, 0xF1	; 241
 ac4:	84 60       	ori	r24, 0x04	; 4
 ac6:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
 ac8:	83 b7       	in	r24, 0x33	; 51
 aca:	81 60       	ori	r24, 0x01	; 1
 acc:	83 bf       	out	0x33, r24	; 51
	
	/* Disable ADC, watchdog and BOD. */
	ADCSRA = 0;
 ace:	10 92 7a 00 	sts	0x007A, r1
	wdt_disable();
 ad2:	88 e1       	ldi	r24, 0x18	; 24
 ad4:	0f b6       	in	r0, 0x3f	; 63
 ad6:	f8 94       	cli
 ad8:	80 93 60 00 	sts	0x0060, r24
 adc:	10 92 60 00 	sts	0x0060, r1
 ae0:	0f be       	out	0x3f, r0	; 63
	sleep_bod_disable();
 ae2:	85 b7       	in	r24, 0x35	; 53
 ae4:	80 66       	ori	r24, 0x60	; 96
 ae6:	85 bf       	out	0x35, r24	; 53
 ae8:	8f 7d       	andi	r24, 0xDF	; 223
 aea:	85 bf       	out	0x35, r24	; 53
	
	/* Set global interrupt flag to allow waking signals from
	 * the external interrupt and power down MCU. */
	sei();
 aec:	78 94       	sei
	sleep_cpu();
 aee:	88 95       	sleep
	
	/* Wake up here and disable sleep setup mode. */
	sleep_disable();
 af0:	83 b7       	in	r24, 0x33	; 51
 af2:	8e 7f       	andi	r24, 0xFE	; 254
 af4:	83 bf       	out	0x33, r24	; 51
	
	/* Re-initialize. */
	init();
 af6:	0e 94 9a 00 	call	0x134	; 0x134 <init>
 afa:	08 95       	ret

00000afc <__subsf3>:
 afc:	50 58       	subi	r21, 0x80	; 128

00000afe <__addsf3>:
 afe:	bb 27       	eor	r27, r27
 b00:	aa 27       	eor	r26, r26
 b02:	0e d0       	rcall	.+28     	; 0xb20 <__addsf3x>
 b04:	cb c1       	rjmp	.+918    	; 0xe9c <__fp_round>
 b06:	bc d1       	rcall	.+888    	; 0xe80 <__fp_pscA>
 b08:	30 f0       	brcs	.+12     	; 0xb16 <__addsf3+0x18>
 b0a:	c1 d1       	rcall	.+898    	; 0xe8e <__fp_pscB>
 b0c:	20 f0       	brcs	.+8      	; 0xb16 <__addsf3+0x18>
 b0e:	31 f4       	brne	.+12     	; 0xb1c <__addsf3+0x1e>
 b10:	9f 3f       	cpi	r25, 0xFF	; 255
 b12:	11 f4       	brne	.+4      	; 0xb18 <__addsf3+0x1a>
 b14:	1e f4       	brtc	.+6      	; 0xb1c <__addsf3+0x1e>
 b16:	8c c1       	rjmp	.+792    	; 0xe30 <__fp_nan>
 b18:	0e f4       	brtc	.+2      	; 0xb1c <__addsf3+0x1e>
 b1a:	e0 95       	com	r30
 b1c:	e7 fb       	bst	r30, 7
 b1e:	82 c1       	rjmp	.+772    	; 0xe24 <__fp_inf>

00000b20 <__addsf3x>:
 b20:	e9 2f       	mov	r30, r25
 b22:	cd d1       	rcall	.+922    	; 0xebe <__fp_split3>
 b24:	80 f3       	brcs	.-32     	; 0xb06 <__addsf3+0x8>
 b26:	ba 17       	cp	r27, r26
 b28:	62 07       	cpc	r22, r18
 b2a:	73 07       	cpc	r23, r19
 b2c:	84 07       	cpc	r24, r20
 b2e:	95 07       	cpc	r25, r21
 b30:	18 f0       	brcs	.+6      	; 0xb38 <__addsf3x+0x18>
 b32:	71 f4       	brne	.+28     	; 0xb50 <__addsf3x+0x30>
 b34:	9e f5       	brtc	.+102    	; 0xb9c <__addsf3x+0x7c>
 b36:	e5 c1       	rjmp	.+970    	; 0xf02 <__fp_zero>
 b38:	0e f4       	brtc	.+2      	; 0xb3c <__addsf3x+0x1c>
 b3a:	e0 95       	com	r30
 b3c:	0b 2e       	mov	r0, r27
 b3e:	ba 2f       	mov	r27, r26
 b40:	a0 2d       	mov	r26, r0
 b42:	0b 01       	movw	r0, r22
 b44:	b9 01       	movw	r22, r18
 b46:	90 01       	movw	r18, r0
 b48:	0c 01       	movw	r0, r24
 b4a:	ca 01       	movw	r24, r20
 b4c:	a0 01       	movw	r20, r0
 b4e:	11 24       	eor	r1, r1
 b50:	ff 27       	eor	r31, r31
 b52:	59 1b       	sub	r21, r25
 b54:	99 f0       	breq	.+38     	; 0xb7c <__addsf3x+0x5c>
 b56:	59 3f       	cpi	r21, 0xF9	; 249
 b58:	50 f4       	brcc	.+20     	; 0xb6e <__addsf3x+0x4e>
 b5a:	50 3e       	cpi	r21, 0xE0	; 224
 b5c:	68 f1       	brcs	.+90     	; 0xbb8 <__addsf3x+0x98>
 b5e:	1a 16       	cp	r1, r26
 b60:	f0 40       	sbci	r31, 0x00	; 0
 b62:	a2 2f       	mov	r26, r18
 b64:	23 2f       	mov	r18, r19
 b66:	34 2f       	mov	r19, r20
 b68:	44 27       	eor	r20, r20
 b6a:	58 5f       	subi	r21, 0xF8	; 248
 b6c:	f3 cf       	rjmp	.-26     	; 0xb54 <__addsf3x+0x34>
 b6e:	46 95       	lsr	r20
 b70:	37 95       	ror	r19
 b72:	27 95       	ror	r18
 b74:	a7 95       	ror	r26
 b76:	f0 40       	sbci	r31, 0x00	; 0
 b78:	53 95       	inc	r21
 b7a:	c9 f7       	brne	.-14     	; 0xb6e <__addsf3x+0x4e>
 b7c:	7e f4       	brtc	.+30     	; 0xb9c <__addsf3x+0x7c>
 b7e:	1f 16       	cp	r1, r31
 b80:	ba 0b       	sbc	r27, r26
 b82:	62 0b       	sbc	r22, r18
 b84:	73 0b       	sbc	r23, r19
 b86:	84 0b       	sbc	r24, r20
 b88:	ba f0       	brmi	.+46     	; 0xbb8 <__addsf3x+0x98>
 b8a:	91 50       	subi	r25, 0x01	; 1
 b8c:	a1 f0       	breq	.+40     	; 0xbb6 <__addsf3x+0x96>
 b8e:	ff 0f       	add	r31, r31
 b90:	bb 1f       	adc	r27, r27
 b92:	66 1f       	adc	r22, r22
 b94:	77 1f       	adc	r23, r23
 b96:	88 1f       	adc	r24, r24
 b98:	c2 f7       	brpl	.-16     	; 0xb8a <__addsf3x+0x6a>
 b9a:	0e c0       	rjmp	.+28     	; 0xbb8 <__addsf3x+0x98>
 b9c:	ba 0f       	add	r27, r26
 b9e:	62 1f       	adc	r22, r18
 ba0:	73 1f       	adc	r23, r19
 ba2:	84 1f       	adc	r24, r20
 ba4:	48 f4       	brcc	.+18     	; 0xbb8 <__addsf3x+0x98>
 ba6:	87 95       	ror	r24
 ba8:	77 95       	ror	r23
 baa:	67 95       	ror	r22
 bac:	b7 95       	ror	r27
 bae:	f7 95       	ror	r31
 bb0:	9e 3f       	cpi	r25, 0xFE	; 254
 bb2:	08 f0       	brcs	.+2      	; 0xbb6 <__addsf3x+0x96>
 bb4:	b3 cf       	rjmp	.-154    	; 0xb1c <__addsf3+0x1e>
 bb6:	93 95       	inc	r25
 bb8:	88 0f       	add	r24, r24
 bba:	08 f0       	brcs	.+2      	; 0xbbe <__addsf3x+0x9e>
 bbc:	99 27       	eor	r25, r25
 bbe:	ee 0f       	add	r30, r30
 bc0:	97 95       	ror	r25
 bc2:	87 95       	ror	r24
 bc4:	08 95       	ret
 bc6:	5c d1       	rcall	.+696    	; 0xe80 <__fp_pscA>
 bc8:	58 f0       	brcs	.+22     	; 0xbe0 <__addsf3x+0xc0>
 bca:	80 e8       	ldi	r24, 0x80	; 128
 bcc:	91 e0       	ldi	r25, 0x01	; 1
 bce:	09 f4       	brne	.+2      	; 0xbd2 <__addsf3x+0xb2>
 bd0:	9e ef       	ldi	r25, 0xFE	; 254
 bd2:	5d d1       	rcall	.+698    	; 0xe8e <__fp_pscB>
 bd4:	28 f0       	brcs	.+10     	; 0xbe0 <__addsf3x+0xc0>
 bd6:	40 e8       	ldi	r20, 0x80	; 128
 bd8:	51 e0       	ldi	r21, 0x01	; 1
 bda:	59 f4       	brne	.+22     	; 0xbf2 <atan2+0xe>
 bdc:	5e ef       	ldi	r21, 0xFE	; 254
 bde:	09 c0       	rjmp	.+18     	; 0xbf2 <atan2+0xe>
 be0:	27 c1       	rjmp	.+590    	; 0xe30 <__fp_nan>
 be2:	8f c1       	rjmp	.+798    	; 0xf02 <__fp_zero>

00000be4 <atan2>:
 be4:	e9 2f       	mov	r30, r25
 be6:	e0 78       	andi	r30, 0x80	; 128
 be8:	6a d1       	rcall	.+724    	; 0xebe <__fp_split3>
 bea:	68 f3       	brcs	.-38     	; 0xbc6 <__addsf3x+0xa6>
 bec:	09 2e       	mov	r0, r25
 bee:	05 2a       	or	r0, r21
 bf0:	c1 f3       	breq	.-16     	; 0xbe2 <__addsf3x+0xc2>
 bf2:	26 17       	cp	r18, r22
 bf4:	37 07       	cpc	r19, r23
 bf6:	48 07       	cpc	r20, r24
 bf8:	59 07       	cpc	r21, r25
 bfa:	38 f0       	brcs	.+14     	; 0xc0a <atan2+0x26>
 bfc:	0e 2e       	mov	r0, r30
 bfe:	07 f8       	bld	r0, 7
 c00:	e0 25       	eor	r30, r0
 c02:	69 f0       	breq	.+26     	; 0xc1e <atan2+0x3a>
 c04:	e0 25       	eor	r30, r0
 c06:	e0 64       	ori	r30, 0x40	; 64
 c08:	0a c0       	rjmp	.+20     	; 0xc1e <atan2+0x3a>
 c0a:	ef 63       	ori	r30, 0x3F	; 63
 c0c:	07 f8       	bld	r0, 7
 c0e:	00 94       	com	r0
 c10:	07 fa       	bst	r0, 7
 c12:	db 01       	movw	r26, r22
 c14:	b9 01       	movw	r22, r18
 c16:	9d 01       	movw	r18, r26
 c18:	dc 01       	movw	r26, r24
 c1a:	ca 01       	movw	r24, r20
 c1c:	ad 01       	movw	r20, r26
 c1e:	ef 93       	push	r30
 c20:	47 d0       	rcall	.+142    	; 0xcb0 <__divsf3_pse>
 c22:	3c d1       	rcall	.+632    	; 0xe9c <__fp_round>
 c24:	0a d0       	rcall	.+20     	; 0xc3a <atan>
 c26:	5f 91       	pop	r21
 c28:	55 23       	and	r21, r21
 c2a:	31 f0       	breq	.+12     	; 0xc38 <atan2+0x54>
 c2c:	2b ed       	ldi	r18, 0xDB	; 219
 c2e:	3f e0       	ldi	r19, 0x0F	; 15
 c30:	49 e4       	ldi	r20, 0x49	; 73
 c32:	50 fd       	sbrc	r21, 0
 c34:	49 ec       	ldi	r20, 0xC9	; 201
 c36:	63 cf       	rjmp	.-314    	; 0xafe <__addsf3>
 c38:	08 95       	ret

00000c3a <atan>:
 c3a:	df 93       	push	r29
 c3c:	dd 27       	eor	r29, r29
 c3e:	b9 2f       	mov	r27, r25
 c40:	bf 77       	andi	r27, 0x7F	; 127
 c42:	40 e8       	ldi	r20, 0x80	; 128
 c44:	5f e3       	ldi	r21, 0x3F	; 63
 c46:	16 16       	cp	r1, r22
 c48:	17 06       	cpc	r1, r23
 c4a:	48 07       	cpc	r20, r24
 c4c:	5b 07       	cpc	r21, r27
 c4e:	10 f4       	brcc	.+4      	; 0xc54 <atan+0x1a>
 c50:	d9 2f       	mov	r29, r25
 c52:	62 d1       	rcall	.+708    	; 0xf18 <inverse>
 c54:	9f 93       	push	r25
 c56:	8f 93       	push	r24
 c58:	7f 93       	push	r23
 c5a:	6f 93       	push	r22
 c5c:	c7 d1       	rcall	.+910    	; 0xfec <square>
 c5e:	ec e8       	ldi	r30, 0x8C	; 140
 c60:	f0 e0       	ldi	r31, 0x00	; 0
 c62:	e9 d0       	rcall	.+466    	; 0xe36 <__fp_powser>
 c64:	1b d1       	rcall	.+566    	; 0xe9c <__fp_round>
 c66:	2f 91       	pop	r18
 c68:	3f 91       	pop	r19
 c6a:	4f 91       	pop	r20
 c6c:	5f 91       	pop	r21
 c6e:	67 d1       	rcall	.+718    	; 0xf3e <__mulsf3x>
 c70:	dd 23       	and	r29, r29
 c72:	49 f0       	breq	.+18     	; 0xc86 <atan+0x4c>
 c74:	90 58       	subi	r25, 0x80	; 128
 c76:	a2 ea       	ldi	r26, 0xA2	; 162
 c78:	2a ed       	ldi	r18, 0xDA	; 218
 c7a:	3f e0       	ldi	r19, 0x0F	; 15
 c7c:	49 ec       	ldi	r20, 0xC9	; 201
 c7e:	5f e3       	ldi	r21, 0x3F	; 63
 c80:	d0 78       	andi	r29, 0x80	; 128
 c82:	5d 27       	eor	r21, r29
 c84:	4d df       	rcall	.-358    	; 0xb20 <__addsf3x>
 c86:	df 91       	pop	r29
 c88:	09 c1       	rjmp	.+530    	; 0xe9c <__fp_round>

00000c8a <__cmpsf2>:
 c8a:	a8 d0       	rcall	.+336    	; 0xddc <__fp_cmp>
 c8c:	08 f4       	brcc	.+2      	; 0xc90 <__cmpsf2+0x6>
 c8e:	81 e0       	ldi	r24, 0x01	; 1
 c90:	08 95       	ret

00000c92 <__divsf3>:
 c92:	0c d0       	rcall	.+24     	; 0xcac <__divsf3x>
 c94:	03 c1       	rjmp	.+518    	; 0xe9c <__fp_round>
 c96:	fb d0       	rcall	.+502    	; 0xe8e <__fp_pscB>
 c98:	40 f0       	brcs	.+16     	; 0xcaa <__divsf3+0x18>
 c9a:	f2 d0       	rcall	.+484    	; 0xe80 <__fp_pscA>
 c9c:	30 f0       	brcs	.+12     	; 0xcaa <__divsf3+0x18>
 c9e:	21 f4       	brne	.+8      	; 0xca8 <__divsf3+0x16>
 ca0:	5f 3f       	cpi	r21, 0xFF	; 255
 ca2:	19 f0       	breq	.+6      	; 0xcaa <__divsf3+0x18>
 ca4:	bf c0       	rjmp	.+382    	; 0xe24 <__fp_inf>
 ca6:	51 11       	cpse	r21, r1
 ca8:	2d c1       	rjmp	.+602    	; 0xf04 <__fp_szero>
 caa:	c2 c0       	rjmp	.+388    	; 0xe30 <__fp_nan>

00000cac <__divsf3x>:
 cac:	08 d1       	rcall	.+528    	; 0xebe <__fp_split3>
 cae:	98 f3       	brcs	.-26     	; 0xc96 <__divsf3+0x4>

00000cb0 <__divsf3_pse>:
 cb0:	99 23       	and	r25, r25
 cb2:	c9 f3       	breq	.-14     	; 0xca6 <__divsf3+0x14>
 cb4:	55 23       	and	r21, r21
 cb6:	b1 f3       	breq	.-20     	; 0xca4 <__divsf3+0x12>
 cb8:	95 1b       	sub	r25, r21
 cba:	55 0b       	sbc	r21, r21
 cbc:	bb 27       	eor	r27, r27
 cbe:	aa 27       	eor	r26, r26
 cc0:	62 17       	cp	r22, r18
 cc2:	73 07       	cpc	r23, r19
 cc4:	84 07       	cpc	r24, r20
 cc6:	38 f0       	brcs	.+14     	; 0xcd6 <__divsf3_pse+0x26>
 cc8:	9f 5f       	subi	r25, 0xFF	; 255
 cca:	5f 4f       	sbci	r21, 0xFF	; 255
 ccc:	22 0f       	add	r18, r18
 cce:	33 1f       	adc	r19, r19
 cd0:	44 1f       	adc	r20, r20
 cd2:	aa 1f       	adc	r26, r26
 cd4:	a9 f3       	breq	.-22     	; 0xcc0 <__divsf3_pse+0x10>
 cd6:	33 d0       	rcall	.+102    	; 0xd3e <__divsf3_pse+0x8e>
 cd8:	0e 2e       	mov	r0, r30
 cda:	3a f0       	brmi	.+14     	; 0xcea <__divsf3_pse+0x3a>
 cdc:	e0 e8       	ldi	r30, 0x80	; 128
 cde:	30 d0       	rcall	.+96     	; 0xd40 <__divsf3_pse+0x90>
 ce0:	91 50       	subi	r25, 0x01	; 1
 ce2:	50 40       	sbci	r21, 0x00	; 0
 ce4:	e6 95       	lsr	r30
 ce6:	00 1c       	adc	r0, r0
 ce8:	ca f7       	brpl	.-14     	; 0xcdc <__divsf3_pse+0x2c>
 cea:	29 d0       	rcall	.+82     	; 0xd3e <__divsf3_pse+0x8e>
 cec:	fe 2f       	mov	r31, r30
 cee:	27 d0       	rcall	.+78     	; 0xd3e <__divsf3_pse+0x8e>
 cf0:	66 0f       	add	r22, r22
 cf2:	77 1f       	adc	r23, r23
 cf4:	88 1f       	adc	r24, r24
 cf6:	bb 1f       	adc	r27, r27
 cf8:	26 17       	cp	r18, r22
 cfa:	37 07       	cpc	r19, r23
 cfc:	48 07       	cpc	r20, r24
 cfe:	ab 07       	cpc	r26, r27
 d00:	b0 e8       	ldi	r27, 0x80	; 128
 d02:	09 f0       	breq	.+2      	; 0xd06 <__divsf3_pse+0x56>
 d04:	bb 0b       	sbc	r27, r27
 d06:	80 2d       	mov	r24, r0
 d08:	bf 01       	movw	r22, r30
 d0a:	ff 27       	eor	r31, r31
 d0c:	93 58       	subi	r25, 0x83	; 131
 d0e:	5f 4f       	sbci	r21, 0xFF	; 255
 d10:	2a f0       	brmi	.+10     	; 0xd1c <__divsf3_pse+0x6c>
 d12:	9e 3f       	cpi	r25, 0xFE	; 254
 d14:	51 05       	cpc	r21, r1
 d16:	68 f0       	brcs	.+26     	; 0xd32 <__divsf3_pse+0x82>
 d18:	85 c0       	rjmp	.+266    	; 0xe24 <__fp_inf>
 d1a:	f4 c0       	rjmp	.+488    	; 0xf04 <__fp_szero>
 d1c:	5f 3f       	cpi	r21, 0xFF	; 255
 d1e:	ec f3       	brlt	.-6      	; 0xd1a <__divsf3_pse+0x6a>
 d20:	98 3e       	cpi	r25, 0xE8	; 232
 d22:	dc f3       	brlt	.-10     	; 0xd1a <__divsf3_pse+0x6a>
 d24:	86 95       	lsr	r24
 d26:	77 95       	ror	r23
 d28:	67 95       	ror	r22
 d2a:	b7 95       	ror	r27
 d2c:	f7 95       	ror	r31
 d2e:	9f 5f       	subi	r25, 0xFF	; 255
 d30:	c9 f7       	brne	.-14     	; 0xd24 <__divsf3_pse+0x74>
 d32:	88 0f       	add	r24, r24
 d34:	91 1d       	adc	r25, r1
 d36:	96 95       	lsr	r25
 d38:	87 95       	ror	r24
 d3a:	97 f9       	bld	r25, 7
 d3c:	08 95       	ret
 d3e:	e1 e0       	ldi	r30, 0x01	; 1
 d40:	66 0f       	add	r22, r22
 d42:	77 1f       	adc	r23, r23
 d44:	88 1f       	adc	r24, r24
 d46:	bb 1f       	adc	r27, r27
 d48:	62 17       	cp	r22, r18
 d4a:	73 07       	cpc	r23, r19
 d4c:	84 07       	cpc	r24, r20
 d4e:	ba 07       	cpc	r27, r26
 d50:	20 f0       	brcs	.+8      	; 0xd5a <__divsf3_pse+0xaa>
 d52:	62 1b       	sub	r22, r18
 d54:	73 0b       	sbc	r23, r19
 d56:	84 0b       	sbc	r24, r20
 d58:	ba 0b       	sbc	r27, r26
 d5a:	ee 1f       	adc	r30, r30
 d5c:	88 f7       	brcc	.-30     	; 0xd40 <__divsf3_pse+0x90>
 d5e:	e0 95       	com	r30
 d60:	08 95       	ret

00000d62 <__floatunsisf>:
 d62:	e8 94       	clt
 d64:	09 c0       	rjmp	.+18     	; 0xd78 <__floatsisf+0x12>

00000d66 <__floatsisf>:
 d66:	97 fb       	bst	r25, 7
 d68:	3e f4       	brtc	.+14     	; 0xd78 <__floatsisf+0x12>
 d6a:	90 95       	com	r25
 d6c:	80 95       	com	r24
 d6e:	70 95       	com	r23
 d70:	61 95       	neg	r22
 d72:	7f 4f       	sbci	r23, 0xFF	; 255
 d74:	8f 4f       	sbci	r24, 0xFF	; 255
 d76:	9f 4f       	sbci	r25, 0xFF	; 255
 d78:	99 23       	and	r25, r25
 d7a:	a9 f0       	breq	.+42     	; 0xda6 <__floatsisf+0x40>
 d7c:	f9 2f       	mov	r31, r25
 d7e:	96 e9       	ldi	r25, 0x96	; 150
 d80:	bb 27       	eor	r27, r27
 d82:	93 95       	inc	r25
 d84:	f6 95       	lsr	r31
 d86:	87 95       	ror	r24
 d88:	77 95       	ror	r23
 d8a:	67 95       	ror	r22
 d8c:	b7 95       	ror	r27
 d8e:	f1 11       	cpse	r31, r1
 d90:	f8 cf       	rjmp	.-16     	; 0xd82 <__floatsisf+0x1c>
 d92:	fa f4       	brpl	.+62     	; 0xdd2 <__floatsisf+0x6c>
 d94:	bb 0f       	add	r27, r27
 d96:	11 f4       	brne	.+4      	; 0xd9c <__floatsisf+0x36>
 d98:	60 ff       	sbrs	r22, 0
 d9a:	1b c0       	rjmp	.+54     	; 0xdd2 <__floatsisf+0x6c>
 d9c:	6f 5f       	subi	r22, 0xFF	; 255
 d9e:	7f 4f       	sbci	r23, 0xFF	; 255
 da0:	8f 4f       	sbci	r24, 0xFF	; 255
 da2:	9f 4f       	sbci	r25, 0xFF	; 255
 da4:	16 c0       	rjmp	.+44     	; 0xdd2 <__floatsisf+0x6c>
 da6:	88 23       	and	r24, r24
 da8:	11 f0       	breq	.+4      	; 0xdae <__floatsisf+0x48>
 daa:	96 e9       	ldi	r25, 0x96	; 150
 dac:	11 c0       	rjmp	.+34     	; 0xdd0 <__floatsisf+0x6a>
 dae:	77 23       	and	r23, r23
 db0:	21 f0       	breq	.+8      	; 0xdba <__floatsisf+0x54>
 db2:	9e e8       	ldi	r25, 0x8E	; 142
 db4:	87 2f       	mov	r24, r23
 db6:	76 2f       	mov	r23, r22
 db8:	05 c0       	rjmp	.+10     	; 0xdc4 <__floatsisf+0x5e>
 dba:	66 23       	and	r22, r22
 dbc:	71 f0       	breq	.+28     	; 0xdda <__floatsisf+0x74>
 dbe:	96 e8       	ldi	r25, 0x86	; 134
 dc0:	86 2f       	mov	r24, r22
 dc2:	70 e0       	ldi	r23, 0x00	; 0
 dc4:	60 e0       	ldi	r22, 0x00	; 0
 dc6:	2a f0       	brmi	.+10     	; 0xdd2 <__floatsisf+0x6c>
 dc8:	9a 95       	dec	r25
 dca:	66 0f       	add	r22, r22
 dcc:	77 1f       	adc	r23, r23
 dce:	88 1f       	adc	r24, r24
 dd0:	da f7       	brpl	.-10     	; 0xdc8 <__floatsisf+0x62>
 dd2:	88 0f       	add	r24, r24
 dd4:	96 95       	lsr	r25
 dd6:	87 95       	ror	r24
 dd8:	97 f9       	bld	r25, 7
 dda:	08 95       	ret

00000ddc <__fp_cmp>:
 ddc:	99 0f       	add	r25, r25
 dde:	00 08       	sbc	r0, r0
 de0:	55 0f       	add	r21, r21
 de2:	aa 0b       	sbc	r26, r26
 de4:	e0 e8       	ldi	r30, 0x80	; 128
 de6:	fe ef       	ldi	r31, 0xFE	; 254
 de8:	16 16       	cp	r1, r22
 dea:	17 06       	cpc	r1, r23
 dec:	e8 07       	cpc	r30, r24
 dee:	f9 07       	cpc	r31, r25
 df0:	c0 f0       	brcs	.+48     	; 0xe22 <__fp_cmp+0x46>
 df2:	12 16       	cp	r1, r18
 df4:	13 06       	cpc	r1, r19
 df6:	e4 07       	cpc	r30, r20
 df8:	f5 07       	cpc	r31, r21
 dfa:	98 f0       	brcs	.+38     	; 0xe22 <__fp_cmp+0x46>
 dfc:	62 1b       	sub	r22, r18
 dfe:	73 0b       	sbc	r23, r19
 e00:	84 0b       	sbc	r24, r20
 e02:	95 0b       	sbc	r25, r21
 e04:	39 f4       	brne	.+14     	; 0xe14 <__fp_cmp+0x38>
 e06:	0a 26       	eor	r0, r26
 e08:	61 f0       	breq	.+24     	; 0xe22 <__fp_cmp+0x46>
 e0a:	23 2b       	or	r18, r19
 e0c:	24 2b       	or	r18, r20
 e0e:	25 2b       	or	r18, r21
 e10:	21 f4       	brne	.+8      	; 0xe1a <__fp_cmp+0x3e>
 e12:	08 95       	ret
 e14:	0a 26       	eor	r0, r26
 e16:	09 f4       	brne	.+2      	; 0xe1a <__fp_cmp+0x3e>
 e18:	a1 40       	sbci	r26, 0x01	; 1
 e1a:	a6 95       	lsr	r26
 e1c:	8f ef       	ldi	r24, 0xFF	; 255
 e1e:	81 1d       	adc	r24, r1
 e20:	81 1d       	adc	r24, r1
 e22:	08 95       	ret

00000e24 <__fp_inf>:
 e24:	97 f9       	bld	r25, 7
 e26:	9f 67       	ori	r25, 0x7F	; 127
 e28:	80 e8       	ldi	r24, 0x80	; 128
 e2a:	70 e0       	ldi	r23, 0x00	; 0
 e2c:	60 e0       	ldi	r22, 0x00	; 0
 e2e:	08 95       	ret

00000e30 <__fp_nan>:
 e30:	9f ef       	ldi	r25, 0xFF	; 255
 e32:	80 ec       	ldi	r24, 0xC0	; 192
 e34:	08 95       	ret

00000e36 <__fp_powser>:
 e36:	df 93       	push	r29
 e38:	cf 93       	push	r28
 e3a:	1f 93       	push	r17
 e3c:	0f 93       	push	r16
 e3e:	ff 92       	push	r15
 e40:	ef 92       	push	r14
 e42:	df 92       	push	r13
 e44:	7b 01       	movw	r14, r22
 e46:	8c 01       	movw	r16, r24
 e48:	68 94       	set
 e4a:	05 c0       	rjmp	.+10     	; 0xe56 <__fp_powser+0x20>
 e4c:	da 2e       	mov	r13, r26
 e4e:	ef 01       	movw	r28, r30
 e50:	76 d0       	rcall	.+236    	; 0xf3e <__mulsf3x>
 e52:	fe 01       	movw	r30, r28
 e54:	e8 94       	clt
 e56:	a5 91       	lpm	r26, Z+
 e58:	25 91       	lpm	r18, Z+
 e5a:	35 91       	lpm	r19, Z+
 e5c:	45 91       	lpm	r20, Z+
 e5e:	55 91       	lpm	r21, Z+
 e60:	ae f3       	brts	.-22     	; 0xe4c <__fp_powser+0x16>
 e62:	ef 01       	movw	r28, r30
 e64:	5d de       	rcall	.-838    	; 0xb20 <__addsf3x>
 e66:	fe 01       	movw	r30, r28
 e68:	97 01       	movw	r18, r14
 e6a:	a8 01       	movw	r20, r16
 e6c:	da 94       	dec	r13
 e6e:	79 f7       	brne	.-34     	; 0xe4e <__fp_powser+0x18>
 e70:	df 90       	pop	r13
 e72:	ef 90       	pop	r14
 e74:	ff 90       	pop	r15
 e76:	0f 91       	pop	r16
 e78:	1f 91       	pop	r17
 e7a:	cf 91       	pop	r28
 e7c:	df 91       	pop	r29
 e7e:	08 95       	ret

00000e80 <__fp_pscA>:
 e80:	00 24       	eor	r0, r0
 e82:	0a 94       	dec	r0
 e84:	16 16       	cp	r1, r22
 e86:	17 06       	cpc	r1, r23
 e88:	18 06       	cpc	r1, r24
 e8a:	09 06       	cpc	r0, r25
 e8c:	08 95       	ret

00000e8e <__fp_pscB>:
 e8e:	00 24       	eor	r0, r0
 e90:	0a 94       	dec	r0
 e92:	12 16       	cp	r1, r18
 e94:	13 06       	cpc	r1, r19
 e96:	14 06       	cpc	r1, r20
 e98:	05 06       	cpc	r0, r21
 e9a:	08 95       	ret

00000e9c <__fp_round>:
 e9c:	09 2e       	mov	r0, r25
 e9e:	03 94       	inc	r0
 ea0:	00 0c       	add	r0, r0
 ea2:	11 f4       	brne	.+4      	; 0xea8 <__fp_round+0xc>
 ea4:	88 23       	and	r24, r24
 ea6:	52 f0       	brmi	.+20     	; 0xebc <__fp_round+0x20>
 ea8:	bb 0f       	add	r27, r27
 eaa:	40 f4       	brcc	.+16     	; 0xebc <__fp_round+0x20>
 eac:	bf 2b       	or	r27, r31
 eae:	11 f4       	brne	.+4      	; 0xeb4 <__fp_round+0x18>
 eb0:	60 ff       	sbrs	r22, 0
 eb2:	04 c0       	rjmp	.+8      	; 0xebc <__fp_round+0x20>
 eb4:	6f 5f       	subi	r22, 0xFF	; 255
 eb6:	7f 4f       	sbci	r23, 0xFF	; 255
 eb8:	8f 4f       	sbci	r24, 0xFF	; 255
 eba:	9f 4f       	sbci	r25, 0xFF	; 255
 ebc:	08 95       	ret

00000ebe <__fp_split3>:
 ebe:	57 fd       	sbrc	r21, 7
 ec0:	90 58       	subi	r25, 0x80	; 128
 ec2:	44 0f       	add	r20, r20
 ec4:	55 1f       	adc	r21, r21
 ec6:	59 f0       	breq	.+22     	; 0xede <__fp_splitA+0x10>
 ec8:	5f 3f       	cpi	r21, 0xFF	; 255
 eca:	71 f0       	breq	.+28     	; 0xee8 <__fp_splitA+0x1a>
 ecc:	47 95       	ror	r20

00000ece <__fp_splitA>:
 ece:	88 0f       	add	r24, r24
 ed0:	97 fb       	bst	r25, 7
 ed2:	99 1f       	adc	r25, r25
 ed4:	61 f0       	breq	.+24     	; 0xeee <__fp_splitA+0x20>
 ed6:	9f 3f       	cpi	r25, 0xFF	; 255
 ed8:	79 f0       	breq	.+30     	; 0xef8 <__fp_splitA+0x2a>
 eda:	87 95       	ror	r24
 edc:	08 95       	ret
 ede:	12 16       	cp	r1, r18
 ee0:	13 06       	cpc	r1, r19
 ee2:	14 06       	cpc	r1, r20
 ee4:	55 1f       	adc	r21, r21
 ee6:	f2 cf       	rjmp	.-28     	; 0xecc <__fp_split3+0xe>
 ee8:	46 95       	lsr	r20
 eea:	f1 df       	rcall	.-30     	; 0xece <__fp_splitA>
 eec:	08 c0       	rjmp	.+16     	; 0xefe <__fp_splitA+0x30>
 eee:	16 16       	cp	r1, r22
 ef0:	17 06       	cpc	r1, r23
 ef2:	18 06       	cpc	r1, r24
 ef4:	99 1f       	adc	r25, r25
 ef6:	f1 cf       	rjmp	.-30     	; 0xeda <__fp_splitA+0xc>
 ef8:	86 95       	lsr	r24
 efa:	71 05       	cpc	r23, r1
 efc:	61 05       	cpc	r22, r1
 efe:	08 94       	sec
 f00:	08 95       	ret

00000f02 <__fp_zero>:
 f02:	e8 94       	clt

00000f04 <__fp_szero>:
 f04:	bb 27       	eor	r27, r27
 f06:	66 27       	eor	r22, r22
 f08:	77 27       	eor	r23, r23
 f0a:	cb 01       	movw	r24, r22
 f0c:	97 f9       	bld	r25, 7
 f0e:	08 95       	ret

00000f10 <__gesf2>:
 f10:	65 df       	rcall	.-310    	; 0xddc <__fp_cmp>
 f12:	08 f4       	brcc	.+2      	; 0xf16 <__gesf2+0x6>
 f14:	8f ef       	ldi	r24, 0xFF	; 255
 f16:	08 95       	ret

00000f18 <inverse>:
 f18:	9b 01       	movw	r18, r22
 f1a:	ac 01       	movw	r20, r24
 f1c:	60 e0       	ldi	r22, 0x00	; 0
 f1e:	70 e0       	ldi	r23, 0x00	; 0
 f20:	80 e8       	ldi	r24, 0x80	; 128
 f22:	9f e3       	ldi	r25, 0x3F	; 63
 f24:	b6 ce       	rjmp	.-660    	; 0xc92 <__divsf3>

00000f26 <__mulsf3>:
 f26:	0b d0       	rcall	.+22     	; 0xf3e <__mulsf3x>
 f28:	b9 cf       	rjmp	.-142    	; 0xe9c <__fp_round>
 f2a:	aa df       	rcall	.-172    	; 0xe80 <__fp_pscA>
 f2c:	28 f0       	brcs	.+10     	; 0xf38 <__mulsf3+0x12>
 f2e:	af df       	rcall	.-162    	; 0xe8e <__fp_pscB>
 f30:	18 f0       	brcs	.+6      	; 0xf38 <__mulsf3+0x12>
 f32:	95 23       	and	r25, r21
 f34:	09 f0       	breq	.+2      	; 0xf38 <__mulsf3+0x12>
 f36:	76 cf       	rjmp	.-276    	; 0xe24 <__fp_inf>
 f38:	7b cf       	rjmp	.-266    	; 0xe30 <__fp_nan>
 f3a:	11 24       	eor	r1, r1
 f3c:	e3 cf       	rjmp	.-58     	; 0xf04 <__fp_szero>

00000f3e <__mulsf3x>:
 f3e:	bf df       	rcall	.-130    	; 0xebe <__fp_split3>
 f40:	a0 f3       	brcs	.-24     	; 0xf2a <__mulsf3+0x4>

00000f42 <__mulsf3_pse>:
 f42:	95 9f       	mul	r25, r21
 f44:	d1 f3       	breq	.-12     	; 0xf3a <__mulsf3+0x14>
 f46:	95 0f       	add	r25, r21
 f48:	50 e0       	ldi	r21, 0x00	; 0
 f4a:	55 1f       	adc	r21, r21
 f4c:	62 9f       	mul	r22, r18
 f4e:	f0 01       	movw	r30, r0
 f50:	72 9f       	mul	r23, r18
 f52:	bb 27       	eor	r27, r27
 f54:	f0 0d       	add	r31, r0
 f56:	b1 1d       	adc	r27, r1
 f58:	63 9f       	mul	r22, r19
 f5a:	aa 27       	eor	r26, r26
 f5c:	f0 0d       	add	r31, r0
 f5e:	b1 1d       	adc	r27, r1
 f60:	aa 1f       	adc	r26, r26
 f62:	64 9f       	mul	r22, r20
 f64:	66 27       	eor	r22, r22
 f66:	b0 0d       	add	r27, r0
 f68:	a1 1d       	adc	r26, r1
 f6a:	66 1f       	adc	r22, r22
 f6c:	82 9f       	mul	r24, r18
 f6e:	22 27       	eor	r18, r18
 f70:	b0 0d       	add	r27, r0
 f72:	a1 1d       	adc	r26, r1
 f74:	62 1f       	adc	r22, r18
 f76:	73 9f       	mul	r23, r19
 f78:	b0 0d       	add	r27, r0
 f7a:	a1 1d       	adc	r26, r1
 f7c:	62 1f       	adc	r22, r18
 f7e:	83 9f       	mul	r24, r19
 f80:	a0 0d       	add	r26, r0
 f82:	61 1d       	adc	r22, r1
 f84:	22 1f       	adc	r18, r18
 f86:	74 9f       	mul	r23, r20
 f88:	33 27       	eor	r19, r19
 f8a:	a0 0d       	add	r26, r0
 f8c:	61 1d       	adc	r22, r1
 f8e:	23 1f       	adc	r18, r19
 f90:	84 9f       	mul	r24, r20
 f92:	60 0d       	add	r22, r0
 f94:	21 1d       	adc	r18, r1
 f96:	82 2f       	mov	r24, r18
 f98:	76 2f       	mov	r23, r22
 f9a:	6a 2f       	mov	r22, r26
 f9c:	11 24       	eor	r1, r1
 f9e:	9f 57       	subi	r25, 0x7F	; 127
 fa0:	50 40       	sbci	r21, 0x00	; 0
 fa2:	8a f0       	brmi	.+34     	; 0xfc6 <__mulsf3_pse+0x84>
 fa4:	e1 f0       	breq	.+56     	; 0xfde <__mulsf3_pse+0x9c>
 fa6:	88 23       	and	r24, r24
 fa8:	4a f0       	brmi	.+18     	; 0xfbc <__mulsf3_pse+0x7a>
 faa:	ee 0f       	add	r30, r30
 fac:	ff 1f       	adc	r31, r31
 fae:	bb 1f       	adc	r27, r27
 fb0:	66 1f       	adc	r22, r22
 fb2:	77 1f       	adc	r23, r23
 fb4:	88 1f       	adc	r24, r24
 fb6:	91 50       	subi	r25, 0x01	; 1
 fb8:	50 40       	sbci	r21, 0x00	; 0
 fba:	a9 f7       	brne	.-22     	; 0xfa6 <__mulsf3_pse+0x64>
 fbc:	9e 3f       	cpi	r25, 0xFE	; 254
 fbe:	51 05       	cpc	r21, r1
 fc0:	70 f0       	brcs	.+28     	; 0xfde <__mulsf3_pse+0x9c>
 fc2:	30 cf       	rjmp	.-416    	; 0xe24 <__fp_inf>
 fc4:	9f cf       	rjmp	.-194    	; 0xf04 <__fp_szero>
 fc6:	5f 3f       	cpi	r21, 0xFF	; 255
 fc8:	ec f3       	brlt	.-6      	; 0xfc4 <__mulsf3_pse+0x82>
 fca:	98 3e       	cpi	r25, 0xE8	; 232
 fcc:	dc f3       	brlt	.-10     	; 0xfc4 <__mulsf3_pse+0x82>
 fce:	86 95       	lsr	r24
 fd0:	77 95       	ror	r23
 fd2:	67 95       	ror	r22
 fd4:	b7 95       	ror	r27
 fd6:	f7 95       	ror	r31
 fd8:	e7 95       	ror	r30
 fda:	9f 5f       	subi	r25, 0xFF	; 255
 fdc:	c1 f7       	brne	.-16     	; 0xfce <__mulsf3_pse+0x8c>
 fde:	fe 2b       	or	r31, r30
 fe0:	88 0f       	add	r24, r24
 fe2:	91 1d       	adc	r25, r1
 fe4:	96 95       	lsr	r25
 fe6:	87 95       	ror	r24
 fe8:	97 f9       	bld	r25, 7
 fea:	08 95       	ret

00000fec <square>:
 fec:	9b 01       	movw	r18, r22
 fee:	ac 01       	movw	r20, r24
 ff0:	9a cf       	rjmp	.-204    	; 0xf26 <__mulsf3>

00000ff2 <_exit>:
 ff2:	f8 94       	cli

00000ff4 <__stop_program>:
 ff4:	ff cf       	rjmp	.-2      	; 0xff4 <__stop_program>
