
kontroll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000107c  00001110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000107c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00001110  2**0
                  ALLOC
  3 .stab         00002964  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008e9  00000000  00000000  00003a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00004360  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000829  00000000  00000000  00004400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f2  00000000  00000000  00004c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050f  00000000  00000000  00004f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  0000542c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000252  00000000  00000000  00005620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000052c  00000000  00000000  00005872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_1>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_2>
       c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      68:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      6c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      70:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      74:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      7c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      80:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      84:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      88:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
      8c:	08 4a       	sbci	r16, 0xA8	; 168
      8e:	d7 3b       	cpi	r29, 0xB7	; 183
      90:	3b ce       	rjmp	.-906    	; 0xfffffd08 <__eeprom_end+0xff7efd08>
      92:	01 6e       	ori	r16, 0xE1	; 225
      94:	84 bc       	out	0x24, r8	; 36
      96:	bf fd       	.word	0xfdbf	; ????
      98:	c1 2f       	mov	r28, r17
      9a:	3d 6c       	ori	r19, 0xCD	; 205
      9c:	74 31       	cpi	r23, 0x14	; 20
      9e:	9a bd       	out	0x2a, r25	; 42
      a0:	56 83       	std	Z+6, r21	; 0x06
      a2:	3d da       	rcall	.-2950   	; 0xfffff51e <__eeprom_end+0xff7ef51e>
      a4:	3d 00       	.word	0x003d	; ????
      a6:	c7 7f       	andi	r28, 0xF7	; 247
      a8:	11 be       	out	0x31, r1	; 49
      aa:	d9 e4       	ldi	r29, 0x49	; 73
      ac:	bb 4c       	sbci	r27, 0xCB	; 203
      ae:	3e 91       	ld	r19, -X
      b0:	6b aa       	sts	0x9b, r22
      b2:	aa be       	out	0x3a, r10	; 58
      b4:	00 00       	nop
      b6:	00 80       	ld	r0, Z
      b8:	3f 00       	.word	0x003f	; ????

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d0 e4       	ldi	r29, 0x40	; 64
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	ec e7       	ldi	r30, 0x7C	; 124
      ce:	f0 e1       	ldi	r31, 0x10	; 16
      d0:	00 e0       	ldi	r16, 0x00	; 0
      d2:	0b bf       	out	0x3b, r16	; 59
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x14>
      d6:	07 90       	elpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a0 30       	cpi	r26, 0x00	; 0
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0x10>
      e0:	1b be       	out	0x3b, r1	; 59

000000e2 <__do_clear_bss>:
      e2:	11 e0       	ldi	r17, 0x01	; 1
      e4:	a0 e0       	ldi	r26, 0x00	; 0
      e6:	b1 e0       	ldi	r27, 0x01	; 1
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a6 30       	cpi	r26, 0x06	; 6
      ee:	b1 07       	cpc	r27, r17
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
      f2:	0e 94 33 05 	call	0xa66	; 0xa66 <main>
      f6:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <_exit>

000000fa <__bad_interrupt>:
      fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <initOnInterrupt>:
steer_mode steer;

void initOnInterrupt() {
	
	/* Low level generates interrupt. */
	EICRA = (0<<ISC00)|(0<<ISC01);
      fe:	10 92 69 00 	sts	0x0069, r1
	
	/* Enable the external interrupt on port INT0. */
	EIMSK = (1<<ON_OFF_SWITCH);
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	8d bb       	out	0x1d, r24	; 29
	
	/* Set the global interrupt flag. */
//	sei();
}
     106:	08 95       	ret

00000108 <initOffInterrupt>:

void initOffInterrupt() {
	
	/* Rising edge generates interrupt. */
	EICRA = (1<<ISC00)|(1<<ISC01);
     108:	83 e0       	ldi	r24, 0x03	; 3
     10a:	80 93 69 00 	sts	0x0069, r24
	
	/* Enable the external interrupt on port INT0. */
	EIMSK = (1<<ON_OFF_SWITCH);
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	8d bb       	out	0x1d, r24	; 29
	
	/* Set the global interrupt flag. */
//	sei();
}
     112:	08 95       	ret

00000114 <initSteerInterrupt>:

void initSteerInterrupt() {
	
	/* Rising edge generates interrupt. */
	EICRA = (1<<ISC10)|(1<<ISC11);
     114:	8c e0       	ldi	r24, 0x0C	; 12
     116:	80 93 69 00 	sts	0x0069, r24
	
	/* Enable the external interrupt on port INT1. */
	EIMSK = (1<<STEER_SWITCH);
     11a:	82 e0       	ldi	r24, 0x02	; 2
     11c:	8d bb       	out	0x1d, r24	; 29
	
	/* Set the global interrupt flag. */
//	sei();
}
     11e:	08 95       	ret

00000120 <__vector_1>:
* Output:	-
* Description:	Interrupt routine for an external interrupt
*				on port INT0, does nothing but waking the MCU
*				up after entering sleep mode.
*/
ISR(INT0_vect) {
     120:	1f 92       	push	r1
     122:	0f 92       	push	r0
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	0f 92       	push	r0
     128:	11 24       	eor	r1, r1
     12a:	8f 93       	push	r24
	
	/* Change power mode flag. */
	if (power == OFF) {
     12c:	80 91 00 01 	lds	r24, 0x0100
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	19 f4       	brne	.+6      	; 0x13a <__vector_1+0x1a>
		power = ON;
     134:	10 92 00 01 	sts	0x0100, r1
     138:	03 c0       	rjmp	.+6      	; 0x140 <__vector_1+0x20>
	} else {
		power = OFF;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	80 93 00 01 	sts	0x0100, r24
	}
}
     140:	8f 91       	pop	r24
     142:	0f 90       	pop	r0
     144:	0f be       	out	0x3f, r0	; 63
     146:	0f 90       	pop	r0
     148:	1f 90       	pop	r1
     14a:	18 95       	reti

0000014c <__vector_2>:

ISR(INT1_vect) {
     14c:	1f 92       	push	r1
     14e:	0f 92       	push	r0
     150:	0f b6       	in	r0, 0x3f	; 63
     152:	0f 92       	push	r0
     154:	11 24       	eor	r1, r1
     156:	8f 93       	push	r24
	
	/* Change steering mode flag. */
	if (steer == MAN) {
     158:	80 91 01 01 	lds	r24, 0x0101
     15c:	88 23       	and	r24, r24
     15e:	21 f4       	brne	.+8      	; 0x168 <__vector_2+0x1c>
		steer = AUTO;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 01 01 	sts	0x0101, r24
     166:	02 c0       	rjmp	.+4      	; 0x16c <__vector_2+0x20>
	} else {
		steer = MAN;
     168:	10 92 01 01 	sts	0x0101, r1
	}
	
}
     16c:	8f 91       	pop	r24
     16e:	0f 90       	pop	r0
     170:	0f be       	out	0x3f, r0	; 63
     172:	0f 90       	pop	r0
     174:	1f 90       	pop	r1
     176:	18 95       	reti

00000178 <USART_Init>:
* Description: Initializes the USART.
*/
void USART_Init(unsigned int ubrr) {
	
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     178:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     17c:	80 93 c4 00 	sts	0x00C4, r24
	
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     180:	88 e1       	ldi	r24, 0x18	; 24
     182:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     186:	8e e0       	ldi	r24, 0x0E	; 14
     188:	80 93 c2 00 	sts	0x00C2, r24
}
     18c:	08 95       	ret

0000018e <init>:
*				and timer.
*/
void init() {
	
	/* Set power control to output and constantly high. */
	DDRB |= _BV(POWER_CONTROL);
     18e:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= _BV(POWER_CONTROL);
     190:	28 9a       	sbi	0x05, 0	; 5
	
	/* Set switches as inputs with pull up resistance. */
	DDRD &= ~_BV(ON_OFF_SWITCH);
     192:	50 98       	cbi	0x0a, 0	; 10
	DDRD &= ~_BV(STEER_SWITCH);
     194:	51 98       	cbi	0x0a, 1	; 10
	PORTD |= _BV(ON_OFF_SWITCH);
     196:	58 9a       	sbi	0x0b, 0	; 11
	PORTD |= _BV(STEER_SWITCH);
     198:	59 9a       	sbi	0x0b, 1	; 11

	/* Enable the ADC. */
	ADCSRA |= _BV(ADEN);
     19a:	ea e7       	ldi	r30, 0x7A	; 122
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	80 68       	ori	r24, 0x80	; 128
     1a2:	80 83       	st	Z, r24
	
	/* Initialize the USART. */
	USART_Init(MYUBRR);
     1a4:	87 e6       	ldi	r24, 0x67	; 103
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 bc 00 	call	0x178	; 0x178 <USART_Init>
	
	/* Initialize global flags. */
	power = ON;
     1ac:	10 92 00 01 	sts	0x0100, r1
	steer = MAN;
     1b0:	10 92 01 01 	sts	0x0101, r1
	
	/* Initialize the interrupts. */
	initOffInterrupt();
     1b4:	0e 94 84 00 	call	0x108	; 0x108 <initOffInterrupt>
	initSteerInterrupt();
     1b8:	0e 94 8a 00 	call	0x114	; 0x114 <initSteerInterrupt>
	
	/* Set global interrupt flag. */
	sei();
     1bc:	78 94       	sei
}
     1be:	08 95       	ret

000001c0 <USART_Transmit>:
* Description: Transmits data via bluetooth.
*/
void USART_Transmit(unsigned char data) {
	
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)));
     1c0:	e0 ec       	ldi	r30, 0xC0	; 192
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	90 81       	ld	r25, Z
     1c6:	95 ff       	sbrs	r25, 5
     1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <USART_Transmit+0x4>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     1ca:	80 93 c6 00 	sts	0x00C6, r24
}
     1ce:	08 95       	ret

000001d0 <USART_Receive>:
* Description: Receives data via bluetooth.
*/
unsigned char USART_Receive() {
	
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
     1d0:	e0 ec       	ldi	r30, 0xC0	; 192
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	88 23       	and	r24, r24
     1d8:	ec f7       	brge	.-6      	; 0x1d4 <USART_Receive+0x4>
	
	/* Get and return received data from buffer */
	return UDR0;
     1da:	80 91 c6 00 	lds	r24, 0x00C6
}
     1de:	08 95       	ret

000001e0 <adc_read>:
*/
uint16_t adc_read(uint8_t adcx) {
	
	/* Takes voltage levels from Aref and sets which analog pin we want
	 * to read from. */
	ADMUX &= 0b01100000;
     1e0:	ec e7       	ldi	r30, 0x7C	; 124
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	90 81       	ld	r25, Z
     1e6:	90 76       	andi	r25, 0x60	; 96
     1e8:	90 83       	st	Z, r25
	ADMUX |= adcx;
     1ea:	90 81       	ld	r25, Z
     1ec:	89 2b       	or	r24, r25
     1ee:	80 83       	st	Z, r24

	/* This starts the conversion. */
	ADCSRA |= _BV(ADSC);
     1f0:	ea e7       	ldi	r30, 0x7A	; 122
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	80 64       	ori	r24, 0x40	; 64
     1f8:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	* is finished. It constantly checks ADCSRA's ADSC bit, which we just
	* set above, to see if it is still set. This bit is automatically
	* reset (zeroed) when the conversion is ready so if we do this in
	* a loop the loop will just go until the conversion is ready. */
	while ((ADCSRA & _BV(ADSC)));
     1fa:	80 81       	ld	r24, Z
     1fc:	86 fd       	sbrc	r24, 6
     1fe:	fd cf       	rjmp	.-6      	; 0x1fa <adc_read+0x1a>

	/* Finally, we return the converted value to the calling function. */
	return ADC;
     200:	80 91 78 00 	lds	r24, 0x0078
     204:	90 91 79 00 	lds	r25, 0x0079
}
     208:	08 95       	ret

0000020a <getXValue>:
*				value of the adc_read function.
*/
int getXValue() {
	
	int x_value;
	uint16_t read = adc_read(X_AXIS);
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <adc_read>
	
	if (read >= ADC_THRESHOLDH7) {
     210:	23 e0       	ldi	r18, 0x03	; 3
     212:	80 3c       	cpi	r24, 0xC0	; 192
     214:	92 07       	cpc	r25, r18
     216:	a0 f5       	brcc	.+104    	; 0x280 <getXValue+0x76>
		x_value = 7;
	} else if (read > ADC_THRESHOLDH6) {
     218:	23 e0       	ldi	r18, 0x03	; 3
     21a:	81 38       	cpi	r24, 0x81	; 129
     21c:	92 07       	cpc	r25, r18
     21e:	98 f5       	brcc	.+102    	; 0x286 <getXValue+0x7c>
		x_value = 6;
	} else if (read > ADC_THRESHOLDH5) {
     220:	23 e0       	ldi	r18, 0x03	; 3
     222:	81 34       	cpi	r24, 0x41	; 65
     224:	92 07       	cpc	r25, r18
     226:	90 f5       	brcc	.+100    	; 0x28c <getXValue+0x82>
		x_value = 5;
	} else if (read > ADC_THRESHOLDH4) {
     228:	23 e0       	ldi	r18, 0x03	; 3
     22a:	81 30       	cpi	r24, 0x01	; 1
     22c:	92 07       	cpc	r25, r18
     22e:	88 f5       	brcc	.+98     	; 0x292 <getXValue+0x88>
		x_value = 4;
	} else if (read > ADC_THRESHOLDH3) {
     230:	22 e0       	ldi	r18, 0x02	; 2
     232:	81 3c       	cpi	r24, 0xC1	; 193
     234:	92 07       	cpc	r25, r18
     236:	80 f5       	brcc	.+96     	; 0x298 <getXValue+0x8e>
		x_value = 3;
	} else if (read > ADC_THRESHOLDH2) {
     238:	22 e0       	ldi	r18, 0x02	; 2
     23a:	81 38       	cpi	r24, 0x81	; 129
     23c:	92 07       	cpc	r25, r18
     23e:	78 f5       	brcc	.+94     	; 0x29e <getXValue+0x94>
		x_value = 2;
	} else if (read > ADC_THRESHOLDH1) {
     240:	22 e0       	ldi	r18, 0x02	; 2
     242:	81 34       	cpi	r24, 0x41	; 65
     244:	92 07       	cpc	r25, r18
     246:	70 f5       	brcc	.+92     	; 0x2a4 <getXValue+0x9a>
		x_value = 1;
	} else if (read <= ADC_THRESHOLDL7) {
     248:	81 34       	cpi	r24, 0x41	; 65
     24a:	91 05       	cpc	r25, r1
     24c:	70 f1       	brcs	.+92     	; 0x2aa <getXValue+0xa0>
		x_value = -7;
	} else if (read < ADC_THRESHOLDL6) {
     24e:	80 38       	cpi	r24, 0x80	; 128
     250:	91 05       	cpc	r25, r1
     252:	70 f1       	brcs	.+92     	; 0x2b0 <getXValue+0xa6>
		x_value = -6;
	} else if (read < ADC_THRESHOLDL5) {
     254:	80 3c       	cpi	r24, 0xC0	; 192
     256:	91 05       	cpc	r25, r1
     258:	70 f1       	brcs	.+92     	; 0x2b6 <getXValue+0xac>
		x_value = -5;
	} else if (read < ADC_THRESHOLDL4) {
     25a:	8f 3f       	cpi	r24, 0xFF	; 255
     25c:	91 05       	cpc	r25, r1
     25e:	71 f1       	breq	.+92     	; 0x2bc <getXValue+0xb2>
     260:	68 f1       	brcs	.+90     	; 0x2bc <getXValue+0xb2>
		x_value = -4;
	} else if (read < ADC_THRESHOLDL3) {
     262:	21 e0       	ldi	r18, 0x01	; 1
     264:	80 34       	cpi	r24, 0x40	; 64
     266:	92 07       	cpc	r25, r18
     268:	60 f1       	brcs	.+88     	; 0x2c2 <getXValue+0xb8>
		x_value = -3;
	} else if (read < ADC_THRESHOLDL2) {
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	80 38       	cpi	r24, 0x80	; 128
     26e:	92 07       	cpc	r25, r18
     270:	58 f1       	brcs	.+86     	; 0x2c8 <getXValue+0xbe>
		x_value = -2;
	} else if (read < ADC_THRESHOLDL1){
     272:	21 e0       	ldi	r18, 0x01	; 1
     274:	80 3c       	cpi	r24, 0xC0	; 192
     276:	92 07       	cpc	r25, r18
     278:	50 f5       	brcc	.+84     	; 0x2ce <getXValue+0xc4>
		x_value = -1;
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	9f ef       	ldi	r25, 0xFF	; 255
     27e:	08 95       	ret
	
	int x_value;
	uint16_t read = adc_read(X_AXIS);
	
	if (read >= ADC_THRESHOLDH7) {
		x_value = 7;
     280:	87 e0       	ldi	r24, 0x07	; 7
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	08 95       	ret
	} else if (read > ADC_THRESHOLDH6) {
		x_value = 6;
     286:	86 e0       	ldi	r24, 0x06	; 6
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	08 95       	ret
	} else if (read > ADC_THRESHOLDH5) {
		x_value = 5;
     28c:	85 e0       	ldi	r24, 0x05	; 5
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	08 95       	ret
	} else if (read > ADC_THRESHOLDH4) {
		x_value = 4;
     292:	84 e0       	ldi	r24, 0x04	; 4
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	08 95       	ret
	} else if (read > ADC_THRESHOLDH3) {
		x_value = 3;
     298:	83 e0       	ldi	r24, 0x03	; 3
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	08 95       	ret
	} else if (read > ADC_THRESHOLDH2) {
		x_value = 2;
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	08 95       	ret
	} else if (read > ADC_THRESHOLDH1) {
		x_value = 1;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	08 95       	ret
	} else if (read <= ADC_THRESHOLDL7) {
		x_value = -7;
     2aa:	89 ef       	ldi	r24, 0xF9	; 249
     2ac:	9f ef       	ldi	r25, 0xFF	; 255
     2ae:	08 95       	ret
	} else if (read < ADC_THRESHOLDL6) {
		x_value = -6;
     2b0:	8a ef       	ldi	r24, 0xFA	; 250
     2b2:	9f ef       	ldi	r25, 0xFF	; 255
     2b4:	08 95       	ret
	} else if (read < ADC_THRESHOLDL5) {
		x_value = -5;
     2b6:	8b ef       	ldi	r24, 0xFB	; 251
     2b8:	9f ef       	ldi	r25, 0xFF	; 255
     2ba:	08 95       	ret
	} else if (read < ADC_THRESHOLDL4) {
		x_value = -4;
     2bc:	8c ef       	ldi	r24, 0xFC	; 252
     2be:	9f ef       	ldi	r25, 0xFF	; 255
     2c0:	08 95       	ret
	} else if (read < ADC_THRESHOLDL3) {
		x_value = -3;
     2c2:	8d ef       	ldi	r24, 0xFD	; 253
     2c4:	9f ef       	ldi	r25, 0xFF	; 255
     2c6:	08 95       	ret
	} else if (read < ADC_THRESHOLDL2) {
		x_value = -2;
     2c8:	8e ef       	ldi	r24, 0xFE	; 254
     2ca:	9f ef       	ldi	r25, 0xFF	; 255
     2cc:	08 95       	ret
	} else if (read < ADC_THRESHOLDL1){
		x_value = -1;
	} else {
		x_value = 0;
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
	}
					
	return x_value;
}
     2d2:	08 95       	ret

000002d4 <getYValue>:
*				value of the adc_read function.
*/
int getYValue() {
	
	int y_value;
	uint16_t read = adc_read(Y_AXIS);
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <adc_read>
	
	if (read >= ADC_THRESHOLDH7) {
     2da:	23 e0       	ldi	r18, 0x03	; 3
     2dc:	80 3c       	cpi	r24, 0xC0	; 192
     2de:	92 07       	cpc	r25, r18
     2e0:	b0 f5       	brcc	.+108    	; 0x34e <getYValue+0x7a>
		y_value = -7;
	} else if (read > ADC_THRESHOLDH6) {
     2e2:	43 e0       	ldi	r20, 0x03	; 3
     2e4:	81 38       	cpi	r24, 0x81	; 129
     2e6:	94 07       	cpc	r25, r20
     2e8:	a8 f5       	brcc	.+106    	; 0x354 <getYValue+0x80>
		y_value = -6;
	} else if (read > ADC_THRESHOLDH5) {
     2ea:	23 e0       	ldi	r18, 0x03	; 3
     2ec:	81 34       	cpi	r24, 0x41	; 65
     2ee:	92 07       	cpc	r25, r18
     2f0:	a0 f5       	brcc	.+104    	; 0x35a <getYValue+0x86>
		y_value = -5;
	} else if (read > ADC_THRESHOLDH4) {
     2f2:	43 e0       	ldi	r20, 0x03	; 3
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	94 07       	cpc	r25, r20
     2f8:	98 f5       	brcc	.+102    	; 0x360 <getYValue+0x8c>
		y_value = -4;
	} else if (read > ADC_THRESHOLDH3) {
     2fa:	22 e0       	ldi	r18, 0x02	; 2
     2fc:	81 3c       	cpi	r24, 0xC1	; 193
     2fe:	92 07       	cpc	r25, r18
     300:	90 f5       	brcc	.+100    	; 0x366 <getYValue+0x92>
		y_value = -3;
	} else if (read > ADC_THRESHOLDH2) {
     302:	42 e0       	ldi	r20, 0x02	; 2
     304:	81 38       	cpi	r24, 0x81	; 129
     306:	94 07       	cpc	r25, r20
     308:	88 f5       	brcc	.+98     	; 0x36c <getYValue+0x98>
		y_value = -2;
	} else if (read > ADC_THRESHOLDH1) {
     30a:	22 e0       	ldi	r18, 0x02	; 2
     30c:	81 34       	cpi	r24, 0x41	; 65
     30e:	92 07       	cpc	r25, r18
     310:	80 f5       	brcc	.+96     	; 0x372 <getYValue+0x9e>
		y_value = -1;
	} else if (read <= ADC_THRESHOLDL7) {
     312:	81 34       	cpi	r24, 0x41	; 65
     314:	91 05       	cpc	r25, r1
     316:	80 f1       	brcs	.+96     	; 0x378 <getYValue+0xa4>
		y_value = 7;
	} else if (read < ADC_THRESHOLDL6) {
     318:	80 38       	cpi	r24, 0x80	; 128
     31a:	91 05       	cpc	r25, r1
     31c:	80 f1       	brcs	.+96     	; 0x37e <getYValue+0xaa>
		y_value = 6;
	} else if (read < ADC_THRESHOLDL5) {
     31e:	80 3c       	cpi	r24, 0xC0	; 192
     320:	91 05       	cpc	r25, r1
     322:	80 f1       	brcs	.+96     	; 0x384 <getYValue+0xb0>
		y_value = 5;
	} else if (read < ADC_THRESHOLDL4) {
     324:	8f 3f       	cpi	r24, 0xFF	; 255
     326:	91 05       	cpc	r25, r1
     328:	81 f1       	breq	.+96     	; 0x38a <getYValue+0xb6>
     32a:	78 f1       	brcs	.+94     	; 0x38a <getYValue+0xb6>
		y_value = 4;
	} else if (read < ADC_THRESHOLDL3) {
     32c:	41 e0       	ldi	r20, 0x01	; 1
     32e:	80 34       	cpi	r24, 0x40	; 64
     330:	94 07       	cpc	r25, r20
     332:	70 f1       	brcs	.+92     	; 0x390 <getYValue+0xbc>
		y_value = 3;
	} else if (read < ADC_THRESHOLDL2) {
     334:	21 e0       	ldi	r18, 0x01	; 1
     336:	80 38       	cpi	r24, 0x80	; 128
     338:	92 07       	cpc	r25, r18
     33a:	68 f1       	brcs	.+90     	; 0x396 <getYValue+0xc2>
	
	int y_value;
	uint16_t read = adc_read(Y_AXIS);
	
	if (read >= ADC_THRESHOLDH7) {
		y_value = -7;
     33c:	21 e0       	ldi	r18, 0x01	; 1
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	41 e0       	ldi	r20, 0x01	; 1
     342:	80 3c       	cpi	r24, 0xC0	; 192
     344:	94 07       	cpc	r25, r20
     346:	48 f1       	brcs	.+82     	; 0x39a <getYValue+0xc6>
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	26 c0       	rjmp	.+76     	; 0x39a <getYValue+0xc6>
     34e:	29 ef       	ldi	r18, 0xF9	; 249
     350:	3f ef       	ldi	r19, 0xFF	; 255
     352:	23 c0       	rjmp	.+70     	; 0x39a <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH6) {
		y_value = -6;
     354:	2a ef       	ldi	r18, 0xFA	; 250
     356:	3f ef       	ldi	r19, 0xFF	; 255
     358:	20 c0       	rjmp	.+64     	; 0x39a <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH5) {
		y_value = -5;
     35a:	2b ef       	ldi	r18, 0xFB	; 251
     35c:	3f ef       	ldi	r19, 0xFF	; 255
     35e:	1d c0       	rjmp	.+58     	; 0x39a <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH4) {
		y_value = -4;
     360:	2c ef       	ldi	r18, 0xFC	; 252
     362:	3f ef       	ldi	r19, 0xFF	; 255
     364:	1a c0       	rjmp	.+52     	; 0x39a <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH3) {
		y_value = -3;
     366:	2d ef       	ldi	r18, 0xFD	; 253
     368:	3f ef       	ldi	r19, 0xFF	; 255
     36a:	17 c0       	rjmp	.+46     	; 0x39a <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH2) {
		y_value = -2;
     36c:	2e ef       	ldi	r18, 0xFE	; 254
     36e:	3f ef       	ldi	r19, 0xFF	; 255
     370:	14 c0       	rjmp	.+40     	; 0x39a <getYValue+0xc6>
	} else if (read > ADC_THRESHOLDH1) {
		y_value = -1;
     372:	2f ef       	ldi	r18, 0xFF	; 255
     374:	3f ef       	ldi	r19, 0xFF	; 255
     376:	11 c0       	rjmp	.+34     	; 0x39a <getYValue+0xc6>
	} else if (read <= ADC_THRESHOLDL7) {
		y_value = 7;
     378:	27 e0       	ldi	r18, 0x07	; 7
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	0e c0       	rjmp	.+28     	; 0x39a <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL6) {
		y_value = 6;
     37e:	26 e0       	ldi	r18, 0x06	; 6
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	0b c0       	rjmp	.+22     	; 0x39a <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL5) {
		y_value = 5;
     384:	25 e0       	ldi	r18, 0x05	; 5
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	08 c0       	rjmp	.+16     	; 0x39a <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL4) {
		y_value = 4;
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	05 c0       	rjmp	.+10     	; 0x39a <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL3) {
		y_value = 3;
     390:	23 e0       	ldi	r18, 0x03	; 3
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	02 c0       	rjmp	.+4      	; 0x39a <getYValue+0xc6>
	} else if (read < ADC_THRESHOLDL2) {
		y_value = 2;
     396:	22 e0       	ldi	r18, 0x02	; 2
     398:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		y_value = 0;
	}
	
	return y_value;
}
     39a:	82 2f       	mov	r24, r18
     39c:	93 2f       	mov	r25, r19
     39e:	08 95       	ret

000003a0 <setDirections>:
*			angle: const double - The angle of the joystick position in
*									the interval [-pi, pi]. 
* Output:	-
* Description: Sets the engine directions given the angle of the joystick.
*/
void setDirections(engine_data *edata, const double angle) {
     3a0:	cf 92       	push	r12
     3a2:	df 92       	push	r13
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	ec 01       	movw	r28, r24
     3ae:	6a 01       	movw	r12, r20
     3b0:	7b 01       	movw	r14, r22
	
	if (angle <= 3*PI/4 && angle >= -PI/4) {
     3b2:	cb 01       	movw	r24, r22
     3b4:	ba 01       	movw	r22, r20
     3b6:	24 ee       	ldi	r18, 0xE4	; 228
     3b8:	3b ec       	ldi	r19, 0xCB	; 203
     3ba:	46 e1       	ldi	r20, 0x16	; 22
     3bc:	50 e4       	ldi	r21, 0x40	; 64
     3be:	0e 94 88 06 	call	0xd10	; 0xd10 <__cmpsf2>
     3c2:	18 16       	cp	r1, r24
     3c4:	64 f0       	brlt	.+24     	; 0x3de <setDirections+0x3e>
     3c6:	c7 01       	movw	r24, r14
     3c8:	b6 01       	movw	r22, r12
     3ca:	2b ed       	ldi	r18, 0xDB	; 219
     3cc:	3f e0       	ldi	r19, 0x0F	; 15
     3ce:	49 e4       	ldi	r20, 0x49	; 73
     3d0:	5f eb       	ldi	r21, 0xBF	; 191
     3d2:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     3d6:	88 23       	and	r24, r24
     3d8:	14 f0       	brlt	.+4      	; 0x3de <setDirections+0x3e>
		edata->left_engine_dir = FORWARD;
     3da:	18 82       	st	Y, r1
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <setDirections+0x42>
	} else {
		edata->left_engine_dir = BACKWARD;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	88 83       	st	Y, r24
	}
	
	if (angle <= PI/4 && angle >= -3*PI/4) {
     3e2:	c7 01       	movw	r24, r14
     3e4:	b6 01       	movw	r22, r12
     3e6:	2b ed       	ldi	r18, 0xDB	; 219
     3e8:	3f e0       	ldi	r19, 0x0F	; 15
     3ea:	49 e4       	ldi	r20, 0x49	; 73
     3ec:	5f e3       	ldi	r21, 0x3F	; 63
     3ee:	0e 94 88 06 	call	0xd10	; 0xd10 <__cmpsf2>
     3f2:	18 16       	cp	r1, r24
     3f4:	6c f0       	brlt	.+26     	; 0x410 <setDirections+0x70>
     3f6:	c7 01       	movw	r24, r14
     3f8:	b6 01       	movw	r22, r12
     3fa:	24 ee       	ldi	r18, 0xE4	; 228
     3fc:	3b ec       	ldi	r19, 0xCB	; 203
     3fe:	46 e1       	ldi	r20, 0x16	; 22
     400:	50 ec       	ldi	r21, 0xC0	; 192
     402:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     406:	88 23       	and	r24, r24
     408:	1c f0       	brlt	.+6      	; 0x410 <setDirections+0x70>
		edata->right_engine_dir = BACKWARD;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	89 83       	std	Y+1, r24	; 0x01
     40e:	01 c0       	rjmp	.+2      	; 0x412 <setDirections+0x72>
	} else {
		edata->right_engine_dir = FORWARD;
     410:	19 82       	std	Y+1, r1	; 0x01
	}
}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	df 90       	pop	r13
     41c:	cf 90       	pop	r12
     41e:	08 95       	ret

00000420 <setThrottles>:
*			x_value: const int - The current x position of the joystick.
*			y_value: const int - The current y position of the joystick.
* Output:	-
* Description: Sets the engine throttles. 
*/
void setThrottles(engine_data *edata, const double angle, const int x_value, const int y_value) {
     420:	6f 92       	push	r6
     422:	7f 92       	push	r7
     424:	8f 92       	push	r8
     426:	9f 92       	push	r9
     428:	af 92       	push	r10
     42a:	bf 92       	push	r11
     42c:	cf 92       	push	r12
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	3c 01       	movw	r6, r24
     43e:	6a 01       	movw	r12, r20
     440:	7b 01       	movw	r14, r22
     442:	c2 2f       	mov	r28, r18
     444:	d3 2f       	mov	r29, r19
	* 
	* The head engines are:
	* Left engine		for [0, PI/2) and [-PI, -PI/2)  
	* Right engine		for [PI/2, PI) and [-PI/2, 0). 
	*/
	if (angle >= 0 && angle < PI/4) {
     446:	cb 01       	movw	r24, r22
     448:	ba 01       	movw	r22, r20
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	a9 01       	movw	r20, r18
     450:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     454:	88 23       	and	r24, r24
     456:	d4 f1       	brlt	.+116    	; 0x4cc <setThrottles+0xac>
     458:	c7 01       	movw	r24, r14
     45a:	b6 01       	movw	r22, r12
     45c:	2b ed       	ldi	r18, 0xDB	; 219
     45e:	3f e0       	ldi	r19, 0x0F	; 15
     460:	49 e4       	ldi	r20, 0x49	; 73
     462:	5f e3       	ldi	r21, 0x3F	; 63
     464:	0e 94 88 06 	call	0xd10	; 0xd10 <__cmpsf2>
     468:	88 23       	and	r24, r24
     46a:	84 f5       	brge	.+96     	; 0x4cc <setThrottles+0xac>
		factor = 1 - angle/(PI/4);
		edata->left_engine_throttle = (double)(abs(x_value));
     46c:	6c 2f       	mov	r22, r28
     46e:	7d 2f       	mov	r23, r29
     470:	77 23       	and	r23, r23
     472:	1c f4       	brge	.+6      	; 0x47a <setThrottles+0x5a>
     474:	70 95       	com	r23
     476:	61 95       	neg	r22
     478:	7f 4f       	sbci	r23, 0xFF	; 255
     47a:	88 27       	eor	r24, r24
     47c:	77 fd       	sbrc	r23, 7
     47e:	80 95       	com	r24
     480:	98 2f       	mov	r25, r24
     482:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatsisf>
     486:	4b 01       	movw	r8, r22
     488:	5c 01       	movw	r10, r24
     48a:	f3 01       	movw	r30, r6
     48c:	62 83       	std	Z+2, r22	; 0x02
     48e:	73 83       	std	Z+3, r23	; 0x03
     490:	84 83       	std	Z+4, r24	; 0x04
     492:	95 83       	std	Z+5, r25	; 0x05
	* The head engines are:
	* Left engine		for [0, PI/2) and [-PI, -PI/2)  
	* Right engine		for [PI/2, PI) and [-PI/2, 0). 
	*/
	if (angle >= 0 && angle < PI/4) {
		factor = 1 - angle/(PI/4);
     494:	c7 01       	movw	r24, r14
     496:	b6 01       	movw	r22, r12
     498:	2b ed       	ldi	r18, 0xDB	; 219
     49a:	3f e0       	ldi	r19, 0x0F	; 15
     49c:	49 e4       	ldi	r20, 0x49	; 73
     49e:	5f e3       	ldi	r21, 0x3F	; 63
     4a0:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
     4a4:	9b 01       	movw	r18, r22
     4a6:	ac 01       	movw	r20, r24
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	80 e8       	ldi	r24, 0x80	; 128
     4ae:	9f e3       	ldi	r25, 0x3F	; 63
     4b0:	0e 94 c1 05 	call	0xb82	; 0xb82 <__subsf3>
		edata->left_engine_throttle = (double)(abs(x_value));
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
     4b4:	a5 01       	movw	r20, r10
     4b6:	94 01       	movw	r18, r8
     4b8:	0e 94 d6 07 	call	0xfac	; 0xfac <__mulsf3>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	f3 01       	movw	r30, r6
     4c2:	86 83       	std	Z+6, r24	; 0x06
     4c4:	97 83       	std	Z+7, r25	; 0x07
     4c6:	a0 87       	std	Z+8, r26	; 0x08
     4c8:	b1 87       	std	Z+9, r27	; 0x09
     4ca:	cd c1       	rjmp	.+922    	; 0x866 <setThrottles+0x446>
		
	} else if (angle >= PI/4 && angle < PI/2) {
     4cc:	c7 01       	movw	r24, r14
     4ce:	b6 01       	movw	r22, r12
     4d0:	2b ed       	ldi	r18, 0xDB	; 219
     4d2:	3f e0       	ldi	r19, 0x0F	; 15
     4d4:	49 e4       	ldi	r20, 0x49	; 73
     4d6:	5f e3       	ldi	r21, 0x3F	; 63
     4d8:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     4dc:	88 23       	and	r24, r24
     4de:	c4 f1       	brlt	.+112    	; 0x550 <setThrottles+0x130>
     4e0:	c7 01       	movw	r24, r14
     4e2:	b6 01       	movw	r22, r12
     4e4:	2b ed       	ldi	r18, 0xDB	; 219
     4e6:	3f e0       	ldi	r19, 0x0F	; 15
     4e8:	49 ec       	ldi	r20, 0xC9	; 201
     4ea:	5f e3       	ldi	r21, 0x3F	; 63
     4ec:	0e 94 88 06 	call	0xd10	; 0xd10 <__cmpsf2>
     4f0:	88 23       	and	r24, r24
     4f2:	74 f5       	brge	.+92     	; 0x550 <setThrottles+0x130>
		factor = (angle - PI/4)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
     4f4:	60 2f       	mov	r22, r16
     4f6:	71 2f       	mov	r23, r17
     4f8:	77 23       	and	r23, r23
     4fa:	1c f4       	brge	.+6      	; 0x502 <setThrottles+0xe2>
     4fc:	70 95       	com	r23
     4fe:	61 95       	neg	r22
     500:	7f 4f       	sbci	r23, 0xFF	; 255
     502:	88 27       	eor	r24, r24
     504:	77 fd       	sbrc	r23, 7
     506:	80 95       	com	r24
     508:	98 2f       	mov	r25, r24
     50a:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatsisf>
     50e:	4b 01       	movw	r8, r22
     510:	5c 01       	movw	r10, r24
     512:	f3 01       	movw	r30, r6
     514:	62 83       	std	Z+2, r22	; 0x02
     516:	73 83       	std	Z+3, r23	; 0x03
     518:	84 83       	std	Z+4, r24	; 0x04
     51a:	95 83       	std	Z+5, r25	; 0x05
		factor = 1 - angle/(PI/4);
		edata->left_engine_throttle = (double)(abs(x_value));
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
		
	} else if (angle >= PI/4 && angle < PI/2) {
		factor = (angle - PI/4)/(PI/4);
     51c:	c7 01       	movw	r24, r14
     51e:	b6 01       	movw	r22, r12
     520:	2b ed       	ldi	r18, 0xDB	; 219
     522:	3f e0       	ldi	r19, 0x0F	; 15
     524:	49 e4       	ldi	r20, 0x49	; 73
     526:	5f e3       	ldi	r21, 0x3F	; 63
     528:	0e 94 c1 05 	call	0xb82	; 0xb82 <__subsf3>
     52c:	2b ed       	ldi	r18, 0xDB	; 219
     52e:	3f e0       	ldi	r19, 0x0F	; 15
     530:	49 e4       	ldi	r20, 0x49	; 73
     532:	5f e3       	ldi	r21, 0x3F	; 63
     534:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
     538:	a5 01       	movw	r20, r10
     53a:	94 01       	movw	r18, r8
     53c:	0e 94 d6 07 	call	0xfac	; 0xfac <__mulsf3>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	f3 01       	movw	r30, r6
     546:	86 83       	std	Z+6, r24	; 0x06
     548:	97 83       	std	Z+7, r25	; 0x07
     54a:	a0 87       	std	Z+8, r26	; 0x08
     54c:	b1 87       	std	Z+9, r27	; 0x09
     54e:	8b c1       	rjmp	.+790    	; 0x866 <setThrottles+0x446>
		
	} else if (angle >= PI/2 && angle < 3*PI/4) {
     550:	c7 01       	movw	r24, r14
     552:	b6 01       	movw	r22, r12
     554:	2b ed       	ldi	r18, 0xDB	; 219
     556:	3f e0       	ldi	r19, 0x0F	; 15
     558:	49 ec       	ldi	r20, 0xC9	; 201
     55a:	5f e3       	ldi	r21, 0x3F	; 63
     55c:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     560:	88 23       	and	r24, r24
     562:	0c f4       	brge	.+2      	; 0x566 <setThrottles+0x146>
     564:	40 c0       	rjmp	.+128    	; 0x5e6 <setThrottles+0x1c6>
     566:	c7 01       	movw	r24, r14
     568:	b6 01       	movw	r22, r12
     56a:	24 ee       	ldi	r18, 0xE4	; 228
     56c:	3b ec       	ldi	r19, 0xCB	; 203
     56e:	46 e1       	ldi	r20, 0x16	; 22
     570:	50 e4       	ldi	r21, 0x40	; 64
     572:	0e 94 88 06 	call	0xd10	; 0xd10 <__cmpsf2>
     576:	88 23       	and	r24, r24
     578:	b4 f5       	brge	.+108    	; 0x5e6 <setThrottles+0x1c6>
		factor = 1 - (angle - PI/2)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
     57a:	60 2f       	mov	r22, r16
     57c:	71 2f       	mov	r23, r17
     57e:	77 23       	and	r23, r23
     580:	1c f4       	brge	.+6      	; 0x588 <setThrottles+0x168>
     582:	70 95       	com	r23
     584:	61 95       	neg	r22
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	88 27       	eor	r24, r24
     58a:	77 fd       	sbrc	r23, 7
     58c:	80 95       	com	r24
     58e:	98 2f       	mov	r25, r24
     590:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatsisf>
     594:	4b 01       	movw	r8, r22
     596:	5c 01       	movw	r10, r24
     598:	f3 01       	movw	r30, r6
     59a:	66 83       	std	Z+6, r22	; 0x06
     59c:	77 83       	std	Z+7, r23	; 0x07
     59e:	80 87       	std	Z+8, r24	; 0x08
     5a0:	91 87       	std	Z+9, r25	; 0x09
		factor = (angle - PI/4)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
		
	} else if (angle >= PI/2 && angle < 3*PI/4) {
		factor = 1 - (angle - PI/2)/(PI/4);
     5a2:	c7 01       	movw	r24, r14
     5a4:	b6 01       	movw	r22, r12
     5a6:	2b ed       	ldi	r18, 0xDB	; 219
     5a8:	3f e0       	ldi	r19, 0x0F	; 15
     5aa:	49 ec       	ldi	r20, 0xC9	; 201
     5ac:	5f e3       	ldi	r21, 0x3F	; 63
     5ae:	0e 94 c1 05 	call	0xb82	; 0xb82 <__subsf3>
     5b2:	2b ed       	ldi	r18, 0xDB	; 219
     5b4:	3f e0       	ldi	r19, 0x0F	; 15
     5b6:	49 e4       	ldi	r20, 0x49	; 73
     5b8:	5f e3       	ldi	r21, 0x3F	; 63
     5ba:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
     5be:	9b 01       	movw	r18, r22
     5c0:	ac 01       	movw	r20, r24
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	80 e8       	ldi	r24, 0x80	; 128
     5c8:	9f e3       	ldi	r25, 0x3F	; 63
     5ca:	0e 94 c1 05 	call	0xb82	; 0xb82 <__subsf3>
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
     5ce:	a5 01       	movw	r20, r10
     5d0:	94 01       	movw	r18, r8
     5d2:	0e 94 d6 07 	call	0xfac	; 0xfac <__mulsf3>
     5d6:	dc 01       	movw	r26, r24
     5d8:	cb 01       	movw	r24, r22
     5da:	f3 01       	movw	r30, r6
     5dc:	82 83       	std	Z+2, r24	; 0x02
     5de:	93 83       	std	Z+3, r25	; 0x03
     5e0:	a4 83       	std	Z+4, r26	; 0x04
     5e2:	b5 83       	std	Z+5, r27	; 0x05
     5e4:	40 c1       	rjmp	.+640    	; 0x866 <setThrottles+0x446>
		
	} else if (angle >= 3*PI/4 && angle <= PI) {
     5e6:	c7 01       	movw	r24, r14
     5e8:	b6 01       	movw	r22, r12
     5ea:	24 ee       	ldi	r18, 0xE4	; 228
     5ec:	3b ec       	ldi	r19, 0xCB	; 203
     5ee:	46 e1       	ldi	r20, 0x16	; 22
     5f0:	50 e4       	ldi	r21, 0x40	; 64
     5f2:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     5f6:	88 23       	and	r24, r24
     5f8:	c4 f1       	brlt	.+112    	; 0x66a <setThrottles+0x24a>
     5fa:	c7 01       	movw	r24, r14
     5fc:	b6 01       	movw	r22, r12
     5fe:	2b ed       	ldi	r18, 0xDB	; 219
     600:	3f e0       	ldi	r19, 0x0F	; 15
     602:	49 e4       	ldi	r20, 0x49	; 73
     604:	50 e4       	ldi	r21, 0x40	; 64
     606:	0e 94 88 06 	call	0xd10	; 0xd10 <__cmpsf2>
     60a:	18 16       	cp	r1, r24
     60c:	74 f1       	brlt	.+92     	; 0x66a <setThrottles+0x24a>
		factor = (angle - 3*PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
     60e:	6c 2f       	mov	r22, r28
     610:	7d 2f       	mov	r23, r29
     612:	77 23       	and	r23, r23
     614:	1c f4       	brge	.+6      	; 0x61c <setThrottles+0x1fc>
     616:	70 95       	com	r23
     618:	61 95       	neg	r22
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	88 27       	eor	r24, r24
     61e:	77 fd       	sbrc	r23, 7
     620:	80 95       	com	r24
     622:	98 2f       	mov	r25, r24
     624:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatsisf>
     628:	4b 01       	movw	r8, r22
     62a:	5c 01       	movw	r10, r24
     62c:	f3 01       	movw	r30, r6
     62e:	66 83       	std	Z+6, r22	; 0x06
     630:	77 83       	std	Z+7, r23	; 0x07
     632:	80 87       	std	Z+8, r24	; 0x08
     634:	91 87       	std	Z+9, r25	; 0x09
		factor = 1 - (angle - PI/2)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle >= 3*PI/4 && angle <= PI) {
		factor = (angle - 3*PI/4)/(PI/4);
     636:	c7 01       	movw	r24, r14
     638:	b6 01       	movw	r22, r12
     63a:	24 ee       	ldi	r18, 0xE4	; 228
     63c:	3b ec       	ldi	r19, 0xCB	; 203
     63e:	46 e1       	ldi	r20, 0x16	; 22
     640:	50 e4       	ldi	r21, 0x40	; 64
     642:	0e 94 c1 05 	call	0xb82	; 0xb82 <__subsf3>
     646:	2b ed       	ldi	r18, 0xDB	; 219
     648:	3f e0       	ldi	r19, 0x0F	; 15
     64a:	49 e4       	ldi	r20, 0x49	; 73
     64c:	5f e3       	ldi	r21, 0x3F	; 63
     64e:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
     652:	a5 01       	movw	r20, r10
     654:	94 01       	movw	r18, r8
     656:	0e 94 d6 07 	call	0xfac	; 0xfac <__mulsf3>
     65a:	dc 01       	movw	r26, r24
     65c:	cb 01       	movw	r24, r22
     65e:	f3 01       	movw	r30, r6
     660:	82 83       	std	Z+2, r24	; 0x02
     662:	93 83       	std	Z+3, r25	; 0x03
     664:	a4 83       	std	Z+4, r26	; 0x04
     666:	b5 83       	std	Z+5, r27	; 0x05
     668:	fe c0       	rjmp	.+508    	; 0x866 <setThrottles+0x446>
		
	} else if (angle < 0 && angle > -PI/4) {
     66a:	c7 01       	movw	r24, r14
     66c:	b6 01       	movw	r22, r12
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	a9 01       	movw	r20, r18
     674:	0e 94 88 06 	call	0xd10	; 0xd10 <__cmpsf2>
     678:	88 23       	and	r24, r24
     67a:	c4 f5       	brge	.+112    	; 0x6ec <setThrottles+0x2cc>
     67c:	c7 01       	movw	r24, r14
     67e:	b6 01       	movw	r22, r12
     680:	2b ed       	ldi	r18, 0xDB	; 219
     682:	3f e0       	ldi	r19, 0x0F	; 15
     684:	49 e4       	ldi	r20, 0x49	; 73
     686:	5f eb       	ldi	r21, 0xBF	; 191
     688:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     68c:	18 16       	cp	r1, r24
     68e:	74 f5       	brge	.+92     	; 0x6ec <setThrottles+0x2cc>
		factor = 1 - angle*(-1)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
     690:	6c 2f       	mov	r22, r28
     692:	7d 2f       	mov	r23, r29
     694:	77 23       	and	r23, r23
     696:	1c f4       	brge	.+6      	; 0x69e <setThrottles+0x27e>
     698:	70 95       	com	r23
     69a:	61 95       	neg	r22
     69c:	7f 4f       	sbci	r23, 0xFF	; 255
     69e:	88 27       	eor	r24, r24
     6a0:	77 fd       	sbrc	r23, 7
     6a2:	80 95       	com	r24
     6a4:	98 2f       	mov	r25, r24
     6a6:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatsisf>
     6aa:	4b 01       	movw	r8, r22
     6ac:	5c 01       	movw	r10, r24
     6ae:	f3 01       	movw	r30, r6
     6b0:	66 83       	std	Z+6, r22	; 0x06
     6b2:	77 83       	std	Z+7, r23	; 0x07
     6b4:	80 87       	std	Z+8, r24	; 0x08
     6b6:	91 87       	std	Z+9, r25	; 0x09
		factor = (angle - 3*PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle < 0 && angle > -PI/4) {
		factor = 1 - angle*(-1)/(PI/4);
     6b8:	c7 01       	movw	r24, r14
     6ba:	b6 01       	movw	r22, r12
     6bc:	2b ed       	ldi	r18, 0xDB	; 219
     6be:	3f e0       	ldi	r19, 0x0F	; 15
     6c0:	49 e4       	ldi	r20, 0x49	; 73
     6c2:	5f e3       	ldi	r21, 0x3F	; 63
     6c4:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e8       	ldi	r20, 0x80	; 128
     6ce:	5f e3       	ldi	r21, 0x3F	; 63
     6d0:	0e 94 c2 05 	call	0xb84	; 0xb84 <__addsf3>
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
     6d4:	a5 01       	movw	r20, r10
     6d6:	94 01       	movw	r18, r8
     6d8:	0e 94 d6 07 	call	0xfac	; 0xfac <__mulsf3>
     6dc:	dc 01       	movw	r26, r24
     6de:	cb 01       	movw	r24, r22
     6e0:	f3 01       	movw	r30, r6
     6e2:	82 83       	std	Z+2, r24	; 0x02
     6e4:	93 83       	std	Z+3, r25	; 0x03
     6e6:	a4 83       	std	Z+4, r26	; 0x04
     6e8:	b5 83       	std	Z+5, r27	; 0x05
     6ea:	bd c0       	rjmp	.+378    	; 0x866 <setThrottles+0x446>
		
	} else if (angle <= -PI/4 && angle > -PI/2) {
     6ec:	c7 01       	movw	r24, r14
     6ee:	b6 01       	movw	r22, r12
     6f0:	2b ed       	ldi	r18, 0xDB	; 219
     6f2:	3f e0       	ldi	r19, 0x0F	; 15
     6f4:	49 e4       	ldi	r20, 0x49	; 73
     6f6:	5f eb       	ldi	r21, 0xBF	; 191
     6f8:	0e 94 88 06 	call	0xd10	; 0xd10 <__cmpsf2>
     6fc:	18 16       	cp	r1, r24
     6fe:	cc f1       	brlt	.+114    	; 0x772 <setThrottles+0x352>
     700:	c7 01       	movw	r24, r14
     702:	b6 01       	movw	r22, r12
     704:	2b ed       	ldi	r18, 0xDB	; 219
     706:	3f e0       	ldi	r19, 0x0F	; 15
     708:	49 ec       	ldi	r20, 0xC9	; 201
     70a:	5f eb       	ldi	r21, 0xBF	; 191
     70c:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     710:	18 16       	cp	r1, r24
     712:	7c f5       	brge	.+94     	; 0x772 <setThrottles+0x352>
		factor = (angle*(-1) - PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
     714:	60 2f       	mov	r22, r16
     716:	71 2f       	mov	r23, r17
     718:	77 23       	and	r23, r23
     71a:	1c f4       	brge	.+6      	; 0x722 <setThrottles+0x302>
     71c:	70 95       	com	r23
     71e:	61 95       	neg	r22
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	88 27       	eor	r24, r24
     724:	77 fd       	sbrc	r23, 7
     726:	80 95       	com	r24
     728:	98 2f       	mov	r25, r24
     72a:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatsisf>
     72e:	4b 01       	movw	r8, r22
     730:	5c 01       	movw	r10, r24
     732:	f3 01       	movw	r30, r6
     734:	66 83       	std	Z+6, r22	; 0x06
     736:	77 83       	std	Z+7, r23	; 0x07
     738:	80 87       	std	Z+8, r24	; 0x08
     73a:	91 87       	std	Z+9, r25	; 0x09
		factor = 1 - angle*(-1)/(PI/4);
		edata->right_engine_throttle = (double)abs(x_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle <= -PI/4 && angle > -PI/2) {
		factor = (angle*(-1) - PI/4)/(PI/4);
     73c:	c7 01       	movw	r24, r14
     73e:	b6 01       	movw	r22, r12
     740:	90 58       	subi	r25, 0x80	; 128
     742:	2b ed       	ldi	r18, 0xDB	; 219
     744:	3f e0       	ldi	r19, 0x0F	; 15
     746:	49 e4       	ldi	r20, 0x49	; 73
     748:	5f e3       	ldi	r21, 0x3F	; 63
     74a:	0e 94 c1 05 	call	0xb82	; 0xb82 <__subsf3>
     74e:	2b ed       	ldi	r18, 0xDB	; 219
     750:	3f e0       	ldi	r19, 0x0F	; 15
     752:	49 e4       	ldi	r20, 0x49	; 73
     754:	5f e3       	ldi	r21, 0x3F	; 63
     756:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
     75a:	a5 01       	movw	r20, r10
     75c:	94 01       	movw	r18, r8
     75e:	0e 94 d6 07 	call	0xfac	; 0xfac <__mulsf3>
     762:	dc 01       	movw	r26, r24
     764:	cb 01       	movw	r24, r22
     766:	f3 01       	movw	r30, r6
     768:	82 83       	std	Z+2, r24	; 0x02
     76a:	93 83       	std	Z+3, r25	; 0x03
     76c:	a4 83       	std	Z+4, r26	; 0x04
     76e:	b5 83       	std	Z+5, r27	; 0x05
     770:	7a c0       	rjmp	.+244    	; 0x866 <setThrottles+0x446>
		
	} else if (angle <= -PI/2 && angle > -3*PI/4) {
     772:	c7 01       	movw	r24, r14
     774:	b6 01       	movw	r22, r12
     776:	2b ed       	ldi	r18, 0xDB	; 219
     778:	3f e0       	ldi	r19, 0x0F	; 15
     77a:	49 ec       	ldi	r20, 0xC9	; 201
     77c:	5f eb       	ldi	r21, 0xBF	; 191
     77e:	0e 94 88 06 	call	0xd10	; 0xd10 <__cmpsf2>
     782:	18 16       	cp	r1, r24
     784:	0c f4       	brge	.+2      	; 0x788 <setThrottles+0x368>
     786:	41 c0       	rjmp	.+130    	; 0x80a <setThrottles+0x3ea>
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	24 ee       	ldi	r18, 0xE4	; 228
     78e:	3b ec       	ldi	r19, 0xCB	; 203
     790:	46 e1       	ldi	r20, 0x16	; 22
     792:	50 ec       	ldi	r21, 0xC0	; 192
     794:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     798:	18 16       	cp	r1, r24
     79a:	bc f5       	brge	.+110    	; 0x80a <setThrottles+0x3ea>
		factor = 1 - (angle*(-1) - PI/2)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
     79c:	60 2f       	mov	r22, r16
     79e:	71 2f       	mov	r23, r17
     7a0:	77 23       	and	r23, r23
     7a2:	1c f4       	brge	.+6      	; 0x7aa <setThrottles+0x38a>
     7a4:	70 95       	com	r23
     7a6:	61 95       	neg	r22
     7a8:	7f 4f       	sbci	r23, 0xFF	; 255
     7aa:	88 27       	eor	r24, r24
     7ac:	77 fd       	sbrc	r23, 7
     7ae:	80 95       	com	r24
     7b0:	98 2f       	mov	r25, r24
     7b2:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatsisf>
     7b6:	4b 01       	movw	r8, r22
     7b8:	5c 01       	movw	r10, r24
     7ba:	f3 01       	movw	r30, r6
     7bc:	62 83       	std	Z+2, r22	; 0x02
     7be:	73 83       	std	Z+3, r23	; 0x03
     7c0:	84 83       	std	Z+4, r24	; 0x04
     7c2:	95 83       	std	Z+5, r25	; 0x05
		factor = (angle*(-1) - PI/4)/(PI/4);
		edata->right_engine_throttle = (double)abs(y_value);
		edata->left_engine_throttle = edata->right_engine_throttle * factor;
		
	} else if (angle <= -PI/2 && angle > -3*PI/4) {
		factor = 1 - (angle*(-1) - PI/2)/(PI/4);
     7c4:	c7 01       	movw	r24, r14
     7c6:	b6 01       	movw	r22, r12
     7c8:	90 58       	subi	r25, 0x80	; 128
     7ca:	2b ed       	ldi	r18, 0xDB	; 219
     7cc:	3f e0       	ldi	r19, 0x0F	; 15
     7ce:	49 ec       	ldi	r20, 0xC9	; 201
     7d0:	5f e3       	ldi	r21, 0x3F	; 63
     7d2:	0e 94 c1 05 	call	0xb82	; 0xb82 <__subsf3>
     7d6:	2b ed       	ldi	r18, 0xDB	; 219
     7d8:	3f e0       	ldi	r19, 0x0F	; 15
     7da:	49 e4       	ldi	r20, 0x49	; 73
     7dc:	5f e3       	ldi	r21, 0x3F	; 63
     7de:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
     7e2:	9b 01       	movw	r18, r22
     7e4:	ac 01       	movw	r20, r24
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	80 e8       	ldi	r24, 0x80	; 128
     7ec:	9f e3       	ldi	r25, 0x3F	; 63
     7ee:	0e 94 c1 05 	call	0xb82	; 0xb82 <__subsf3>
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
     7f2:	a5 01       	movw	r20, r10
     7f4:	94 01       	movw	r18, r8
     7f6:	0e 94 d6 07 	call	0xfac	; 0xfac <__mulsf3>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	f3 01       	movw	r30, r6
     800:	86 83       	std	Z+6, r24	; 0x06
     802:	97 83       	std	Z+7, r25	; 0x07
     804:	a0 87       	std	Z+8, r26	; 0x08
     806:	b1 87       	std	Z+9, r27	; 0x09
     808:	2e c0       	rjmp	.+92     	; 0x866 <setThrottles+0x446>
		
	} else {
		factor = (angle*(-1) - 3*PI/4)/(PI/4);
		edata->left_engine_throttle = (double)abs(x_value);
     80a:	6c 2f       	mov	r22, r28
     80c:	7d 2f       	mov	r23, r29
     80e:	77 23       	and	r23, r23
     810:	1c f4       	brge	.+6      	; 0x818 <setThrottles+0x3f8>
     812:	70 95       	com	r23
     814:	61 95       	neg	r22
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	88 27       	eor	r24, r24
     81a:	77 fd       	sbrc	r23, 7
     81c:	80 95       	com	r24
     81e:	98 2f       	mov	r25, r24
     820:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatsisf>
     824:	4b 01       	movw	r8, r22
     826:	5c 01       	movw	r10, r24
     828:	f3 01       	movw	r30, r6
     82a:	62 83       	std	Z+2, r22	; 0x02
     82c:	73 83       	std	Z+3, r23	; 0x03
     82e:	84 83       	std	Z+4, r24	; 0x04
     830:	95 83       	std	Z+5, r25	; 0x05
		factor = 1 - (angle*(-1) - PI/2)/(PI/4);
		edata->left_engine_throttle = (double)abs(y_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
		
	} else {
		factor = (angle*(-1) - 3*PI/4)/(PI/4);
     832:	c7 01       	movw	r24, r14
     834:	b6 01       	movw	r22, r12
     836:	90 58       	subi	r25, 0x80	; 128
     838:	24 ee       	ldi	r18, 0xE4	; 228
     83a:	3b ec       	ldi	r19, 0xCB	; 203
     83c:	46 e1       	ldi	r20, 0x16	; 22
     83e:	50 e4       	ldi	r21, 0x40	; 64
     840:	0e 94 c1 05 	call	0xb82	; 0xb82 <__subsf3>
     844:	2b ed       	ldi	r18, 0xDB	; 219
     846:	3f e0       	ldi	r19, 0x0F	; 15
     848:	49 e4       	ldi	r20, 0x49	; 73
     84a:	5f e3       	ldi	r21, 0x3F	; 63
     84c:	0e 94 8c 06 	call	0xd18	; 0xd18 <__divsf3>
		edata->left_engine_throttle = (double)abs(x_value);
		edata->right_engine_throttle = edata->left_engine_throttle * factor;
     850:	a5 01       	movw	r20, r10
     852:	94 01       	movw	r18, r8
     854:	0e 94 d6 07 	call	0xfac	; 0xfac <__mulsf3>
     858:	dc 01       	movw	r26, r24
     85a:	cb 01       	movw	r24, r22
     85c:	f3 01       	movw	r30, r6
     85e:	86 83       	std	Z+6, r24	; 0x06
     860:	97 83       	std	Z+7, r25	; 0x07
     862:	a0 87       	std	Z+8, r26	; 0x08
     864:	b1 87       	std	Z+9, r27	; 0x09
	}
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	df 90       	pop	r13
     874:	cf 90       	pop	r12
     876:	bf 90       	pop	r11
     878:	af 90       	pop	r10
     87a:	9f 90       	pop	r9
     87c:	8f 90       	pop	r8
     87e:	7f 90       	pop	r7
     880:	6f 90       	pop	r6
     882:	08 95       	ret

00000884 <compactData>:
* Input:	edata: engine_data - The engine data.
* Output:	unsigned char - The compressed data to be sent.
* Description:	Adds all engine info into one byte in the form
* [dir. left (1 bit)][throttle left (3 bit)][dir. right (1 bit)][throttle right (3 bit)].
*/
unsigned char compactData(engine_data *edata) {
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	8c 01       	movw	r16, r24
	
	unsigned char send_data;
	
	/* Place the left engine throttle data in send_data. */ 
	if (edata->left_engine_throttle >= 6.5) {
     894:	fc 01       	movw	r30, r24
     896:	c2 80       	ldd	r12, Z+2	; 0x02
     898:	d3 80       	ldd	r13, Z+3	; 0x03
     89a:	e4 80       	ldd	r14, Z+4	; 0x04
     89c:	f5 80       	ldd	r15, Z+5	; 0x05
     89e:	c7 01       	movw	r24, r14
     8a0:	b6 01       	movw	r22, r12
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 ed       	ldi	r20, 0xD0	; 208
     8a8:	50 e4       	ldi	r21, 0x40	; 64
     8aa:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     8ae:	88 23       	and	r24, r24
     8b0:	0c f0       	brlt	.+2      	; 0x8b4 <compactData+0x30>
     8b2:	3f c0       	rjmp	.+126    	; 0x932 <compactData+0xae>
		send_data = (unsigned char) 7;
	} else if (edata->left_engine_throttle >= 5.5) {
     8b4:	c7 01       	movw	r24, r14
     8b6:	b6 01       	movw	r22, r12
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	40 eb       	ldi	r20, 0xB0	; 176
     8be:	50 e4       	ldi	r21, 0x40	; 64
     8c0:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     8c4:	88 23       	and	r24, r24
     8c6:	bc f5       	brge	.+110    	; 0x936 <compactData+0xb2>
		send_data = (unsigned char) 6;
	} else if (edata->left_engine_throttle >= 4.5) {
     8c8:	c7 01       	movw	r24, r14
     8ca:	b6 01       	movw	r22, r12
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e9       	ldi	r20, 0x90	; 144
     8d2:	50 e4       	ldi	r21, 0x40	; 64
     8d4:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     8d8:	88 23       	and	r24, r24
     8da:	7c f5       	brge	.+94     	; 0x93a <compactData+0xb6>
		send_data = (unsigned char) 5;
	} else if (edata->left_engine_throttle >= 3.5) {
     8dc:	c7 01       	movw	r24, r14
     8de:	b6 01       	movw	r22, r12
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e6       	ldi	r20, 0x60	; 96
     8e6:	50 e4       	ldi	r21, 0x40	; 64
     8e8:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     8ec:	88 23       	and	r24, r24
     8ee:	3c f5       	brge	.+78     	; 0x93e <compactData+0xba>
		send_data = (unsigned char) 4;
	} else if (edata->left_engine_throttle >= 2.5) {
     8f0:	c7 01       	movw	r24, r14
     8f2:	b6 01       	movw	r22, r12
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e2       	ldi	r20, 0x20	; 32
     8fa:	50 e4       	ldi	r21, 0x40	; 64
     8fc:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     900:	88 23       	and	r24, r24
     902:	fc f4       	brge	.+62     	; 0x942 <compactData+0xbe>
		send_data = (unsigned char) 3;
	} else if (edata->left_engine_throttle >= 1.5) {
     904:	c7 01       	movw	r24, r14
     906:	b6 01       	movw	r22, r12
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 ec       	ldi	r20, 0xC0	; 192
     90e:	5f e3       	ldi	r21, 0x3F	; 63
     910:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     914:	88 23       	and	r24, r24
     916:	bc f4       	brge	.+46     	; 0x946 <compactData+0xc2>
	
	unsigned char send_data;
	
	/* Place the left engine throttle data in send_data. */ 
	if (edata->left_engine_throttle >= 6.5) {
		send_data = (unsigned char) 7;
     918:	c1 e0       	ldi	r28, 0x01	; 1
     91a:	c7 01       	movw	r24, r14
     91c:	b6 01       	movw	r22, r12
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	5f e3       	ldi	r21, 0x3F	; 63
     926:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     92a:	88 23       	and	r24, r24
     92c:	6c f4       	brge	.+26     	; 0x948 <compactData+0xc4>
     92e:	c0 e0       	ldi	r28, 0x00	; 0
     930:	0b c0       	rjmp	.+22     	; 0x948 <compactData+0xc4>
     932:	c7 e0       	ldi	r28, 0x07	; 7
     934:	09 c0       	rjmp	.+18     	; 0x948 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 5.5) {
		send_data = (unsigned char) 6;
     936:	c6 e0       	ldi	r28, 0x06	; 6
     938:	07 c0       	rjmp	.+14     	; 0x948 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 4.5) {
		send_data = (unsigned char) 5;
     93a:	c5 e0       	ldi	r28, 0x05	; 5
     93c:	05 c0       	rjmp	.+10     	; 0x948 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 3.5) {
		send_data = (unsigned char) 4;
     93e:	c4 e0       	ldi	r28, 0x04	; 4
     940:	03 c0       	rjmp	.+6      	; 0x948 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 2.5) {
		send_data = (unsigned char) 3;
     942:	c3 e0       	ldi	r28, 0x03	; 3
     944:	01 c0       	rjmp	.+2      	; 0x948 <compactData+0xc4>
	} else if (edata->left_engine_throttle >= 1.5) {
		send_data = (unsigned char) 2;
     946:	c2 e0       	ldi	r28, 0x02	; 2
		send_data = (unsigned char) 0;
	}
	
	/* Shift data four steps, which puts the left engine throttle 
	 * information in bit 6, 5 and 4. */
	send_data = send_data << 4;
     948:	c2 95       	swap	r28
     94a:	c0 7f       	andi	r28, 0xF0	; 240

	/* Put the right engine throttle information in the three lowest bits. */
	if (edata->right_engine_throttle >= 6.5) {
     94c:	f8 01       	movw	r30, r16
     94e:	c6 80       	ldd	r12, Z+6	; 0x06
     950:	d7 80       	ldd	r13, Z+7	; 0x07
     952:	e0 84       	ldd	r14, Z+8	; 0x08
     954:	f1 84       	ldd	r15, Z+9	; 0x09
     956:	c7 01       	movw	r24, r14
     958:	b6 01       	movw	r22, r12
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 ed       	ldi	r20, 0xD0	; 208
     960:	50 e4       	ldi	r21, 0x40	; 64
     962:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     966:	88 23       	and	r24, r24
     968:	14 f0       	brlt	.+4      	; 0x96e <compactData+0xea>
		send_data = send_data | (unsigned char) 7;
     96a:	c7 60       	ori	r28, 0x07	; 7
     96c:	47 c0       	rjmp	.+142    	; 0x9fc <compactData+0x178>
	} else if (edata->right_engine_throttle >= 5.5) {
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	40 eb       	ldi	r20, 0xB0	; 176
     978:	50 e4       	ldi	r21, 0x40	; 64
     97a:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     97e:	88 23       	and	r24, r24
     980:	14 f0       	brlt	.+4      	; 0x986 <compactData+0x102>
		send_data = send_data | (unsigned char) 6;
     982:	c6 60       	ori	r28, 0x06	; 6
     984:	3b c0       	rjmp	.+118    	; 0x9fc <compactData+0x178>
	} else if (edata->right_engine_throttle >= 4.5) {
     986:	c7 01       	movw	r24, r14
     988:	b6 01       	movw	r22, r12
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e9       	ldi	r20, 0x90	; 144
     990:	50 e4       	ldi	r21, 0x40	; 64
     992:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     996:	88 23       	and	r24, r24
     998:	14 f0       	brlt	.+4      	; 0x99e <compactData+0x11a>
		send_data = send_data | (unsigned char) 5;
     99a:	c5 60       	ori	r28, 0x05	; 5
     99c:	2f c0       	rjmp	.+94     	; 0x9fc <compactData+0x178>
	} else if (edata->right_engine_throttle >= 3.5) {
     99e:	c7 01       	movw	r24, r14
     9a0:	b6 01       	movw	r22, r12
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e6       	ldi	r20, 0x60	; 96
     9a8:	50 e4       	ldi	r21, 0x40	; 64
     9aa:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     9ae:	88 23       	and	r24, r24
     9b0:	14 f0       	brlt	.+4      	; 0x9b6 <compactData+0x132>
		send_data = send_data | (unsigned char) 4;
     9b2:	c4 60       	ori	r28, 0x04	; 4
     9b4:	23 c0       	rjmp	.+70     	; 0x9fc <compactData+0x178>
	} else if (edata->right_engine_throttle >= 2.5) {
     9b6:	c7 01       	movw	r24, r14
     9b8:	b6 01       	movw	r22, r12
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	40 e2       	ldi	r20, 0x20	; 32
     9c0:	50 e4       	ldi	r21, 0x40	; 64
     9c2:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     9c6:	88 23       	and	r24, r24
     9c8:	14 f0       	brlt	.+4      	; 0x9ce <compactData+0x14a>
		send_data = send_data | (unsigned char) 3;
     9ca:	c3 60       	ori	r28, 0x03	; 3
     9cc:	17 c0       	rjmp	.+46     	; 0x9fc <compactData+0x178>
	} else if (edata->right_engine_throttle >= 1.5) {
     9ce:	c7 01       	movw	r24, r14
     9d0:	b6 01       	movw	r22, r12
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 ec       	ldi	r20, 0xC0	; 192
     9d8:	5f e3       	ldi	r21, 0x3F	; 63
     9da:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     9de:	88 23       	and	r24, r24
     9e0:	14 f0       	brlt	.+4      	; 0x9e6 <compactData+0x162>
		send_data = send_data | (unsigned char) 2;
     9e2:	c2 60       	ori	r28, 0x02	; 2
     9e4:	0b c0       	rjmp	.+22     	; 0x9fc <compactData+0x178>
	} else if (edata->right_engine_throttle >= 0.5) {
     9e6:	c7 01       	movw	r24, r14
     9e8:	b6 01       	movw	r22, r12
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	5f e3       	ldi	r21, 0x3F	; 63
     9f2:	0e 94 cb 07 	call	0xf96	; 0xf96 <__gesf2>
     9f6:	88 23       	and	r24, r24
     9f8:	0c f0       	brlt	.+2      	; 0x9fc <compactData+0x178>
		send_data = send_data | (unsigned char) 1;
     9fa:	c1 60       	ori	r28, 0x01	; 1
		send_data = send_data | (unsigned char) 0;
	}
	
	/* Set the direction information in bit 7 for the left engine
	 * and bit 3 for the right engine. */
	if (edata->left_engine_dir == FORWARD) {
     9fc:	f8 01       	movw	r30, r16
     9fe:	80 81       	ld	r24, Z
     a00:	88 23       	and	r24, r24
     a02:	09 f4       	brne	.+2      	; 0xa06 <compactData+0x182>
		send_data = send_data | (1<<7);
     a04:	c0 68       	ori	r28, 0x80	; 128
	} else {
		send_data = send_data | (0<<7);
	}
	
	if (edata->right_engine_dir == FORWARD) {
     a06:	f8 01       	movw	r30, r16
     a08:	81 81       	ldd	r24, Z+1	; 0x01
     a0a:	88 23       	and	r24, r24
     a0c:	09 f4       	brne	.+2      	; 0xa10 <compactData+0x18c>
		send_data = send_data | (1<<3);
     a0e:	c8 60       	ori	r28, 0x08	; 8
	} else {
		send_data = send_data | (0<<3);
	}
	
	return send_data;
}
     a10:	8c 2f       	mov	r24, r28
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	08 95       	ret

00000a22 <sleepMode>:
* Description: Enters sleep mode.
*/
void sleepMode() {
	
	/* Clear global interrupt flag. */
	cli();
     a22:	f8 94       	cli
	
	/* Initialize low interrupt on INT0 in order for the MCU to be awoken. */
	initOnInterrupt();
     a24:	0e 94 7f 00 	call	0xfe	; 0xfe <initOnInterrupt>
	
	/* Turn off power to voltage regulator that powers 
	 * OLED and bluetooth unit. */
	PORTB &= ~_BV(POWER_CONTROL);
     a28:	28 98       	cbi	0x05, 0	; 5
	DDRD &= ~_BV(LED_PIN2);
	DDRD &= ~_BV(LED_PIN1);
*/

	/* Set sleep mode and enable sleep setup. */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a2a:	83 b7       	in	r24, 0x33	; 51
     a2c:	81 7f       	andi	r24, 0xF1	; 241
     a2e:	84 60       	ori	r24, 0x04	; 4
     a30:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     a32:	83 b7       	in	r24, 0x33	; 51
     a34:	81 60       	ori	r24, 0x01	; 1
     a36:	83 bf       	out	0x33, r24	; 51
	
	/* Disable ADC, watchdog and BOD. */
	ADCSRA = 0;
     a38:	10 92 7a 00 	sts	0x007A, r1
	wdt_disable();
     a3c:	88 e1       	ldi	r24, 0x18	; 24
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	80 93 60 00 	sts	0x0060, r24
     a46:	10 92 60 00 	sts	0x0060, r1
     a4a:	0f be       	out	0x3f, r0	; 63
	sleep_bod_disable();
     a4c:	85 b7       	in	r24, 0x35	; 53
     a4e:	80 66       	ori	r24, 0x60	; 96
     a50:	85 bf       	out	0x35, r24	; 53
     a52:	8f 7d       	andi	r24, 0xDF	; 223
     a54:	85 bf       	out	0x35, r24	; 53
	
	/* Set global interrupt flag to allow waking signals from
	 * the external interrupt and power down MCU. */
	sei();
     a56:	78 94       	sei
	sleep_cpu();
     a58:	88 95       	sleep
	
	/* Wake up here and disable sleep setup mode. */
	sleep_disable();
     a5a:	83 b7       	in	r24, 0x33	; 51
     a5c:	8e 7f       	andi	r24, 0xFE	; 254
     a5e:	83 bf       	out	0x33, r24	; 51
	
	/* Re-initialize. */
	init();
     a60:	0e 94 c7 00 	call	0x18e	; 0x18e <init>
     a64:	08 95       	ret

00000a66 <main>:

/*Define test buttons. */
#define SW1 PA2
#define SW2 PA3

int main(void) {
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	2a 97       	sbiw	r28, 0x0a	; 10
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	de bf       	out	0x3e, r29	; 62
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	cd bf       	out	0x3d, r28	; 61
    /* Engine data container. */
	engine_data *edata, ed;
	edata = &ed;
	
	/* Initialize setup. */
	init();
     a7a:	0e 94 c7 00 	call	0x18e	; 0x18e <init>

	/* Main loop. */
	while (1) {
		
		/* Get coordinates. */
		x_value = getXValue();
     a7e:	0e 94 05 01 	call	0x20a	; 0x20a <getXValue>
     a82:	90 93 03 01 	sts	0x0103, r25
     a86:	80 93 02 01 	sts	0x0102, r24
		y_value = getYValue();
     a8a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <getYValue>
     a8e:	90 93 05 01 	sts	0x0105, r25
     a92:	80 93 04 01 	sts	0x0104, r24
		
		/* Calculate angle of the position in a coordinate system. */
		double angle = atan2((double)y_value, (double)x_value);
     a96:	9c 01       	movw	r18, r24
     a98:	b9 01       	movw	r22, r18
     a9a:	88 27       	eor	r24, r24
     a9c:	77 fd       	sbrc	r23, 7
     a9e:	80 95       	com	r24
     aa0:	98 2f       	mov	r25, r24
     aa2:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatsisf>
     aa6:	6b 01       	movw	r12, r22
     aa8:	7c 01       	movw	r14, r24
     aaa:	60 91 02 01 	lds	r22, 0x0102
     aae:	70 91 03 01 	lds	r23, 0x0103
     ab2:	88 27       	eor	r24, r24
     ab4:	77 fd       	sbrc	r23, 7
     ab6:	80 95       	com	r24
     ab8:	98 2f       	mov	r25, r24
     aba:	0e 94 f6 06 	call	0xdec	; 0xdec <__floatsisf>
     abe:	9b 01       	movw	r18, r22
     ac0:	ac 01       	movw	r20, r24
     ac2:	c7 01       	movw	r24, r14
     ac4:	b6 01       	movw	r22, r12
     ac6:	0e 94 35 06 	call	0xc6a	; 0xc6a <atan2>
     aca:	6b 01       	movw	r12, r22
     acc:	7c 01       	movw	r14, r24
		
		/* Set all info in edata. */
		setDirections(edata, angle);
     ace:	ce 01       	movw	r24, r28
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	b7 01       	movw	r22, r14
     ad4:	a6 01       	movw	r20, r12
     ad6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <setDirections>
		setThrottles(edata, angle, x_value, y_value);
     ada:	20 91 02 01 	lds	r18, 0x0102
     ade:	30 91 03 01 	lds	r19, 0x0103
     ae2:	00 91 04 01 	lds	r16, 0x0104
     ae6:	10 91 05 01 	lds	r17, 0x0105
     aea:	ce 01       	movw	r24, r28
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	b7 01       	movw	r22, r14
     af0:	a6 01       	movw	r20, r12
     af2:	0e 94 10 02 	call	0x420	; 0x420 <setThrottles>
		
		/* Compact all engine data into one 8-bit char. */
		send_data = compactData(edata);
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	0e 94 42 04 	call	0x884	; 0x884 <compactData>
		
		/* Start data transfer signal. */
//		USART_Transmit(255);
		
		/* Send data via bluetooth. */
		USART_Transmit(send_data);
     afe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART_Transmit>

		/*Set buttons as input*/
		DDRA &= ~_BV(SW1);
     b02:	0a 98       	cbi	0x01, 2	; 1
		DDRA &= ~_BV(SW2);
     b04:	0b 98       	cbi	0x01, 3	; 1
		
		/* Set the LED pin as an output. */
		DDRA |= _BV(LED_H);
     b06:	0f 9a       	sbi	0x01, 7	; 1
		DDRA |= _BV(LED_V);
     b08:	0e 9a       	sbi	0x01, 6	; 1
		DDRA |= _BV(LED_U);
     b0a:	0d 9a       	sbi	0x01, 5	; 1
		DDRA |= _BV(LED_N);
     b0c:	0c 9a       	sbi	0x01, 4	; 1

		if ((PINA & _BV(SW1))){
     b0e:	02 9b       	sbis	0x00, 2	; 0
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <main+0xb2>
			
			PORTA |= _BV(LED_H);
     b12:	17 9a       	sbi	0x02, 7	; 2
			PORTA |= _BV(LED_V);
     b14:	16 9a       	sbi	0x02, 6	; 2
     b16:	14 c0       	rjmp	.+40     	; 0xb40 <main+0xda>
		}
		else if (adc_read(X_AXIS) > ADC_THRESHOLDH3) {
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <adc_read>
     b1e:	32 e0       	ldi	r19, 0x02	; 2
     b20:	81 3c       	cpi	r24, 0xC1	; 193
     b22:	93 07       	cpc	r25, r19
     b24:	10 f0       	brcs	.+4      	; 0xb2a <main+0xc4>
			
			PORTA |= _BV(LED_H);
     b26:	17 9a       	sbi	0x02, 7	; 2
     b28:	0b c0       	rjmp	.+22     	; 0xb40 <main+0xda>
		} else if (adc_read(X_AXIS) < ADC_THRESHOLDL3) {
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <adc_read>
     b30:	21 e0       	ldi	r18, 0x01	; 1
     b32:	80 34       	cpi	r24, 0x40	; 64
     b34:	92 07       	cpc	r25, r18
     b36:	10 f4       	brcc	.+4      	; 0xb3c <main+0xd6>
			
			PORTA |= _BV(LED_V);
     b38:	16 9a       	sbi	0x02, 6	; 2
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <main+0xda>
		}
		else{
			
			PORTA &= ~_BV(LED_H);
     b3c:	17 98       	cbi	0x02, 7	; 2
			PORTA &= ~_BV(LED_V);
     b3e:	16 98       	cbi	0x02, 6	; 2
		}
		
		
		if ((PINA & _BV(SW2))){
     b40:	03 9b       	sbis	0x00, 3	; 0
     b42:	03 c0       	rjmp	.+6      	; 0xb4a <main+0xe4>
			
			PORTA |= _BV(LED_U);
     b44:	15 9a       	sbi	0x02, 5	; 2
			PORTA |= _BV(LED_N);
     b46:	14 9a       	sbi	0x02, 4	; 2
     b48:	14 c0       	rjmp	.+40     	; 0xb72 <main+0x10c>
		}
		else if (adc_read(Y_AXIS) > ADC_THRESHOLDH3) {
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <adc_read>
     b50:	32 e0       	ldi	r19, 0x02	; 2
     b52:	81 3c       	cpi	r24, 0xC1	; 193
     b54:	93 07       	cpc	r25, r19
     b56:	10 f0       	brcs	.+4      	; 0xb5c <main+0xf6>
			
			PORTA |= _BV(LED_N);
     b58:	14 9a       	sbi	0x02, 4	; 2
     b5a:	0b c0       	rjmp	.+22     	; 0xb72 <main+0x10c>
		} else if (adc_read(Y_AXIS) < ADC_THRESHOLDL3) {
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <adc_read>
     b62:	21 e0       	ldi	r18, 0x01	; 1
     b64:	80 34       	cpi	r24, 0x40	; 64
     b66:	92 07       	cpc	r25, r18
     b68:	10 f4       	brcc	.+4      	; 0xb6e <main+0x108>
			
			PORTA |= _BV(LED_U);
     b6a:	15 9a       	sbi	0x02, 5	; 2
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <main+0x10c>
		}
		else{
			
			PORTA &= ~_BV(LED_U);
     b6e:	15 98       	cbi	0x02, 5	; 2
			PORTA &= ~_BV(LED_N);
     b70:	14 98       	cbi	0x02, 4	; 2
		}
		
		
		/* Check if sleep mode is to be activated. */
		if (power == OFF) {
     b72:	80 91 00 01 	lds	r24, 0x0100
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	09 f0       	breq	.+2      	; 0xb7c <main+0x116>
     b7a:	81 cf       	rjmp	.-254    	; 0xa7e <main+0x18>
			sleepMode();
     b7c:	0e 94 11 05 	call	0xa22	; 0xa22 <sleepMode>
     b80:	7e cf       	rjmp	.-260    	; 0xa7e <main+0x18>

00000b82 <__subsf3>:
     b82:	50 58       	subi	r21, 0x80	; 128

00000b84 <__addsf3>:
     b84:	bb 27       	eor	r27, r27
     b86:	aa 27       	eor	r26, r26
     b88:	0e d0       	rcall	.+28     	; 0xba6 <__addsf3x>
     b8a:	cb c1       	rjmp	.+918    	; 0xf22 <__fp_round>
     b8c:	bc d1       	rcall	.+888    	; 0xf06 <__fp_pscA>
     b8e:	30 f0       	brcs	.+12     	; 0xb9c <__addsf3+0x18>
     b90:	c1 d1       	rcall	.+898    	; 0xf14 <__fp_pscB>
     b92:	20 f0       	brcs	.+8      	; 0xb9c <__addsf3+0x18>
     b94:	31 f4       	brne	.+12     	; 0xba2 <__addsf3+0x1e>
     b96:	9f 3f       	cpi	r25, 0xFF	; 255
     b98:	11 f4       	brne	.+4      	; 0xb9e <__addsf3+0x1a>
     b9a:	1e f4       	brtc	.+6      	; 0xba2 <__addsf3+0x1e>
     b9c:	8c c1       	rjmp	.+792    	; 0xeb6 <__fp_nan>
     b9e:	0e f4       	brtc	.+2      	; 0xba2 <__addsf3+0x1e>
     ba0:	e0 95       	com	r30
     ba2:	e7 fb       	bst	r30, 7
     ba4:	82 c1       	rjmp	.+772    	; 0xeaa <__fp_inf>

00000ba6 <__addsf3x>:
     ba6:	e9 2f       	mov	r30, r25
     ba8:	cd d1       	rcall	.+922    	; 0xf44 <__fp_split3>
     baa:	80 f3       	brcs	.-32     	; 0xb8c <__addsf3+0x8>
     bac:	ba 17       	cp	r27, r26
     bae:	62 07       	cpc	r22, r18
     bb0:	73 07       	cpc	r23, r19
     bb2:	84 07       	cpc	r24, r20
     bb4:	95 07       	cpc	r25, r21
     bb6:	18 f0       	brcs	.+6      	; 0xbbe <__addsf3x+0x18>
     bb8:	71 f4       	brne	.+28     	; 0xbd6 <__addsf3x+0x30>
     bba:	9e f5       	brtc	.+102    	; 0xc22 <__addsf3x+0x7c>
     bbc:	e5 c1       	rjmp	.+970    	; 0xf88 <__fp_zero>
     bbe:	0e f4       	brtc	.+2      	; 0xbc2 <__addsf3x+0x1c>
     bc0:	e0 95       	com	r30
     bc2:	0b 2e       	mov	r0, r27
     bc4:	ba 2f       	mov	r27, r26
     bc6:	a0 2d       	mov	r26, r0
     bc8:	0b 01       	movw	r0, r22
     bca:	b9 01       	movw	r22, r18
     bcc:	90 01       	movw	r18, r0
     bce:	0c 01       	movw	r0, r24
     bd0:	ca 01       	movw	r24, r20
     bd2:	a0 01       	movw	r20, r0
     bd4:	11 24       	eor	r1, r1
     bd6:	ff 27       	eor	r31, r31
     bd8:	59 1b       	sub	r21, r25
     bda:	99 f0       	breq	.+38     	; 0xc02 <__addsf3x+0x5c>
     bdc:	59 3f       	cpi	r21, 0xF9	; 249
     bde:	50 f4       	brcc	.+20     	; 0xbf4 <__addsf3x+0x4e>
     be0:	50 3e       	cpi	r21, 0xE0	; 224
     be2:	68 f1       	brcs	.+90     	; 0xc3e <__addsf3x+0x98>
     be4:	1a 16       	cp	r1, r26
     be6:	f0 40       	sbci	r31, 0x00	; 0
     be8:	a2 2f       	mov	r26, r18
     bea:	23 2f       	mov	r18, r19
     bec:	34 2f       	mov	r19, r20
     bee:	44 27       	eor	r20, r20
     bf0:	58 5f       	subi	r21, 0xF8	; 248
     bf2:	f3 cf       	rjmp	.-26     	; 0xbda <__addsf3x+0x34>
     bf4:	46 95       	lsr	r20
     bf6:	37 95       	ror	r19
     bf8:	27 95       	ror	r18
     bfa:	a7 95       	ror	r26
     bfc:	f0 40       	sbci	r31, 0x00	; 0
     bfe:	53 95       	inc	r21
     c00:	c9 f7       	brne	.-14     	; 0xbf4 <__addsf3x+0x4e>
     c02:	7e f4       	brtc	.+30     	; 0xc22 <__addsf3x+0x7c>
     c04:	1f 16       	cp	r1, r31
     c06:	ba 0b       	sbc	r27, r26
     c08:	62 0b       	sbc	r22, r18
     c0a:	73 0b       	sbc	r23, r19
     c0c:	84 0b       	sbc	r24, r20
     c0e:	ba f0       	brmi	.+46     	; 0xc3e <__addsf3x+0x98>
     c10:	91 50       	subi	r25, 0x01	; 1
     c12:	a1 f0       	breq	.+40     	; 0xc3c <__addsf3x+0x96>
     c14:	ff 0f       	add	r31, r31
     c16:	bb 1f       	adc	r27, r27
     c18:	66 1f       	adc	r22, r22
     c1a:	77 1f       	adc	r23, r23
     c1c:	88 1f       	adc	r24, r24
     c1e:	c2 f7       	brpl	.-16     	; 0xc10 <__addsf3x+0x6a>
     c20:	0e c0       	rjmp	.+28     	; 0xc3e <__addsf3x+0x98>
     c22:	ba 0f       	add	r27, r26
     c24:	62 1f       	adc	r22, r18
     c26:	73 1f       	adc	r23, r19
     c28:	84 1f       	adc	r24, r20
     c2a:	48 f4       	brcc	.+18     	; 0xc3e <__addsf3x+0x98>
     c2c:	87 95       	ror	r24
     c2e:	77 95       	ror	r23
     c30:	67 95       	ror	r22
     c32:	b7 95       	ror	r27
     c34:	f7 95       	ror	r31
     c36:	9e 3f       	cpi	r25, 0xFE	; 254
     c38:	08 f0       	brcs	.+2      	; 0xc3c <__addsf3x+0x96>
     c3a:	b3 cf       	rjmp	.-154    	; 0xba2 <__addsf3+0x1e>
     c3c:	93 95       	inc	r25
     c3e:	88 0f       	add	r24, r24
     c40:	08 f0       	brcs	.+2      	; 0xc44 <__addsf3x+0x9e>
     c42:	99 27       	eor	r25, r25
     c44:	ee 0f       	add	r30, r30
     c46:	97 95       	ror	r25
     c48:	87 95       	ror	r24
     c4a:	08 95       	ret
     c4c:	5c d1       	rcall	.+696    	; 0xf06 <__fp_pscA>
     c4e:	58 f0       	brcs	.+22     	; 0xc66 <__addsf3x+0xc0>
     c50:	80 e8       	ldi	r24, 0x80	; 128
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	09 f4       	brne	.+2      	; 0xc58 <__addsf3x+0xb2>
     c56:	9e ef       	ldi	r25, 0xFE	; 254
     c58:	5d d1       	rcall	.+698    	; 0xf14 <__fp_pscB>
     c5a:	28 f0       	brcs	.+10     	; 0xc66 <__addsf3x+0xc0>
     c5c:	40 e8       	ldi	r20, 0x80	; 128
     c5e:	51 e0       	ldi	r21, 0x01	; 1
     c60:	59 f4       	brne	.+22     	; 0xc78 <atan2+0xe>
     c62:	5e ef       	ldi	r21, 0xFE	; 254
     c64:	09 c0       	rjmp	.+18     	; 0xc78 <atan2+0xe>
     c66:	27 c1       	rjmp	.+590    	; 0xeb6 <__fp_nan>
     c68:	8f c1       	rjmp	.+798    	; 0xf88 <__fp_zero>

00000c6a <atan2>:
     c6a:	e9 2f       	mov	r30, r25
     c6c:	e0 78       	andi	r30, 0x80	; 128
     c6e:	6a d1       	rcall	.+724    	; 0xf44 <__fp_split3>
     c70:	68 f3       	brcs	.-38     	; 0xc4c <__addsf3x+0xa6>
     c72:	09 2e       	mov	r0, r25
     c74:	05 2a       	or	r0, r21
     c76:	c1 f3       	breq	.-16     	; 0xc68 <__addsf3x+0xc2>
     c78:	26 17       	cp	r18, r22
     c7a:	37 07       	cpc	r19, r23
     c7c:	48 07       	cpc	r20, r24
     c7e:	59 07       	cpc	r21, r25
     c80:	38 f0       	brcs	.+14     	; 0xc90 <atan2+0x26>
     c82:	0e 2e       	mov	r0, r30
     c84:	07 f8       	bld	r0, 7
     c86:	e0 25       	eor	r30, r0
     c88:	69 f0       	breq	.+26     	; 0xca4 <atan2+0x3a>
     c8a:	e0 25       	eor	r30, r0
     c8c:	e0 64       	ori	r30, 0x40	; 64
     c8e:	0a c0       	rjmp	.+20     	; 0xca4 <atan2+0x3a>
     c90:	ef 63       	ori	r30, 0x3F	; 63
     c92:	07 f8       	bld	r0, 7
     c94:	00 94       	com	r0
     c96:	07 fa       	bst	r0, 7
     c98:	db 01       	movw	r26, r22
     c9a:	b9 01       	movw	r22, r18
     c9c:	9d 01       	movw	r18, r26
     c9e:	dc 01       	movw	r26, r24
     ca0:	ca 01       	movw	r24, r20
     ca2:	ad 01       	movw	r20, r26
     ca4:	ef 93       	push	r30
     ca6:	47 d0       	rcall	.+142    	; 0xd36 <__divsf3_pse>
     ca8:	3c d1       	rcall	.+632    	; 0xf22 <__fp_round>
     caa:	0a d0       	rcall	.+20     	; 0xcc0 <atan>
     cac:	5f 91       	pop	r21
     cae:	55 23       	and	r21, r21
     cb0:	31 f0       	breq	.+12     	; 0xcbe <atan2+0x54>
     cb2:	2b ed       	ldi	r18, 0xDB	; 219
     cb4:	3f e0       	ldi	r19, 0x0F	; 15
     cb6:	49 e4       	ldi	r20, 0x49	; 73
     cb8:	50 fd       	sbrc	r21, 0
     cba:	49 ec       	ldi	r20, 0xC9	; 201
     cbc:	63 cf       	rjmp	.-314    	; 0xb84 <__addsf3>
     cbe:	08 95       	ret

00000cc0 <atan>:
     cc0:	df 93       	push	r29
     cc2:	dd 27       	eor	r29, r29
     cc4:	b9 2f       	mov	r27, r25
     cc6:	bf 77       	andi	r27, 0x7F	; 127
     cc8:	40 e8       	ldi	r20, 0x80	; 128
     cca:	5f e3       	ldi	r21, 0x3F	; 63
     ccc:	16 16       	cp	r1, r22
     cce:	17 06       	cpc	r1, r23
     cd0:	48 07       	cpc	r20, r24
     cd2:	5b 07       	cpc	r21, r27
     cd4:	10 f4       	brcc	.+4      	; 0xcda <atan+0x1a>
     cd6:	d9 2f       	mov	r29, r25
     cd8:	62 d1       	rcall	.+708    	; 0xf9e <inverse>
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	7f 93       	push	r23
     ce0:	6f 93       	push	r22
     ce2:	c7 d1       	rcall	.+910    	; 0x1072 <square>
     ce4:	ec e8       	ldi	r30, 0x8C	; 140
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	e9 d0       	rcall	.+466    	; 0xebc <__fp_powser>
     cea:	1b d1       	rcall	.+566    	; 0xf22 <__fp_round>
     cec:	2f 91       	pop	r18
     cee:	3f 91       	pop	r19
     cf0:	4f 91       	pop	r20
     cf2:	5f 91       	pop	r21
     cf4:	67 d1       	rcall	.+718    	; 0xfc4 <__mulsf3x>
     cf6:	dd 23       	and	r29, r29
     cf8:	49 f0       	breq	.+18     	; 0xd0c <atan+0x4c>
     cfa:	90 58       	subi	r25, 0x80	; 128
     cfc:	a2 ea       	ldi	r26, 0xA2	; 162
     cfe:	2a ed       	ldi	r18, 0xDA	; 218
     d00:	3f e0       	ldi	r19, 0x0F	; 15
     d02:	49 ec       	ldi	r20, 0xC9	; 201
     d04:	5f e3       	ldi	r21, 0x3F	; 63
     d06:	d0 78       	andi	r29, 0x80	; 128
     d08:	5d 27       	eor	r21, r29
     d0a:	4d df       	rcall	.-358    	; 0xba6 <__addsf3x>
     d0c:	df 91       	pop	r29
     d0e:	09 c1       	rjmp	.+530    	; 0xf22 <__fp_round>

00000d10 <__cmpsf2>:
     d10:	a8 d0       	rcall	.+336    	; 0xe62 <__fp_cmp>
     d12:	08 f4       	brcc	.+2      	; 0xd16 <__cmpsf2+0x6>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	08 95       	ret

00000d18 <__divsf3>:
     d18:	0c d0       	rcall	.+24     	; 0xd32 <__divsf3x>
     d1a:	03 c1       	rjmp	.+518    	; 0xf22 <__fp_round>
     d1c:	fb d0       	rcall	.+502    	; 0xf14 <__fp_pscB>
     d1e:	40 f0       	brcs	.+16     	; 0xd30 <__divsf3+0x18>
     d20:	f2 d0       	rcall	.+484    	; 0xf06 <__fp_pscA>
     d22:	30 f0       	brcs	.+12     	; 0xd30 <__divsf3+0x18>
     d24:	21 f4       	brne	.+8      	; 0xd2e <__divsf3+0x16>
     d26:	5f 3f       	cpi	r21, 0xFF	; 255
     d28:	19 f0       	breq	.+6      	; 0xd30 <__divsf3+0x18>
     d2a:	bf c0       	rjmp	.+382    	; 0xeaa <__fp_inf>
     d2c:	51 11       	cpse	r21, r1
     d2e:	2d c1       	rjmp	.+602    	; 0xf8a <__fp_szero>
     d30:	c2 c0       	rjmp	.+388    	; 0xeb6 <__fp_nan>

00000d32 <__divsf3x>:
     d32:	08 d1       	rcall	.+528    	; 0xf44 <__fp_split3>
     d34:	98 f3       	brcs	.-26     	; 0xd1c <__divsf3+0x4>

00000d36 <__divsf3_pse>:
     d36:	99 23       	and	r25, r25
     d38:	c9 f3       	breq	.-14     	; 0xd2c <__divsf3+0x14>
     d3a:	55 23       	and	r21, r21
     d3c:	b1 f3       	breq	.-20     	; 0xd2a <__divsf3+0x12>
     d3e:	95 1b       	sub	r25, r21
     d40:	55 0b       	sbc	r21, r21
     d42:	bb 27       	eor	r27, r27
     d44:	aa 27       	eor	r26, r26
     d46:	62 17       	cp	r22, r18
     d48:	73 07       	cpc	r23, r19
     d4a:	84 07       	cpc	r24, r20
     d4c:	38 f0       	brcs	.+14     	; 0xd5c <__divsf3_pse+0x26>
     d4e:	9f 5f       	subi	r25, 0xFF	; 255
     d50:	5f 4f       	sbci	r21, 0xFF	; 255
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	aa 1f       	adc	r26, r26
     d5a:	a9 f3       	breq	.-22     	; 0xd46 <__divsf3_pse+0x10>
     d5c:	33 d0       	rcall	.+102    	; 0xdc4 <__divsf3_pse+0x8e>
     d5e:	0e 2e       	mov	r0, r30
     d60:	3a f0       	brmi	.+14     	; 0xd70 <__divsf3_pse+0x3a>
     d62:	e0 e8       	ldi	r30, 0x80	; 128
     d64:	30 d0       	rcall	.+96     	; 0xdc6 <__divsf3_pse+0x90>
     d66:	91 50       	subi	r25, 0x01	; 1
     d68:	50 40       	sbci	r21, 0x00	; 0
     d6a:	e6 95       	lsr	r30
     d6c:	00 1c       	adc	r0, r0
     d6e:	ca f7       	brpl	.-14     	; 0xd62 <__divsf3_pse+0x2c>
     d70:	29 d0       	rcall	.+82     	; 0xdc4 <__divsf3_pse+0x8e>
     d72:	fe 2f       	mov	r31, r30
     d74:	27 d0       	rcall	.+78     	; 0xdc4 <__divsf3_pse+0x8e>
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	88 1f       	adc	r24, r24
     d7c:	bb 1f       	adc	r27, r27
     d7e:	26 17       	cp	r18, r22
     d80:	37 07       	cpc	r19, r23
     d82:	48 07       	cpc	r20, r24
     d84:	ab 07       	cpc	r26, r27
     d86:	b0 e8       	ldi	r27, 0x80	; 128
     d88:	09 f0       	breq	.+2      	; 0xd8c <__divsf3_pse+0x56>
     d8a:	bb 0b       	sbc	r27, r27
     d8c:	80 2d       	mov	r24, r0
     d8e:	bf 01       	movw	r22, r30
     d90:	ff 27       	eor	r31, r31
     d92:	93 58       	subi	r25, 0x83	; 131
     d94:	5f 4f       	sbci	r21, 0xFF	; 255
     d96:	2a f0       	brmi	.+10     	; 0xda2 <__divsf3_pse+0x6c>
     d98:	9e 3f       	cpi	r25, 0xFE	; 254
     d9a:	51 05       	cpc	r21, r1
     d9c:	68 f0       	brcs	.+26     	; 0xdb8 <__divsf3_pse+0x82>
     d9e:	85 c0       	rjmp	.+266    	; 0xeaa <__fp_inf>
     da0:	f4 c0       	rjmp	.+488    	; 0xf8a <__fp_szero>
     da2:	5f 3f       	cpi	r21, 0xFF	; 255
     da4:	ec f3       	brlt	.-6      	; 0xda0 <__divsf3_pse+0x6a>
     da6:	98 3e       	cpi	r25, 0xE8	; 232
     da8:	dc f3       	brlt	.-10     	; 0xda0 <__divsf3_pse+0x6a>
     daa:	86 95       	lsr	r24
     dac:	77 95       	ror	r23
     dae:	67 95       	ror	r22
     db0:	b7 95       	ror	r27
     db2:	f7 95       	ror	r31
     db4:	9f 5f       	subi	r25, 0xFF	; 255
     db6:	c9 f7       	brne	.-14     	; 0xdaa <__divsf3_pse+0x74>
     db8:	88 0f       	add	r24, r24
     dba:	91 1d       	adc	r25, r1
     dbc:	96 95       	lsr	r25
     dbe:	87 95       	ror	r24
     dc0:	97 f9       	bld	r25, 7
     dc2:	08 95       	ret
     dc4:	e1 e0       	ldi	r30, 0x01	; 1
     dc6:	66 0f       	add	r22, r22
     dc8:	77 1f       	adc	r23, r23
     dca:	88 1f       	adc	r24, r24
     dcc:	bb 1f       	adc	r27, r27
     dce:	62 17       	cp	r22, r18
     dd0:	73 07       	cpc	r23, r19
     dd2:	84 07       	cpc	r24, r20
     dd4:	ba 07       	cpc	r27, r26
     dd6:	20 f0       	brcs	.+8      	; 0xde0 <__divsf3_pse+0xaa>
     dd8:	62 1b       	sub	r22, r18
     dda:	73 0b       	sbc	r23, r19
     ddc:	84 0b       	sbc	r24, r20
     dde:	ba 0b       	sbc	r27, r26
     de0:	ee 1f       	adc	r30, r30
     de2:	88 f7       	brcc	.-30     	; 0xdc6 <__divsf3_pse+0x90>
     de4:	e0 95       	com	r30
     de6:	08 95       	ret

00000de8 <__floatunsisf>:
     de8:	e8 94       	clt
     dea:	09 c0       	rjmp	.+18     	; 0xdfe <__floatsisf+0x12>

00000dec <__floatsisf>:
     dec:	97 fb       	bst	r25, 7
     dee:	3e f4       	brtc	.+14     	; 0xdfe <__floatsisf+0x12>
     df0:	90 95       	com	r25
     df2:	80 95       	com	r24
     df4:	70 95       	com	r23
     df6:	61 95       	neg	r22
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	8f 4f       	sbci	r24, 0xFF	; 255
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	99 23       	and	r25, r25
     e00:	a9 f0       	breq	.+42     	; 0xe2c <__floatsisf+0x40>
     e02:	f9 2f       	mov	r31, r25
     e04:	96 e9       	ldi	r25, 0x96	; 150
     e06:	bb 27       	eor	r27, r27
     e08:	93 95       	inc	r25
     e0a:	f6 95       	lsr	r31
     e0c:	87 95       	ror	r24
     e0e:	77 95       	ror	r23
     e10:	67 95       	ror	r22
     e12:	b7 95       	ror	r27
     e14:	f1 11       	cpse	r31, r1
     e16:	f8 cf       	rjmp	.-16     	; 0xe08 <__floatsisf+0x1c>
     e18:	fa f4       	brpl	.+62     	; 0xe58 <__floatsisf+0x6c>
     e1a:	bb 0f       	add	r27, r27
     e1c:	11 f4       	brne	.+4      	; 0xe22 <__floatsisf+0x36>
     e1e:	60 ff       	sbrs	r22, 0
     e20:	1b c0       	rjmp	.+54     	; 0xe58 <__floatsisf+0x6c>
     e22:	6f 5f       	subi	r22, 0xFF	; 255
     e24:	7f 4f       	sbci	r23, 0xFF	; 255
     e26:	8f 4f       	sbci	r24, 0xFF	; 255
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	16 c0       	rjmp	.+44     	; 0xe58 <__floatsisf+0x6c>
     e2c:	88 23       	and	r24, r24
     e2e:	11 f0       	breq	.+4      	; 0xe34 <__floatsisf+0x48>
     e30:	96 e9       	ldi	r25, 0x96	; 150
     e32:	11 c0       	rjmp	.+34     	; 0xe56 <__floatsisf+0x6a>
     e34:	77 23       	and	r23, r23
     e36:	21 f0       	breq	.+8      	; 0xe40 <__floatsisf+0x54>
     e38:	9e e8       	ldi	r25, 0x8E	; 142
     e3a:	87 2f       	mov	r24, r23
     e3c:	76 2f       	mov	r23, r22
     e3e:	05 c0       	rjmp	.+10     	; 0xe4a <__floatsisf+0x5e>
     e40:	66 23       	and	r22, r22
     e42:	71 f0       	breq	.+28     	; 0xe60 <__floatsisf+0x74>
     e44:	96 e8       	ldi	r25, 0x86	; 134
     e46:	86 2f       	mov	r24, r22
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	2a f0       	brmi	.+10     	; 0xe58 <__floatsisf+0x6c>
     e4e:	9a 95       	dec	r25
     e50:	66 0f       	add	r22, r22
     e52:	77 1f       	adc	r23, r23
     e54:	88 1f       	adc	r24, r24
     e56:	da f7       	brpl	.-10     	; 0xe4e <__floatsisf+0x62>
     e58:	88 0f       	add	r24, r24
     e5a:	96 95       	lsr	r25
     e5c:	87 95       	ror	r24
     e5e:	97 f9       	bld	r25, 7
     e60:	08 95       	ret

00000e62 <__fp_cmp>:
     e62:	99 0f       	add	r25, r25
     e64:	00 08       	sbc	r0, r0
     e66:	55 0f       	add	r21, r21
     e68:	aa 0b       	sbc	r26, r26
     e6a:	e0 e8       	ldi	r30, 0x80	; 128
     e6c:	fe ef       	ldi	r31, 0xFE	; 254
     e6e:	16 16       	cp	r1, r22
     e70:	17 06       	cpc	r1, r23
     e72:	e8 07       	cpc	r30, r24
     e74:	f9 07       	cpc	r31, r25
     e76:	c0 f0       	brcs	.+48     	; 0xea8 <__fp_cmp+0x46>
     e78:	12 16       	cp	r1, r18
     e7a:	13 06       	cpc	r1, r19
     e7c:	e4 07       	cpc	r30, r20
     e7e:	f5 07       	cpc	r31, r21
     e80:	98 f0       	brcs	.+38     	; 0xea8 <__fp_cmp+0x46>
     e82:	62 1b       	sub	r22, r18
     e84:	73 0b       	sbc	r23, r19
     e86:	84 0b       	sbc	r24, r20
     e88:	95 0b       	sbc	r25, r21
     e8a:	39 f4       	brne	.+14     	; 0xe9a <__fp_cmp+0x38>
     e8c:	0a 26       	eor	r0, r26
     e8e:	61 f0       	breq	.+24     	; 0xea8 <__fp_cmp+0x46>
     e90:	23 2b       	or	r18, r19
     e92:	24 2b       	or	r18, r20
     e94:	25 2b       	or	r18, r21
     e96:	21 f4       	brne	.+8      	; 0xea0 <__fp_cmp+0x3e>
     e98:	08 95       	ret
     e9a:	0a 26       	eor	r0, r26
     e9c:	09 f4       	brne	.+2      	; 0xea0 <__fp_cmp+0x3e>
     e9e:	a1 40       	sbci	r26, 0x01	; 1
     ea0:	a6 95       	lsr	r26
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	81 1d       	adc	r24, r1
     ea6:	81 1d       	adc	r24, r1
     ea8:	08 95       	ret

00000eaa <__fp_inf>:
     eaa:	97 f9       	bld	r25, 7
     eac:	9f 67       	ori	r25, 0x7F	; 127
     eae:	80 e8       	ldi	r24, 0x80	; 128
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	08 95       	ret

00000eb6 <__fp_nan>:
     eb6:	9f ef       	ldi	r25, 0xFF	; 255
     eb8:	80 ec       	ldi	r24, 0xC0	; 192
     eba:	08 95       	ret

00000ebc <__fp_powser>:
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	1f 93       	push	r17
     ec2:	0f 93       	push	r16
     ec4:	ff 92       	push	r15
     ec6:	ef 92       	push	r14
     ec8:	df 92       	push	r13
     eca:	7b 01       	movw	r14, r22
     ecc:	8c 01       	movw	r16, r24
     ece:	68 94       	set
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <__fp_powser+0x20>
     ed2:	da 2e       	mov	r13, r26
     ed4:	ef 01       	movw	r28, r30
     ed6:	76 d0       	rcall	.+236    	; 0xfc4 <__mulsf3x>
     ed8:	fe 01       	movw	r30, r28
     eda:	e8 94       	clt
     edc:	a5 91       	lpm	r26, Z+
     ede:	25 91       	lpm	r18, Z+
     ee0:	35 91       	lpm	r19, Z+
     ee2:	45 91       	lpm	r20, Z+
     ee4:	55 91       	lpm	r21, Z+
     ee6:	ae f3       	brts	.-22     	; 0xed2 <__fp_powser+0x16>
     ee8:	ef 01       	movw	r28, r30
     eea:	5d de       	rcall	.-838    	; 0xba6 <__addsf3x>
     eec:	fe 01       	movw	r30, r28
     eee:	97 01       	movw	r18, r14
     ef0:	a8 01       	movw	r20, r16
     ef2:	da 94       	dec	r13
     ef4:	79 f7       	brne	.-34     	; 0xed4 <__fp_powser+0x18>
     ef6:	df 90       	pop	r13
     ef8:	ef 90       	pop	r14
     efa:	ff 90       	pop	r15
     efc:	0f 91       	pop	r16
     efe:	1f 91       	pop	r17
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <__fp_pscA>:
     f06:	00 24       	eor	r0, r0
     f08:	0a 94       	dec	r0
     f0a:	16 16       	cp	r1, r22
     f0c:	17 06       	cpc	r1, r23
     f0e:	18 06       	cpc	r1, r24
     f10:	09 06       	cpc	r0, r25
     f12:	08 95       	ret

00000f14 <__fp_pscB>:
     f14:	00 24       	eor	r0, r0
     f16:	0a 94       	dec	r0
     f18:	12 16       	cp	r1, r18
     f1a:	13 06       	cpc	r1, r19
     f1c:	14 06       	cpc	r1, r20
     f1e:	05 06       	cpc	r0, r21
     f20:	08 95       	ret

00000f22 <__fp_round>:
     f22:	09 2e       	mov	r0, r25
     f24:	03 94       	inc	r0
     f26:	00 0c       	add	r0, r0
     f28:	11 f4       	brne	.+4      	; 0xf2e <__fp_round+0xc>
     f2a:	88 23       	and	r24, r24
     f2c:	52 f0       	brmi	.+20     	; 0xf42 <__fp_round+0x20>
     f2e:	bb 0f       	add	r27, r27
     f30:	40 f4       	brcc	.+16     	; 0xf42 <__fp_round+0x20>
     f32:	bf 2b       	or	r27, r31
     f34:	11 f4       	brne	.+4      	; 0xf3a <__fp_round+0x18>
     f36:	60 ff       	sbrs	r22, 0
     f38:	04 c0       	rjmp	.+8      	; 0xf42 <__fp_round+0x20>
     f3a:	6f 5f       	subi	r22, 0xFF	; 255
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	8f 4f       	sbci	r24, 0xFF	; 255
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	08 95       	ret

00000f44 <__fp_split3>:
     f44:	57 fd       	sbrc	r21, 7
     f46:	90 58       	subi	r25, 0x80	; 128
     f48:	44 0f       	add	r20, r20
     f4a:	55 1f       	adc	r21, r21
     f4c:	59 f0       	breq	.+22     	; 0xf64 <__fp_splitA+0x10>
     f4e:	5f 3f       	cpi	r21, 0xFF	; 255
     f50:	71 f0       	breq	.+28     	; 0xf6e <__fp_splitA+0x1a>
     f52:	47 95       	ror	r20

00000f54 <__fp_splitA>:
     f54:	88 0f       	add	r24, r24
     f56:	97 fb       	bst	r25, 7
     f58:	99 1f       	adc	r25, r25
     f5a:	61 f0       	breq	.+24     	; 0xf74 <__fp_splitA+0x20>
     f5c:	9f 3f       	cpi	r25, 0xFF	; 255
     f5e:	79 f0       	breq	.+30     	; 0xf7e <__fp_splitA+0x2a>
     f60:	87 95       	ror	r24
     f62:	08 95       	ret
     f64:	12 16       	cp	r1, r18
     f66:	13 06       	cpc	r1, r19
     f68:	14 06       	cpc	r1, r20
     f6a:	55 1f       	adc	r21, r21
     f6c:	f2 cf       	rjmp	.-28     	; 0xf52 <__fp_split3+0xe>
     f6e:	46 95       	lsr	r20
     f70:	f1 df       	rcall	.-30     	; 0xf54 <__fp_splitA>
     f72:	08 c0       	rjmp	.+16     	; 0xf84 <__fp_splitA+0x30>
     f74:	16 16       	cp	r1, r22
     f76:	17 06       	cpc	r1, r23
     f78:	18 06       	cpc	r1, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	f1 cf       	rjmp	.-30     	; 0xf60 <__fp_splitA+0xc>
     f7e:	86 95       	lsr	r24
     f80:	71 05       	cpc	r23, r1
     f82:	61 05       	cpc	r22, r1
     f84:	08 94       	sec
     f86:	08 95       	ret

00000f88 <__fp_zero>:
     f88:	e8 94       	clt

00000f8a <__fp_szero>:
     f8a:	bb 27       	eor	r27, r27
     f8c:	66 27       	eor	r22, r22
     f8e:	77 27       	eor	r23, r23
     f90:	cb 01       	movw	r24, r22
     f92:	97 f9       	bld	r25, 7
     f94:	08 95       	ret

00000f96 <__gesf2>:
     f96:	65 df       	rcall	.-310    	; 0xe62 <__fp_cmp>
     f98:	08 f4       	brcc	.+2      	; 0xf9c <__gesf2+0x6>
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	08 95       	ret

00000f9e <inverse>:
     f9e:	9b 01       	movw	r18, r22
     fa0:	ac 01       	movw	r20, r24
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	80 e8       	ldi	r24, 0x80	; 128
     fa8:	9f e3       	ldi	r25, 0x3F	; 63
     faa:	b6 ce       	rjmp	.-660    	; 0xd18 <__divsf3>

00000fac <__mulsf3>:
     fac:	0b d0       	rcall	.+22     	; 0xfc4 <__mulsf3x>
     fae:	b9 cf       	rjmp	.-142    	; 0xf22 <__fp_round>
     fb0:	aa df       	rcall	.-172    	; 0xf06 <__fp_pscA>
     fb2:	28 f0       	brcs	.+10     	; 0xfbe <__mulsf3+0x12>
     fb4:	af df       	rcall	.-162    	; 0xf14 <__fp_pscB>
     fb6:	18 f0       	brcs	.+6      	; 0xfbe <__mulsf3+0x12>
     fb8:	95 23       	and	r25, r21
     fba:	09 f0       	breq	.+2      	; 0xfbe <__mulsf3+0x12>
     fbc:	76 cf       	rjmp	.-276    	; 0xeaa <__fp_inf>
     fbe:	7b cf       	rjmp	.-266    	; 0xeb6 <__fp_nan>
     fc0:	11 24       	eor	r1, r1
     fc2:	e3 cf       	rjmp	.-58     	; 0xf8a <__fp_szero>

00000fc4 <__mulsf3x>:
     fc4:	bf df       	rcall	.-130    	; 0xf44 <__fp_split3>
     fc6:	a0 f3       	brcs	.-24     	; 0xfb0 <__mulsf3+0x4>

00000fc8 <__mulsf3_pse>:
     fc8:	95 9f       	mul	r25, r21
     fca:	d1 f3       	breq	.-12     	; 0xfc0 <__mulsf3+0x14>
     fcc:	95 0f       	add	r25, r21
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	55 1f       	adc	r21, r21
     fd2:	62 9f       	mul	r22, r18
     fd4:	f0 01       	movw	r30, r0
     fd6:	72 9f       	mul	r23, r18
     fd8:	bb 27       	eor	r27, r27
     fda:	f0 0d       	add	r31, r0
     fdc:	b1 1d       	adc	r27, r1
     fde:	63 9f       	mul	r22, r19
     fe0:	aa 27       	eor	r26, r26
     fe2:	f0 0d       	add	r31, r0
     fe4:	b1 1d       	adc	r27, r1
     fe6:	aa 1f       	adc	r26, r26
     fe8:	64 9f       	mul	r22, r20
     fea:	66 27       	eor	r22, r22
     fec:	b0 0d       	add	r27, r0
     fee:	a1 1d       	adc	r26, r1
     ff0:	66 1f       	adc	r22, r22
     ff2:	82 9f       	mul	r24, r18
     ff4:	22 27       	eor	r18, r18
     ff6:	b0 0d       	add	r27, r0
     ff8:	a1 1d       	adc	r26, r1
     ffa:	62 1f       	adc	r22, r18
     ffc:	73 9f       	mul	r23, r19
     ffe:	b0 0d       	add	r27, r0
    1000:	a1 1d       	adc	r26, r1
    1002:	62 1f       	adc	r22, r18
    1004:	83 9f       	mul	r24, r19
    1006:	a0 0d       	add	r26, r0
    1008:	61 1d       	adc	r22, r1
    100a:	22 1f       	adc	r18, r18
    100c:	74 9f       	mul	r23, r20
    100e:	33 27       	eor	r19, r19
    1010:	a0 0d       	add	r26, r0
    1012:	61 1d       	adc	r22, r1
    1014:	23 1f       	adc	r18, r19
    1016:	84 9f       	mul	r24, r20
    1018:	60 0d       	add	r22, r0
    101a:	21 1d       	adc	r18, r1
    101c:	82 2f       	mov	r24, r18
    101e:	76 2f       	mov	r23, r22
    1020:	6a 2f       	mov	r22, r26
    1022:	11 24       	eor	r1, r1
    1024:	9f 57       	subi	r25, 0x7F	; 127
    1026:	50 40       	sbci	r21, 0x00	; 0
    1028:	8a f0       	brmi	.+34     	; 0x104c <__mulsf3_pse+0x84>
    102a:	e1 f0       	breq	.+56     	; 0x1064 <__mulsf3_pse+0x9c>
    102c:	88 23       	and	r24, r24
    102e:	4a f0       	brmi	.+18     	; 0x1042 <__mulsf3_pse+0x7a>
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	bb 1f       	adc	r27, r27
    1036:	66 1f       	adc	r22, r22
    1038:	77 1f       	adc	r23, r23
    103a:	88 1f       	adc	r24, r24
    103c:	91 50       	subi	r25, 0x01	; 1
    103e:	50 40       	sbci	r21, 0x00	; 0
    1040:	a9 f7       	brne	.-22     	; 0x102c <__mulsf3_pse+0x64>
    1042:	9e 3f       	cpi	r25, 0xFE	; 254
    1044:	51 05       	cpc	r21, r1
    1046:	70 f0       	brcs	.+28     	; 0x1064 <__mulsf3_pse+0x9c>
    1048:	30 cf       	rjmp	.-416    	; 0xeaa <__fp_inf>
    104a:	9f cf       	rjmp	.-194    	; 0xf8a <__fp_szero>
    104c:	5f 3f       	cpi	r21, 0xFF	; 255
    104e:	ec f3       	brlt	.-6      	; 0x104a <__mulsf3_pse+0x82>
    1050:	98 3e       	cpi	r25, 0xE8	; 232
    1052:	dc f3       	brlt	.-10     	; 0x104a <__mulsf3_pse+0x82>
    1054:	86 95       	lsr	r24
    1056:	77 95       	ror	r23
    1058:	67 95       	ror	r22
    105a:	b7 95       	ror	r27
    105c:	f7 95       	ror	r31
    105e:	e7 95       	ror	r30
    1060:	9f 5f       	subi	r25, 0xFF	; 255
    1062:	c1 f7       	brne	.-16     	; 0x1054 <__mulsf3_pse+0x8c>
    1064:	fe 2b       	or	r31, r30
    1066:	88 0f       	add	r24, r24
    1068:	91 1d       	adc	r25, r1
    106a:	96 95       	lsr	r25
    106c:	87 95       	ror	r24
    106e:	97 f9       	bld	r25, 7
    1070:	08 95       	ret

00001072 <square>:
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	9a cf       	rjmp	.-204    	; 0xfac <__mulsf3>

00001078 <_exit>:
    1078:	f8 94       	cli

0000107a <__stop_program>:
    107a:	ff cf       	rjmp	.-2      	; 0x107a <__stop_program>
